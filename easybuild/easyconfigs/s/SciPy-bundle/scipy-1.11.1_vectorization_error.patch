Fixes the vectorization bug. `ValueError: buffer source array is read-only`
see https://github.com/scipy/scipy/issues/16792
patch source: https://github.com/scipy/scipy/pull/20195
--- scipy/linalg/_cythonized_array_utils.pyx.orig
+++ scipy/linalg/_cythonized_array_utils.pyx
@@ -158,7 +158,7 @@
 
 
 @cython.initializedcheck(False)
-def bandwidth_c(np_numeric_t[:, ::1]A):
+def bandwidth_c(const np_numeric_t[:, ::1]A):
     cdef int l, u
     with nogil:
         l, u = band_check_internal_c(A)
@@ -166,7 +166,7 @@
 
 
 @cython.initializedcheck(False)
-def bandwidth_noncontig(np_numeric_t[:, :]A):
+def bandwidth_noncontig(const np_numeric_t[:, :]A):
     cdef int l, u
     with nogil:
         l, u = band_check_internal_noncontig(A)
@@ -176,7 +176,7 @@
 @cython.initializedcheck(False)
 @cython.boundscheck(False)
 @cython.wraparound(False)
-cdef inline (int, int) band_check_internal_c(np_numeric_t[:, ::1]A) noexcept nogil:
+cdef inline (int, int) band_check_internal_c(const np_numeric_t[:, ::1]A) noexcept nogil:
     cdef Py_ssize_t n = A.shape[0], m = A.shape[1]
     cdef Py_ssize_t lower_band = 0, upper_band = 0, r, c
     cdef np_numeric_t zero = 0
@@ -207,7 +207,7 @@
 @cython.initializedcheck(False)
 @cython.boundscheck(False)
 @cython.wraparound(False)
-cdef inline (int, int) band_check_internal_noncontig(np_numeric_t[:, :]A) noexcept nogil:
+cdef inline (int, int) band_check_internal_noncontig(const np_numeric_t[:, :]A) noexcept nogil:
     cdef Py_ssize_t n = A.shape[0], m = A.shape[1]
     cdef Py_ssize_t lower_band = 0, upper_band = 0, r, c
     cdef np_numeric_t zero = 0
@@ -324,7 +324,7 @@
 
 
 @cython.initializedcheck(False)
-def is_sym_her_real_c(np_numeric_t[:, ::1]A):
+def is_sym_her_real_c(const np_numeric_t[:, ::1]A):
     cdef bint s
     with nogil:
         s = is_sym_her_real_c_internal(A)
@@ -332,7 +332,7 @@
 
 
 @cython.initializedcheck(False)
-def is_sym_her_real_noncontig(np_numeric_t[:, :]A):
+def is_sym_her_real_noncontig(const np_numeric_t[:, :]A):
     cdef bint s
     with nogil:
         s = is_sym_her_real_noncontig_internal(A)
@@ -342,7 +342,7 @@
 @cython.initializedcheck(False)
 @cython.boundscheck(False)
 @cython.wraparound(False)
-cdef inline bint is_sym_her_real_c_internal(np_numeric_t[:, ::1]A) noexcept nogil:
+cdef inline bint is_sym_her_real_c_internal(const np_numeric_t[:, ::1]A) noexcept nogil:
     cdef Py_ssize_t n = A.shape[0], r, c
 
     for r in xrange(n):
@@ -355,7 +355,7 @@
 @cython.initializedcheck(False)
 @cython.boundscheck(False)
 @cython.wraparound(False)
-cdef inline bint is_sym_her_real_noncontig_internal(np_numeric_t[:, :]A) noexcept nogil:
+cdef inline bint is_sym_her_real_noncontig_internal(const np_numeric_t[:, :]A) noexcept nogil:
     cdef Py_ssize_t n = A.shape[0], r, c
 
     for r in xrange(n):
@@ -469,7 +469,7 @@
 
 
 @cython.initializedcheck(False)
-def is_sym_her_complex_c(np_complex_numeric_t[:, ::1]A):
+def is_sym_her_complex_c(const np_complex_numeric_t[:, ::1]A):
     cdef bint s
     with nogil:
         s = is_sym_her_complex_c_internal(A)
@@ -485,7 +485,7 @@
 @cython.initializedcheck(False)
 @cython.boundscheck(False)
 @cython.wraparound(False)
-cdef inline bint is_sym_her_complex_c_internal(np_complex_numeric_t[:, ::1]A) noexcept nogil:
+cdef inline bint is_sym_her_complex_c_internal(const np_complex_numeric_t[:, ::1]A) noexcept nogil:
     cdef Py_ssize_t n = A.shape[0], r, c
 
     for r in xrange(n):
@@ -497,7 +497,7 @@
 @cython.initializedcheck(False)
 @cython.boundscheck(False)
 @cython.wraparound(False)
-cdef inline bint is_sym_her_complex_noncontig_internal(np_complex_numeric_t[:, :]A) noexcept nogil:
+cdef inline bint is_sym_her_complex_noncontig_internal(const np_complex_numeric_t[:, :]A) noexcept nogil:
     cdef Py_ssize_t n = A.shape[0], r, c
 
     for r in xrange(n):

