# Thomas Hoffmann, EMBL Heidelberg, structures-it@embl.de, 2024/02
# 1. migration from pydantic ver. 1.x to ver. 2.x by tool 
#    bump-pydantic ver. 0.8.0 (https://pypi.org/project/bump-pydantic/)
# 2. replace @root_validator by @model_validator(mode='after') in 
#    sample_types.py
# 3. change of requirements accordingly in pyproject.toml and PKG-INFO
diff -ru morphosamplers-0.0.10/PKG-INFO morphosamplers-0.0.10_bump_pydantic2/PKG-INFO
--- morphosamplers-0.0.10/PKG-INFO	2023-11-27 16:48:35.350763000 +0100
+++ morphosamplers-0.0.10_bump_pydantic2/PKG-INFO	2024-02-29 11:12:14.621599361 +0100
@@ -19,7 +19,7 @@
 Requires-Dist: einops
 Requires-Dist: numpy
 Requires-Dist: psygnal
-Requires-Dist: pydantic<2
+Requires-Dist: pydantic>=2
 Requires-Dist: scipy
 Requires-Dist: typing-extensions
 Provides-Extra: test
diff -ru morphosamplers-0.0.10/pyproject.toml morphosamplers-0.0.10_bump_pydantic2/pyproject.toml
--- morphosamplers-0.0.10/pyproject.toml	2023-11-27 16:48:18.000000000 +0100
+++ morphosamplers-0.0.10_bump_pydantic2/pyproject.toml	2024-02-29 11:12:06.188358266 +0100
@@ -27,7 +27,7 @@
     "einops",
     "numpy",
     "psygnal",
-    "pydantic<2",
+    "pydantic>=2",
     "scipy",
     "typing-extensions"
 ]
diff -ru morphosamplers-0.0.10/src/morphosamplers/core.py morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/core.py
--- morphosamplers-0.0.10/src/morphosamplers/core.py	2023-11-27 16:48:18.000000000 +0100
+++ morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/core.py	2024-02-29 10:43:07.994797553 +0100
@@ -1,18 +1,16 @@
 from abc import abstractmethod
 from typing import TypeVar, Protocol, Generic
-
-from pydantic.generics import GenericModel
+from pydantic import BaseModel, ConfigDict
 
 M = TypeVar("M", bound="MorphoModel")
 S = TypeVar("S")
 
 
-class MorphoModel(GenericModel, Generic[M]):
+class MorphoModel(BaseModel, Generic[M]):
     """A set of attributes defining a geometrical support."""
-
-    class Config:
-        allow_mutation = False
-        arbitrary_types_allowed = True
+    # TODO[pydantic]: The following keys were removed: `allow_mutation`.
+    # Check https://docs.pydantic.dev/dev-v2/migration/#changes-to-config for more information.
+    model_config = ConfigDict(allow_mutation=False, arbitrary_types_allowed=True)
 
 
 class SamplerProtocol(Protocol[M, S]):
@@ -27,8 +25,8 @@
 SamplerType = TypeVar("SamplerType", bound=SamplerProtocol)
 
 
-class MorphoSampler(GenericModel, Generic[SamplerType]):
+class MorphoSampler(BaseModel, Generic[SamplerType]):
     """Concrete samplers should subclass this generic model."""
-
-    class Config:
-        allow_mutation = False
+    # TODO[pydantic]: The following keys were removed: `allow_mutation`.
+    # Check https://docs.pydantic.dev/dev-v2/migration/#changes-to-config for more information.
+    model_config = ConfigDict(allow_mutation=False)
diff -ru morphosamplers-0.0.10/src/morphosamplers/models/path.py morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/models/path.py
--- morphosamplers-0.0.10/src/morphosamplers/models/path.py	2023-11-27 16:48:18.000000000 +0100
+++ morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/models/path.py	2024-02-29 10:43:07.834793481 +0100
@@ -1,5 +1,5 @@
 import numpy as np
-from pydantic import validator
+from pydantic import field_validator
 
 from morphosamplers.core import MorphoModel
 
@@ -8,14 +8,16 @@
     """A 3D path defined by an `(n, 3)` array of control points."""
     control_points: np.ndarray
 
-    @validator('control_points', pre=True)
+    @field_validator('control_points', mode="before")
+    @classmethod
     def coerce_to_n_by_3_array(cls, value):
         value = np.atleast_2d(np.asarray(value))
         if value.ndim != 2 or value.shape[-1] != 3:
             raise ValueError('`control_points` must be an (n, 3) array.')
         return value
 
-    @validator('control_points')
+    @field_validator('control_points')
+    @classmethod
     def check_at_least_two_points(cls, value):
         if len(value) < 2:
             raise ValueError('A Path must contain at least two points.')
diff -ru morphosamplers-0.0.10/src/morphosamplers/models/sphere.py morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/models/sphere.py
--- morphosamplers-0.0.10/src/morphosamplers/models/sphere.py	2023-11-27 16:48:18.000000000 +0100
+++ morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/models/sphere.py	2024-02-29 10:43:07.624788137 +0100
@@ -1,6 +1,6 @@
 from typing import Tuple
 
-from pydantic import validator
+from pydantic import field_validator
 
 from morphosamplers.core import MorphoModel
 
@@ -10,7 +10,8 @@
     center: Tuple[float, float, float]
     radius: float
 
-    @validator('center', pre=True)
+    @field_validator('center', mode="before")
+    @classmethod
     def coerce_to_tuple(cls, value):
         return tuple(value)
 
diff -ru morphosamplers-0.0.10/src/morphosamplers/models/surface.py morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/models/surface.py
--- morphosamplers-0.0.10/src/morphosamplers/models/surface.py	2023-11-27 16:48:18.000000000 +0100
+++ morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/models/surface.py	2024-02-29 10:43:07.651788824 +0100
@@ -1,7 +1,7 @@
 from typing import List
 
 import numpy as np
-from pydantic import validator
+from pydantic import field_validator
 
 from morphosamplers.core import MorphoModel
 
@@ -10,7 +10,8 @@
     """A 3D surface defined by control points in a series of levels."""
     control_points: List[np.ndarray]
 
-    @validator('control_points')
+    @field_validator('control_points')
+    @classmethod
     def check_at_least_two_points(cls, value):
         if len(value) < 2:
             raise ValueError('A Path must contain at least two levels.')
@@ -19,7 +20,8 @@
                 raise ValueError('Each level must contain at least two points.')
         return value
 
-    @validator('control_points', pre=True)
+    @field_validator('control_points', mode="before")
+    @classmethod
     def ensure_list_of_float_arrays(cls, value):
         return [np.asarray(v, dtype=np.float32) for v in value]
 
diff -ru morphosamplers-0.0.10/src/morphosamplers/sample_types.py morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/sample_types.py
--- morphosamplers-0.0.10/src/morphosamplers/sample_types.py	2023-11-27 16:48:18.000000000 +0100
+++ morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/sample_types.py	2024-02-29 11:10:34.650741331 +0100
@@ -1,5 +1,5 @@
 import numpy as np
-from pydantic import BaseModel, root_validator, validator
+from pydantic import field_validator, ConfigDict, BaseModel, model_validator
 from typing import Union
 from typing_extensions import TypeAlias
 
@@ -12,26 +12,27 @@
     """Model for a set of 3D poses."""
     positions: np.ndarray  # (n, 3)
     orientations: np.ndarray  # (n, 3, 3)
+    # TODO[pydantic]: The following keys were removed: `allow_mutation`.
+    # Check https://docs.pydantic.dev/dev-v2/migration/#changes-to-config for more information.
+    model_config = ConfigDict(allow_mutation=False, arbitrary_types_allowed=True)
 
-    class Config:
-        allow_mutation = False
-        arbitrary_types_allowed = True
-
-    @validator('positions', pre=True)
+    @field_validator('positions', mode="before")
+    @classmethod
     def coerce_to_n_by_3_array(cls, value):
         value = np.atleast_2d(np.asarray(value))
         if value.ndim != 2 or value.shape[-1] != 3:
             raise ValueError('positions must be an (n, 3) array.')
         return value
 
-    @validator('orientations', pre=True)
+    @field_validator('orientations', mode="before")
+    @classmethod
     def check_n_by_3_3_array(cls, value):
         value = np.asarray(value)
         if value.ndim != 3 or value.shape[-2:] != (3, 3):
             raise ValueError('orientations must be an (n, 3, 3) array.')
         return value
 
-    @root_validator
+    @model_validator(mode="after")  # THEMBL: mode=after: previously root_validator without pre=True set
     def check_same_length(cls, values):
         positions, orientations = values.get('positions'), values.get('orientations')
         if len(positions) != len(orientations):
Only in morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers: .sample_types.py.swp
diff -ru morphosamplers-0.0.10/src/morphosamplers/spline.py morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/spline.py
--- morphosamplers-0.0.10/src/morphosamplers/spline.py	2023-11-27 16:48:18.000000000 +0100
+++ morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/spline.py	2024-02-29 10:43:12.179904052 +0100
@@ -5,18 +5,19 @@
 
 import numpy as np
 from psygnal import EventedModel
-from pydantic import PrivateAttr, conint, root_validator, validator
+from pydantic import field_validator, model_validator, Field, ConfigDict, PrivateAttr
 from scipy.interpolate import splev, splprep
 from scipy.spatial.transform import Rotation, Slerp
 
 from .utils import coaxial_y_vectors_from_z_vectors, within_range, get_mask_limits
+from typing_extensions import Annotated
 
 
 class NDimensionalSpline(EventedModel):
     """Model for multidimensional splines."""
 
     points: np.ndarray
-    order: conint(ge=1, le=5) = 3
+    order: Annotated[int, Field(ge=1, le=5)] = 3
     smoothing: Optional[int] = None
     mask: Optional[np.ndarray] = None
     closed: bool = False
@@ -25,11 +26,7 @@
     _raw_u = PrivateAttr(np.ndarray)
     _u_mask_limits: List[Tuple[float, float]] = PrivateAttr([])
     _length = PrivateAttr(float)
-
-    class Config:
-        """Pydantic BaseModel configuration."""
-
-        arbitrary_types_allowed = True
+    model_config = ConfigDict(arbitrary_types_allowed=True)
 
     def __init__(self, **kwargs):
         """Calculate the splines after validating the paramters."""
@@ -41,7 +38,8 @@
         ndim: int = self.points.shape[1]
         return ndim
 
-    @validator("points", pre=True)
+    @field_validator("points", mode="before")
+    @classmethod
     def is_coordinate_array(cls, v: Union[List[List[float]], np.ndarray]) -> np.ndarray:
         """Validate and coerce the points values to a 2D numpy array."""
         points = np.atleast_2d(v)
@@ -51,7 +49,8 @@
             raise ValueError("must provide at least 2 points")
         return points
 
-    @root_validator(skip_on_failure=True)
+    @model_validator(skip_on_failure=True)
+    @classmethod
     def validate_number_of_points(
         cls, values: Dict[str, Union[np.ndarray, int]]
     ) -> Dict[str, Union[np.ndarray, int]]:
@@ -237,7 +236,8 @@
 
     _rotation_sampler = PrivateAttr(Slerp)
 
-    @validator("points")
+    @field_validator("points")
+    @classmethod
     def _is_3d_coordinate_array(cls, v):
         if v.ndim != 2 or v.shape[-1] != 3:
             raise ValueError("must be an (n, 3) array")
diff -ru morphosamplers-0.0.10/src/morphosamplers/surface_spline.py morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/surface_spline.py
--- morphosamplers-0.0.10/src/morphosamplers/surface_spline.py	2023-11-27 16:48:18.000000000 +0100
+++ morphosamplers-0.0.10_bump_pydantic2/src/morphosamplers/surface_spline.py	2024-02-29 10:43:17.615042361 +0100
@@ -6,7 +6,7 @@
 import einops
 import numpy as np
 from psygnal import EventedModel
-from pydantic import PrivateAttr, conint, root_validator, validator
+from pydantic import field_validator, model_validator, Field, ConfigDict, PrivateAttr
 from scipy.interpolate import splev, splprep, interp1d
 from scipy.spatial.transform import Rotation
 
@@ -17,6 +17,7 @@
     minimize_closed_point_row_pair_distance,
     minimize_point_row_pair_distance,
 )
+from typing_extensions import Annotated
 
 
 class _SplineSurface(EventedModel):
@@ -24,7 +25,7 @@
 
     points: List[np.ndarray]
     separation: float
-    order: conint(ge=1, le=5) = 3
+    order: Annotated[int, Field(ge=1, le=5)] = 3
     smoothing: Optional[int] = None
     closed: bool = False
     inside_point: Optional[Union[np.ndarray, Tuple[float, float, float]]] = None
@@ -32,13 +33,10 @@
     _raw_masks = PrivateAttr(np.ndarray)
     _row_splines = PrivateAttr(List[Spline3D])
     _column_splines = PrivateAttr(List[Spline3D])
+    model_config = ConfigDict(arbitrary_types_allowed=True)
 
-    class Config:
-        """Pydantic BaseModel configuration."""
-
-        arbitrary_types_allowed = True
-
-    @validator("points")
+    @field_validator("points")
+    @classmethod
     def _validate_number_of_splines(v):
         points = np.atleast_2d(*v)
         if len(points) < 2:
@@ -47,7 +45,8 @@
             )
         return points
 
-    @root_validator(skip_on_failure=True)
+    @model_validator(skip_on_failure=True)
+    @classmethod
     def _validate_number_of_lines(cls, values):
         points = values.get("points")
         n_lines = len(points)
