This allows to process any sm_xx passed to GPU_TARGET. Previously some were silently ignored
See https://bitbucket.org/icl/magma/issues/32/list-of-whitelisted-sm_-values-for-cuda-is
and https://bitbucket.org/icl/magma/pull-requests/5

Author: Alexander Grund (TU Dresden)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f83d9862..0c100898 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -111,14 +111,6 @@ if (CUDA_FOUND)
     #message( STATUS "    CUDA_CUBLAS_LIBRARIES: ${CUDA_CUBLAS_LIBRARIES}" )
     include_directories( ${CUDA_INCLUDE_DIRS} )
 
-    # NVCC options for the different cards
-    # sm_xx is binary, compute_xx is PTX for forward compatability
-    # MIN_ARCH is lowest requested version
-    # NV_SM    accumulates sm_xx for all requested versions
-    # NV_COMP  is compute_xx for highest requested version
-    set( NV_SM    "" )
-    set( NV_COMP  "" )
-
     set(CUDA_SEPARABLE_COMPILATION ON)
 
     # nvcc >= 6.5 supports -std=c++11, so propagate CXXFLAGS to NVCCFLAGS.
@@ -155,129 +147,43 @@ if (CUDA_FOUND)
         set( GPU_TARGET "${GPU_TARGET} sm_80" )
     endif()
 
-    if (GPU_TARGET MATCHES sm_20)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 200 )
-        endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_20,code=sm_20 )
-        set( NV_COMP        -gencode arch=compute_20,code=compute_20 )
-        message( STATUS "    compile for CUDA arch 2.0 (Fermi)" )
-    endif()
-
-    if (GPU_TARGET MATCHES sm_30)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 300 )
-        endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_30,code=sm_30 )
-        set( NV_COMP        -gencode arch=compute_30,code=compute_30 )
-        message( STATUS "    compile for CUDA arch 3.0 (Kepler)" )
-    endif()
-
-    if (GPU_TARGET MATCHES sm_35)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 300 )
-        endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_35,code=sm_35 )
-        set( NV_COMP        -gencode arch=compute_35,code=compute_35 )
-        message( STATUS "    compile for CUDA arch 3.5 (Kepler)" )
-    endif()
-
-    if (GPU_TARGET MATCHES sm_50)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 500 )
-        endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_50,code=sm_50 )
-        set( NV_COMP        -gencode arch=compute_50,code=compute_50 )
-        message( STATUS "    compile for CUDA arch 5.0 (Maxwell)" )
-    endif()
-
-    if (GPU_TARGET MATCHES sm_52)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 520 )
-        endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_52,code=sm_52 )
-        set( NV_COMP        -gencode arch=compute_52,code=compute_52 )
-        message( STATUS "    compile for CUDA arch 5.2 (Maxwell)" )
-    endif()
-
-    if (GPU_TARGET MATCHES sm_53)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 530 )
-        endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_53,code=sm_53 )
-        set( NV_COMP        -gencode arch=compute_53,code=compute_53 )
-        message( STATUS "    compile for CUDA arch 5.3 (Maxwell)" )
-    endif()
-
-    if (GPU_TARGET MATCHES sm_60)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 600 )
-        endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_60,code=sm_60 )
-        set( NV_COMP        -gencode arch=compute_60,code=compute_60 )
-        message( STATUS "    compile for CUDA arch 6.0 (Pascal)" )
-    endif()
-
-    if (GPU_TARGET MATCHES sm_61)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 610 )
-        endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_61,code=sm_61 )
-        set( NV_COMP        -gencode arch=compute_61,code=compute_61 )
-        message( STATUS "    compile for CUDA arch 6.1 (Pascal)" )
-    endif()
-
-    if (GPU_TARGET MATCHES sm_62)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 620 )
-        endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_62,code=sm_62 )
-        set( NV_COMP        -gencode arch=compute_62,code=compute_62 )
-        message( STATUS "    compile for CUDA arch 6.2 (Pascal)" )
-    endif()
-
-    if (GPU_TARGET MATCHES sm_70)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 700 )
-        endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_70,code=sm_70 )
-        set( NV_COMP        -gencode arch=compute_70,code=compute_70 )
-        message( STATUS "    compile for CUDA arch 7.0 (Volta)" )
-    endif()
+    # NVCC options for the different cards
+    # sm_xx is binary, compute_xx is PTX for forward compatability
+    # MIN_SM/MAX_SM is lowest/highest requested version
+    # NV_SM    accumulates sm_xx for all requested versions
+    # NV_COMP  is compute_xx for highest requested version
+    set( MIN_SM 99 )
+    set( MAX_SM 0 )
+    set( NV_SM    "" )
+    set( NV_COMP  "" )
 
-    if (GPU_TARGET MATCHES sm_71)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 710 )
+    string( REGEX MATCHALL "sm_[0-9][0-9]" sms "${GPU_TARGET}" )
+    list( SORT sms ) # To make output easier to reason about
+    foreach (sm IN LISTS sms)
+        string( REPLACE "sm_" "" sm "${sm}") # Remove sm_ prefix
+        if (sm LESS MIN_SM)
+            set( MIN_SM "${sm}" )
         endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_71,code=sm_71 )
-        set( NV_COMP        -gencode arch=compute_71,code=compute_71 )
-        message( STATUS "    compile for CUDA arch 7.1 (Volta)" )
-    endif()
-
-    if (GPU_TARGET MATCHES sm_75)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 750 )
+        if (sm GREATER MAX_SM)
+            set( MAX_SM "${sm}" )
         endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_75,code=sm_75 )
-        set( NV_COMP        -gencode arch=compute_75,code=compute_75 )
-        message( STATUS "    compile for CUDA arch 7.5 (Turing)" )
-    endif()
+        list( APPEND NV_SM -gencode arch=compute_${sm},code=sm_${sm} )
+        string( REGEX REPLACE "([0-9])([0-9])" "\\1.\\2" cuda_arch "${sm}" )
+        message( STATUS "    compile for CUDA arch ${cuda_arch}" )
+    endforeach()
 
-    if (GPU_TARGET MATCHES sm_80)
-        if (NOT MIN_ARCH)
-            set( MIN_ARCH 800 )
-        endif()
-        set( NV_SM ${NV_SM} -gencode arch=compute_80,code=sm_80 )
-        set( NV_COMP        -gencode arch=compute_80,code=compute_80 )
-        message( STATUS "    compile for CUDA arch 8.0 (Ampere)" )
+    if (NOT NV_SM)
+        message( FATAL_ERROR
+                 "GPU_TARGET must contain one or more of "
+                 "Fermi, Kepler, Maxwell, Pascal, Volta, Turing, Ampere, or valid sm_[0-9][0-9]"
+                 "Was: ${GPU_TARGET}" )
     endif()
 
-    if (NOT MIN_ARCH)
-        message( FATAL_ERROR "GPU_TARGET must contain one or more of Fermi, Kepler, Maxwell, Pascal, Volta, Turing, Ampere, or valid sm_[0-9][0-9]" )
-    endif()
+    set( MIN_ARCH ${MIN_SM}0 )
+    set( NV_COMP -gencode arch=compute_${MAX_SM},code=compute_${MAX_SM} )
 
-    set( CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -Xcompiler -fPIC -DHAVE_CUBLAS ${NV_SM} ${NV_COMP} ${FORTRAN_CONVENTION} )
-    add_definitions( "-DHAVE_CUBLAS -DMIN_CUDA_ARCH=${MIN_ARCH}" )
+    list( APPEND CUDA_NVCC_FLAGS -Xcompiler -fPIC ${NV_SM} ${NV_COMP} ${FORTRAN_CONVENTION} )
+    add_definitions( -DHAVE_CUBLAS -DMIN_CUDA_ARCH=${MIN_ARCH} )
     message( STATUS "Define -DHAVE_CUBLAS -DMIN_CUDA_ARCH=${MIN_ARCH}" )
 endif()
 