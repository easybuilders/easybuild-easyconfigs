# Author: Ehsan Moravveji (VSC, KU Leuven)
# Purpose: replace the tab with spaces to fix a compilation error
diff -ruN mfix-24.4.1-orig/model/chem/calc_arrhenius_rrates.f mfix-24.4.1/model/chem/calc_arrhenius_rrates.f
--- mfix-24.4.1-orig/model/chem/calc_arrhenius_rrates.f	2025-03-04 13:59:49.856329000 +0100
+++ mfix-24.4.1/model/chem/calc_arrhenius_rrates.f	2025-03-04 19:12:10.534090000 +0100
@@ -95,7 +95,7 @@
          DO M=1, DIMENSION_M
             DO LL = 1, DIMENSION_N_S
                Csi(M, LL) = RO_s(IJK, M)*X_s(IJK,M,LL)/Mw_s(M,LL)  ! kmol/m3
-	    ENDDO
+            ENDDO
          ENDDO
       ENDIF
 
@@ -115,17 +115,17 @@
                NN = Reaction(rr)%Species(lN)%sMap
                IF(M .EQ. 0) THEN
                   has_gas = .TRUE.
-	          IF(X_g(IJK, NN) .LT. chem_min_species_fluid) THEN
+                  IF(X_g(IJK, NN) .LT. chem_min_species_fluid) THEN
                      reactant_sufficient = .FALSE.
                      EXIT
-		  ENDIF
+                  ENDIF
                ELSE
                   has_solid = .TRUE.
                   Tgs = max(min(TMAX, T_s(IJK,M)), TMIN)
-	          IF(X_s(IJK, M, NN) .LT. chem_min_species_solid) THEN
+                  IF(X_s(IJK, M, NN) .LT. chem_min_species_solid) THEN
                      reactant_sufficient = .FALSE.
                      EXIT
-		  ENDIF
+                  ENDIF
                ENDIF
             ENDIF
          ENDDO
@@ -141,18 +141,18 @@
             IF(Reaction(rr)%nSpecies == 0) CYCLE RXN_LP
             ! getting the forward rate constant
             IF(arrhenius_coeff(rr,2)==0.0d0) THEN
-	        k_rate = arrhenius_coeff(rr,1)* exp(-arrhenius_coeff(rr,3)*exp_factor)
+                k_rate = arrhenius_coeff(rr,1)* exp(-arrhenius_coeff(rr,3)*exp_factor)
             ELSEIF(arrhenius_coeff(rr,2)==1.0d0) THEN
-	        k_rate = arrhenius_coeff(rr,1) * T_g(IJK) &
-	                   * exp(-arrhenius_coeff(rr,3)*exp_factor)
+                k_rate = arrhenius_coeff(rr,1) * T_g(IJK) &
+                         * exp(-arrhenius_coeff(rr,3)*exp_factor)
             ELSEIF(arrhenius_coeff(rr,2)==-1.0d0) THEN
-	        k_rate = arrhenius_coeff(rr,1) / T_g(IJK) &
-	                   * exp(-arrhenius_coeff(rr,3)*exp_factor)
-	    ELSE
+                k_rate = arrhenius_coeff(rr,1) / T_g(IJK) &
+                          * exp(-arrhenius_coeff(rr,3)*exp_factor)
+            ELSE
                k_rate = arrhenius_coeff(rr,1) * T_g(IJK)**arrhenius_coeff(rr,2) &
-	                * exp(-arrhenius_coeff(rr,3)*exp_factor)
+                        * exp(-arrhenius_coeff(rr,3)*exp_factor)
             ENDIF
-	        ! check if there are third body in the reaction
+            ! check if there are third body in the reaction
             IF(has_solid .AND. (third_body_model(rr) .NE. UNDEFINED_C)) THEN
                WRITE(ERR_MSG,"(/1X,70('*')/' From: rrates_arrhenius:',/   &
                ' Message: Third body information is given for reaction with solid phase, ',/  &
@@ -179,7 +179,7 @@
                         EXIT
                     ENDIF
                  ENDDO
-	     ENDIF
+             ENDIF
             ! check for pressure-related parameters
             IF(has_solid .AND. (press_rxn_model(rr) .NE. UNDEFINED_C)) THEN
                WRITE(ERR_MSG,"(/1X,70('*')/' From: rrates_arrhenius:',/   &
@@ -228,7 +228,7 @@
                                       * exp(-arrhenius_coeff_press(rr,PP,3)*exp_factor)
                         ELSE
                            k_plog(LL) = k_plog(LL) + arrhenius_coeff_press(rr,PP,1) * T_g(IJK)**arrhenius_coeff_press(rr,PP,2) &
-	                              * exp(-arrhenius_coeff_press(rr,PP,3)*exp_factor)
+                                      * exp(-arrhenius_coeff_press(rr,PP,3)*exp_factor)
                         ENDIF
                      ENDDO
                   ENDDO
@@ -256,13 +256,13 @@
                                 * exp(-arrhenius_coeff_press(rr,1,3)*exp_factor)
                   ELSEIF(arrhenius_coeff_press(rr,1,2)==1.0d0) THEN
                       k_extrapre = arrhenius_coeff_press(rr,1,1) * T_g(IJK) &
-	                          * exp(-arrhenius_coeff_press(rr,1,3)*exp_factor)
+                                  * exp(-arrhenius_coeff_press(rr,1,3)*exp_factor)
                   ELSEIF(arrhenius_coeff_press(rr,1,2)==-1.0d0) THEN
                       k_extrapre = arrhenius_coeff_press(rr,1,1) / T_g(IJK) &
-	                          * exp(-arrhenius_coeff_press(rr,1,3)*exp_factor)
+                                  * exp(-arrhenius_coeff_press(rr,1,3)*exp_factor)
                   ELSE
                       k_extrapre = arrhenius_coeff_press(rr,1,1) * T_g(IJK)**arrhenius_coeff_press(rr,1,2) &
-	                          * exp(-arrhenius_coeff_press(rr,1,3)*exp_factor)
+                                  * exp(-arrhenius_coeff_press(rr,1,3)*exp_factor)
                   ENDIF
 
                   IF(INDEX(press_rxn_model(rr), 'FALLOFF') .NE. 0) THEN
@@ -312,14 +312,14 @@
             ! check for Landau-Teller reactions
             IF(LT_coeff(rr,1) .NE. UNDEFINED) THEN
                IF(ANY( LT_coeff(rr,:)== UNDEFINED)) THEN
-                  WRITE(ERR_MSG,"(/1X,70('*')/' From: rrates_arrhenius:',/   &
-                          ' Message: 2 parameters must be givn for Landau-Teller type of reactions.',/  &
-                           A)") trim(Reaction(rr)%ChemEq)
+                  WRITE(ERR_MSG,"(/1X,70('*')/' From: rrates_arrhenius:',/ &
+                          ' Message: 2 parameters must be givn for Landau-Teller type of reactions.',/ &
+                          ' ', A)") trim(Reaction(rr)%ChemEq)
                   CALL log_error()
                ENDIF
                k_rate = arrhenius_coeff(rr,1) * T_g(IJK)**arrhenius_coeff(rr,2) * &
                         exp(-arrhenius_coeff(rr,3)*exp_factor + &
-			LT_coeff(rr,1)/T_g(IJK)**(1.0d0/3.0d0) + LT_coeff(rr,2)/T_g(IJK)**(2.0d0/3.0d0))
+                        LT_coeff(rr,1)/T_g(IJK)**(1.0d0/3.0d0) + LT_coeff(rr,2)/T_g(IJK)**(2.0d0/3.0d0))
             ENDIF
             ! check for other rate constant fitting options
             IF(rate_fit_model(rr) .NE. UNDEFINED_C) THEN
@@ -331,7 +331,7 @@
                      CALL log_error()
                   ENDIF
                   k_rate = arrhenius_coeff(rr,1) * T_g(IJK)**arrhenius_coeff(rr,2) &
-		           * exp(arrhenius_coeff(rr,3)/T_g(IJK)+ &
+                           * exp(arrhenius_coeff(rr,3)/T_g(IJK)+ &
                                 rate_fit_coeff(rr,1) + &
                                 rate_fit_coeff(rr,2)*LOG(T_g(IJK)) + &
                                 rate_fit_coeff(rr,3)*(LOG(T_g(IJK)))**2.0d0 + &
@@ -356,25 +356,25 @@
                                 rate_fit_coeff(rr,4)/(T_g(IJK)**4.0d0))
                ENDIF
                IF(arrhenius_coeff(rr,2)==0.0d0) THEN
-	               k_rate = k_rate
+                       k_rate = k_rate
                ELSEIF(arrhenius_coeff(rr,2)==1.0d0) THEN
-	               k_rate = k_rate * T_g(IJK)
+                       k_rate = k_rate * T_g(IJK)
                ELSEIF(arrhenius_coeff(rr,2)==-1.0d0) THEN
-	               k_rate = k_rate / T_g(IJK)
-	            ELSE
+                       k_rate = k_rate / T_g(IJK)
+               ELSE
                   k_rate = k_rate * T_g(IJK)**arrhenius_coeff(rr,2)
                ENDIF
             ENDIF
 
             ! getting the rate constant for reverse reactions
-	    ! reverse_calc is UNDEFINED_C means the reaction is forward reaction
-	    ! reverse_calc is fromForwardRateConstant means that
-	    !  1. the reaction is the reverse reaction
-	    !  2. the rate constant needs to be calculated based on the forward rate constant
-	    ! reverse_calc is fromArrheniusCoeff or defined means
-	    !  1. the reaction is the reverse reaction
-	    !  2. arrhenius coefficients are given for the calculation of the rate constant,
-	    !     which has been calculated in the above calculation of k_rate
+            ! reverse_calc is UNDEFINED_C means the reaction is forward reaction
+            ! reverse_calc is fromForwardRateConstant means that
+            !  1. the reaction is the reverse reaction
+            !  2. the rate constant needs to be calculated based on the forward rate constant
+            ! reverse_calc is fromArrheniusCoeff or defined means
+            !  1. the reaction is the reverse reaction
+            !  2. arrhenius coefficients are given for the calculation of the rate constant,
+            !     which has been calculated in the above calculation of k_rate
             IF(INDEX(reverse_calc(rr), "FROMFORWARDRATECONSTANT") .NE. 0) THEN
                IF(has_solid) THEN
                   WRITE(ERR_MSG,"(/1X,70('*')/' From: rrates_arrhenius:',/   &
