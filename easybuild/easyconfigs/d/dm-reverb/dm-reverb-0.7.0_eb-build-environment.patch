Refactor the build environment to use dependencies from EasyBuild
* fix detection of Python installation
* disable toolchain definitions with gcc-7
* use C++11 ABI as it is used in protobuf from EB
* define a single local repo using files from EB for the following dependencies:
  * local com_google_protobuf replaces protobuf_archive, protobuf_protoc and
    external com_google_protobuf
  * local zlib replaces zlib_includes and external zlib
  * local snappy replaces snappy_includes
  * local pybind11 replaces http archive source
  * local com_github_grpc_grpc replaces http archive source
  * local com_google_absl replaces http archive source
author: Alex Domingo (Vrije Universiteit Brussel)
diff --git a/WORKSPACE.orig b/WORKSPACE
index 5d47f95..6d587ab 100644
--- a/WORKSPACE.orig
+++ b/WORKSPACE
@@ -13,8 +13,15 @@ workspace(name = "reverb")
 #
 # *WARNING* If using the REVERB_PROTOC_VERSION environment variable, sha256
 # checking is disabled.  Use at your own risk.
-PROTOC_VERSION = "3.9.0"
-PROTOC_SHA256 = "15e395b648a1a6dda8fd66868824a396e9d3e89bc2c8648e3b9ab9801bea5d55"
+#PROTOC_VERSION = "3.9.0"
+#PROTOC_SHA256 = "15e395b648a1a6dda8fd66868824a396e9d3e89bc2c8648e3b9ab9801bea5d55"
+
+load(
+    "//reverb/cc/platform/default:repo.bzl",
+    "cc_tf_configure",
+)
+
+cc_tf_configure()
 
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
 
@@ -28,72 +35,6 @@ http_archive(
     ],
 )
 
-http_archive(
-    name = "com_google_absl",
-    sha256 = "35f22ef5cb286f09954b7cc4c85b5a3f6221c9d4df6b8c4a1e9d399555b366ee",  # SHARED_ABSL_SHA
-    strip_prefix = "abseil-cpp-997aaf3a28308eba1b9156aa35ab7bca9688e9f6",
-    urls = [
-        "https://storage.googleapis.com/mirror.tensorflow.org/github.com/abseil/abseil-cpp/archive/997aaf3a28308eba1b9156aa35ab7bca9688e9f6.tar.gz",
-        "https://github.com/abseil/abseil-cpp/archive/997aaf3a28308eba1b9156aa35ab7bca9688e9f6.tar.gz",
-    ],
-)
-
 # Note that the Python dependencies are not tracked by bazel here, but
 # in setup.py.
 
-## Begin GRPC related deps
-http_archive(
-    name = "com_github_grpc_grpc",
-    patch_cmds = [
-        """sed -i.bak 's/"python",/"python3",/g' third_party/py/python_configure.bzl""",
-        """sed -i.bak 's/PYTHONHASHSEED=0/PYTHONHASHSEED=0 python3/g' bazel/cython_library.bzl""",
-    ],
-    sha256 = "39bad059a712c6415b168cb3d922cb0e8c16701b475f047426c81b46577d844b",
-    strip_prefix = "grpc-reverb_fix",
-    urls = [
-        # Patched version of GRPC / boringSSL to make it compile with old TF GCC compiler
-        "https://github.com/qstanczyk/grpc/archive/reverb_fix.tar.gz",
-    ],
-)
-
-
-load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")
-
-grpc_deps()
-
-load("@com_github_grpc_grpc//bazel:grpc_extra_deps.bzl", "grpc_extra_deps")
-
-grpc_extra_deps()
-
-
-load("@upb//bazel:workspace_deps.bzl", "upb_deps")
-
-upb_deps()
-
-load(
-    "@build_bazel_rules_apple//apple:repositories.bzl",
-    "apple_rules_dependencies",
-)
-
-apple_rules_dependencies()
-
-load(
-    "@build_bazel_apple_support//lib:repositories.bzl",
-    "apple_support_dependencies",
-)
-
-apple_support_dependencies()
-## End GRPC related deps
-
-load(
-    "//reverb/cc/platform/default:repo.bzl",
-    "cc_tf_configure",
-    "reverb_protoc_deps",
-    "reverb_python_deps",
-)
-
-cc_tf_configure()
-
-reverb_python_deps()
-
-reverb_protoc_deps(version = PROTOC_VERSION, sha256 = PROTOC_SHA256)
diff --git a/reverb/cc/platform/default/BUILD.orig b/reverb/cc/platform/default/BUILD
index 372653e..897c346 100644
--- a/reverb/cc/platform/default/BUILD.orig
+++ b/reverb/cc/platform/default/BUILD
@@ -18,7 +18,7 @@ reverb_cc_library(
     srcs = ["snappy.cc"],
     deps = [
         "//reverb/cc/platform:snappy_hdr",
-        "@com_google_absl//absl/strings",
+        "@com_google_absl//:absl",
     ] + reverb_tf_deps(),
     alwayslink = 1,
 )
@@ -30,7 +30,7 @@ reverb_cc_library(
         "//reverb/cc/checkpointing:interface",
         "//reverb/cc/platform:checkpointing_hdr",
         "//reverb/cc/platform:tfrecord_checkpointer",
-        "@com_google_absl//absl/strings",
+        "@com_google_absl//:absl",
     ],
     alwayslink = 1,
 )
@@ -48,7 +48,7 @@ reverb_cc_library(
         "//reverb/cc/platform:status_macros",
         "//reverb/cc/platform:tfrecord_checkpointer",
         "//reverb/cc/support:periodic_closure",
-        "@com_google_absl//absl/strings",
+        "@com_google_absl//:absl",
     ] + reverb_grpc_deps(),
     alwayslink = 1,
 )
@@ -60,7 +60,7 @@ reverb_cc_library(
         "status_matchers.h",
     ],
     deps = [
-        "@com_google_absl//absl/status",
+        "@com_google_absl//:absl",
     ],
 )
 
@@ -68,7 +68,7 @@ reverb_cc_library(
     name = "status_matchers",
     hdrs = ["status_matchers.h"],
     deps = [
-        "@com_google_absl//absl/status",
+        "@com_google_absl//:absl",
     ],
 )
 
@@ -77,8 +77,7 @@ reverb_cc_library(
     srcs = ["thread.cc"],
     deps = [
         "//reverb/cc/platform:thread_hdr",
-        "@com_google_absl//absl/memory",
-        "@com_google_absl//absl/strings",
+        "@com_google_absl//:absl",
     ],
     alwayslink = 1,
 )
@@ -101,7 +100,7 @@ reverb_cc_library(
     hdrs = ["hash_map.h"],
     deps = [
         ":hash",
-        "@com_google_absl//absl/container:flat_hash_map",
+        "@com_google_absl//:absl",
     ],
 )
 
@@ -110,7 +109,7 @@ reverb_cc_library(
     hdrs = ["hash_set.h"],
     deps = [
         ":hash",
-        "@com_google_absl//absl/container:flat_hash_set",
+        "@com_google_absl//:absl",
     ],
 )
 
diff --git a/reverb/cc/platform/default/repo.bzl.orig b/reverb/cc/platform/default/repo.bzl
index 1daac52..f6d55e3 100644
--- a/reverb/cc/platform/default/repo.bzl.orig
+++ b/reverb/cc/platform/default/repo.bzl
@@ -91,13 +91,13 @@ def _find_python_solib_path(repo_ctx):
     version = exec_result.stdout.splitlines()[-1]
     basename = "lib{}.so".format(version)
     exec_result = repo_ctx.execute(
-        ["{}-config".format(version), "--configdir"],
+        ["{}-config".format(version), "--prefix"],
         quiet = True,
     )
     if exec_result.return_code != 0:
         fail("Could not locate python shared library path:\n{}"
             .format(exec_result.stderr))
-    solib_dir = exec_result.stdout.splitlines()[-1]
+    solib_dir = "{}/{}".format(exec_result.stdout.splitlines()[-1], "lib")
     full_path = repo_ctx.path("{}/{}".format(solib_dir, basename))
     if not full_path.exists:
         fail("Unable to find python shared library file:\n{}/{}"
@@ -125,64 +125,121 @@ cc_library(
     )
 
 def _nsync_includes_repo_impl(repo_ctx):
-    tf_include_path = _find_tf_include_path(repo_ctx)
-    repo_ctx.symlink(tf_include_path + "/external", "nsync_includes")
+    nsync_root = repo_ctx.os.environ.get("EBROOTNSYNC")
+    repo_ctx.symlink(nsync_root, "nsync")
     repo_ctx.file(
         "BUILD",
         content = """
 cc_library(
     name = "includes",
-    hdrs = glob(["nsync_includes/nsync/public/*.h"]),
-    includes = ["nsync_includes"],
+    hdrs = glob(["nsync/**/*.h"]),
+    includes = ["nsync/include"],
     visibility = ["//visibility:public"],
 )
 """,
         executable = False,
     )
 
-def _zlib_includes_repo_impl(repo_ctx):
-    tf_include_path = _find_tf_include_path(repo_ctx)
-    repo_ctx.symlink(
-        tf_include_path + "/external/zlib",
-        "zlib",
-    )
+def _zlib_repo_impl(repo_ctx):
+    zlib_root = repo_ctx.os.environ.get("EBROOTZLIB")
+    repo_ctx.symlink(zlib_root, "zlib")
     repo_ctx.file(
         "BUILD",
         content = """
 cc_library(
+    name = "libz",
+    srcs = ["zlib/lib/libz.so"],
+    visibility = ["//visibility:public"],
+)
+cc_library(
     name = "includes",
     hdrs = glob(["zlib/**/*.h"]),
-    includes = ["zlib"],
+    includes = ["zlib/include"],
     visibility = ["//visibility:public"],
 )
 """,
         executable = False,
     )
 
-def _snappy_includes_repo_impl(repo_ctx):
-    tf_include_path = _find_tf_include_path(repo_ctx)
-    repo_ctx.symlink(
-        tf_include_path + "/external/snappy",
-        "snappy",
-    )
+def _snappy_repo_impl(repo_ctx):
+    snappy_root = repo_ctx.os.environ.get("EBROOTSNAPPY")
+    repo_ctx.symlink(snappy_root, "snappy")
     repo_ctx.file(
         "BUILD",
         content = """
 cc_library(
+    name = "libsnappy",
+    srcs = ["snappy/lib/libsnappy.so"],
+    visibility = ["//visibility:public"],
+)
+cc_library(
     name = "includes",
-    hdrs = glob(["snappy/*.h"]),
-    includes = ["snappy"],
+    hdrs = glob(["snappy/**/*.h"]),
+    includes = ["snappy/include"],
     visibility = ["//visibility:public"],
 )
 """,
         executable = False,
     )
 
-def _protobuf_includes_repo_impl(repo_ctx):
-    tf_include_path = _find_tf_include_path(repo_ctx)
-    repo_ctx.symlink(tf_include_path, "tf_includes")
+def _pybind11_includes_repo_impl(repo_ctx):
+    pybind_root = repo_ctx.os.environ.get("EBROOTPYBIND11")
+    repo_ctx.symlink("{}/include".format(pybind_root), "include")
+    repo_ctx.symlink(Label("//third_party:pybind11.BUILD"), "BUILD")
+
+def _protobuf_repo_impl(repo_ctx):
+    protobuf_root = repo_ctx.os.environ.get("EBROOTPROTOBUF")
+    repo_ctx.symlink(protobuf_root, "protobuf")
     repo_ctx.symlink(Label("//third_party:protobuf.BUILD"), "BUILD")
 
+def _absl_repo_impl(repo_ctx):
+    absl_root = repo_ctx.os.environ.get("EBROOTABSEIL")
+    repo_ctx.symlink(absl_root, "absl")
+    repo_ctx.file(
+        "BUILD",
+        content = """
+cc_library(
+    name = "absl",
+    hdrs = glob(["absl/**/*.h", "absl/**/*.inc"]),
+    srcs = glob(["absl/lib/*.so"]),
+    includes = ["absl/include"],
+    visibility = ["//visibility:public"],
+)
+""",
+        executable = False,
+    )
+
+def _grpc_repo_impl(repo_ctx):
+    grpc_root = repo_ctx.os.environ.get("EBROOTGRPC")
+    repo_ctx.symlink(grpc_root, "grpc")
+    repo_ctx.file(
+        "BUILD",
+        content = """
+cc_library(
+    name = "grpc++",
+    hdrs = glob(["grpc/**/*.h"]),
+    srcs = glob(["grpc/lib/*.so"]),
+    includes = ["grpc/include"],
+    visibility = ["//visibility:public"],
+)
+cc_library(
+    name = "grpc++_codegen_proto",
+    hdrs = glob([
+        "grpc/include/*/impl/codegen/*.h",
+        "grpc/include/*/impl/codegen/security/*.h",
+    ]),
+    includes = ["grpc/include"],
+    visibility = ["//visibility:public"],
+)
+filegroup(
+    name = "grpc_cpp_plugin",
+    srcs = ["grpc/bin/grpc_cpp_plugin"],
+    visibility = ["//visibility:public"],
+)
+""",
+        executable = False,
+    )
+
 def _tensorflow_includes_repo_impl(repo_ctx):
     tf_include_path = _find_tf_include_path(repo_ctx)
     repo_ctx.symlink(tf_include_path, "tensorflow_includes")
@@ -200,11 +257,11 @@ cc_library(
     ),
     includes = ["tensorflow_includes"],
     deps = [
-        "@com_google_absl//absl/container:flat_hash_map",
+        "@com_google_absl//:absl",
         "@eigen_archive//:includes",
-        "@protobuf_archive//:includes",
-        "@zlib_includes//:includes",
-        "@snappy_includes//:includes",
+        "@com_google_protobuf//:includes",
+        "@zlib//:includes",
+        "@snappy//:includes",
     ],
     visibility = ["//visibility:public"],
 )
@@ -226,7 +283,12 @@ def _tensorflow_solib_repo_impl(repo_ctx):
 cc_library(
     name = "framework_lib",
     srcs = ["tensorflow_solib/libtensorflow_framework.so.2"],
-    deps = ["@python_includes", "@python_includes//:numpy_includes"],
+    deps = [
+        "@python_includes",
+        "@python_includes//:numpy_includes",
+        "@zlib//:libz",
+        "@snappy//:libsnappy",
+    ],
     visibility = ["//visibility:public"],
 )
 """,
@@ -275,17 +337,29 @@ def cc_tf_configure():
     )
     make_nsync_repo(name = "nsync_includes")
     make_zlib_repo = repository_rule(
-        implementation = _zlib_includes_repo_impl,
+        implementation = _zlib_repo_impl,
     )
-    make_zlib_repo(name = "zlib_includes")
+    make_zlib_repo(name = "zlib")
     make_snappy_repo = repository_rule(
-        implementation = _snappy_includes_repo_impl,
+        implementation = _snappy_repo_impl,
     )
-    make_snappy_repo(name = "snappy_includes")
+    make_snappy_repo(name = "snappy")
+    make_pybind11_repo = repository_rule(
+        implementation = _pybind11_includes_repo_impl,
+    )
+    make_pybind11_repo(name = "pybind11")
     make_protobuf_repo = repository_rule(
-        implementation = _protobuf_includes_repo_impl,
+        implementation = _protobuf_repo_impl,
+    )
+    make_protobuf_repo(name = "com_google_protobuf")
+    make_absl_repo = repository_rule(
+        implementation = _absl_repo_impl,
     )
-    make_protobuf_repo(name = "protobuf_archive")
+    make_absl_repo(name = "com_google_absl")
+    make_grpc_repo = repository_rule(
+        implementation = _grpc_repo_impl,
+    )
+    make_grpc_repo(name = "com_github_grpc_grpc")
     make_tfinc_repo = repository_rule(
         implementation = _tensorflow_includes_repo_impl,
     )
@@ -298,65 +372,3 @@ def cc_tf_configure():
         implementation = _python_includes_repo_impl,
     )
     make_python_inc_repo(name = "python_includes")
-
-def reverb_python_deps():
-    http_archive(
-        name = "pybind11",
-        urls = [
-            "https://storage.googleapis.com/mirror.tensorflow.org/github.com/pybind/pybind11/archive/v2.4.3.tar.gz",
-            "https://github.com/pybind/pybind11/archive/v2.4.3.tar.gz",
-        ],
-        sha256 = "1eed57bc6863190e35637290f97a20c81cfe4d9090ac0a24f3bbf08f265eb71d",
-        strip_prefix = "pybind11-2.4.3",
-        build_file = clean_dep("//third_party:pybind11.BUILD"),
-    )
-
-    http_archive(
-        name = "absl_py",
-        sha256 = "603febc9b95a8f2979a7bdb77d2f5e4d9b30d4e0d59579f88eba67d4e4cc5462",
-        strip_prefix = "abseil-py-pypi-v0.9.0",
-        urls = [
-            "https://storage.googleapis.com/mirror.tensorflow.org/github.com/abseil/abseil-py/archive/pypi-v0.9.0.tar.gz",
-            "https://github.com/abseil/abseil-py/archive/pypi-v0.9.0.tar.gz",
-        ],
-    )
-
-def _reverb_protoc_archive(ctx):
-    version = ctx.attr.version
-    sha256 = ctx.attr.sha256
-
-    override_version = ctx.os.environ.get("REVERB_PROTOC_VERSION")
-    if override_version:
-        sha256 = ""
-        version = override_version
-
-    urls = [
-        "https://github.com/protocolbuffers/protobuf/releases/download/v%s/protoc-%s-linux-x86_64.zip" % (version, version),
-    ]
-    ctx.download_and_extract(
-        url = urls,
-        sha256 = sha256,
-    )
-
-    ctx.file(
-        "BUILD",
-        content = """
-filegroup(
-    name = "protoc_bin",
-    srcs = ["bin/protoc"],
-    visibility = ["//visibility:public"],
-)
-""",
-        executable = False,
-    )
-
-reverb_protoc_archive = repository_rule(
-    implementation = _reverb_protoc_archive,
-    attrs = {
-        "version": attr.string(mandatory = True),
-        "sha256": attr.string(mandatory = True),
-    },
-)
-
-def reverb_protoc_deps(version, sha256):
-    reverb_protoc_archive(name = "protobuf_protoc", version = version, sha256 = sha256)
diff --git a/reverb/cc/platform/default/build_rules.bzl.orig b/reverb/cc/platform/default/build_rules.bzl
index fa8560f..6bf3694 100644
--- a/reverb/cc/platform/default/build_rules.bzl.orig
+++ b/reverb/cc/platform/default/build_rules.bzl
@@ -90,12 +90,12 @@ def reverb_cc_proto_library(name, srcs = [], deps = [], **kwargs):
         srcs = srcs,
         outs = gen_srcs + gen_hdrs,
         tools = dep_srcs + [
-            "@protobuf_protoc//:protoc_bin",
+            "@com_google_protobuf//:protoc_bin",
             "@tensorflow_includes//:protos",
         ],
         cmd = """
         OUTDIR=$$(echo $(RULEDIR) | sed -E -e 's#reverb(/.*|$$)##')
-        $(location @protobuf_protoc//:protoc_bin) \
+        $(location @com_google_protobuf//:protoc_bin) \
           --proto_path=external/tensorflow_includes/tensorflow_includes/ \
           --proto_path=. \
           --cpp_out=$$OUTDIR {}""".format(
@@ -165,12 +165,12 @@ def reverb_py_proto_library(name, srcs = [], deps = [], **kwargs):
         srcs = srcs,
         outs = gen_srcs,
         tools = proto_deps + [
-            "@protobuf_protoc//:protoc_bin",
+            "@com_google_protobuf//:protoc_bin",
             "@tensorflow_includes//:protos",
         ],
         cmd = """
         OUTDIR=$$(echo $(RULEDIR) | sed -E -e 's#reverb(/.*|$$)##')
-        $(location @protobuf_protoc//:protoc_bin) \
+        $(location @com_google_protobuf//:protoc_bin) \
           --proto_path=external/tensorflow_includes/tensorflow_includes/ \
           --proto_path=. \
           --python_out=$$OUTDIR {}""".format(
@@ -227,14 +227,14 @@ def reverb_cc_grpc_library(
         srcs = srcs,
         outs = gen_srcs + gen_hdrs + gen_mocks,
         tools = proto_src_deps + [
-            "@protobuf_protoc//:protoc_bin",
+            "@com_google_protobuf//:protoc_bin",
             "@tensorflow_includes//:protos",
-            "@com_github_grpc_grpc//src/compiler:grpc_cpp_plugin",
+            "@com_github_grpc_grpc//:grpc_cpp_plugin",
         ],
         cmd = """
         OUTDIR=$$(echo $(RULEDIR) | sed -e 's#reverb/.*##')
-        $(location @protobuf_protoc//:protoc_bin) \
-          --plugin=protoc-gen-grpc=$(location @com_github_grpc_grpc//src/compiler:grpc_cpp_plugin) \
+        $(location @com_google_protobuf//:protoc_bin) \
+          --plugin=protoc-gen-grpc=$(location @com_github_grpc_grpc//:grpc_cpp_plugin) \
           --proto_path=external/tensorflow_includes/tensorflow_includes/ \
           --proto_path=. \
           --grpc_out={} {}""".format(
@@ -544,6 +544,8 @@ def reverb_tf_ops_visibility():
 
 def reverb_tf_deps():
     return [
+        "@zlib//:libz",
+        "@snappy//:libsnappy",
         "@tensorflow_includes//:includes",
         "@tensorflow_solib//:framework_lib",
     ]
@@ -552,24 +554,4 @@ def reverb_grpc_deps():
     return ["@com_github_grpc_grpc//:grpc++"]
 
 def reverb_absl_deps():
-    return [
-        # We purposefully don't include absl::flat_hash_{map,set} so that users
-        # are forced to use platform:hash_{map,set}, which uses a safer hasher.
-        "@com_google_absl//absl/base",
-        "@com_google_absl//absl/base:core_headers",
-        "@com_google_absl//absl/functional:bind_front",
-        "@com_google_absl//absl/memory",
-        "@com_google_absl//absl/numeric:int128",
-        "@com_google_absl//absl/random",
-        "@com_google_absl//absl/random:distributions",
-        "@com_google_absl//absl/status",
-        "@com_google_absl//absl/status:statusor",
-        "@com_google_absl//absl/strings",
-        "@com_google_absl//absl/strings:cord",
-        "@com_google_absl//absl/strings:str_format",
-        "@com_google_absl//absl/synchronization",
-        "@com_google_absl//absl/time",
-        "@com_google_absl//absl/types:optional",
-        "@com_google_absl//absl/types:span",
-        "@com_google_absl//absl/flags:flag",
-    ]
+    return ["@com_google_absl//:absl"]
diff --git a/third_party/protobuf.BUILD.orig b/third_party/protobuf.BUILD
index b8e9496..7d601a5 100644
--- a/third_party/protobuf.BUILD.orig
+++ b/third_party/protobuf.BUILD
@@ -1,10 +1,10 @@
 _CHECK_VERSION = """
-PROTOC_VERSION=$$($(location @protobuf_protoc//:protoc_bin) --version \
+PROTOC_VERSION=$$($(location protobuf/bin/protoc) --version \
   | cut -d' ' -f2 | sed -e 's/\\./ /g')
 PROTOC_VERSION=$$(printf '%d%03d%03d' $${PROTOC_VERSION})
 TF_PROTO_VERSION=$$(grep '#define PROTOBUF_MIN_PROTOC_VERSION' \
-  $(location tf_includes/google/protobuf/port_def.inc) | cut -d' ' -f3)
-if [ "$${PROTOC_VERSION}" -ne "$${TF_PROTO_VERSION}" ]; then
+  $(location protobuf/include/google/protobuf/port_def.inc) | cut -d' ' -f3)
+if [ "$${PROTOC_VERSION}" -lt "$${TF_PROTO_VERSION}" ]; then
   echo !!!!!!!!!!!!!!!!!!!!!!!!!!!!! 1>&2
   echo Your protoc version does not match the tensorflow proto header \
        required version: "$${PROTOC_VERSION}" vs. "$${TF_PROTO_VERSION}" 1>&2
@@ -20,9 +20,9 @@ genrule(
     name = "compare_protobuf_version",
     outs = ["versions_compared"],
     srcs = [
-        "tf_includes/google/protobuf/port_def.inc",
+        "protobuf/include/google/protobuf/port_def.inc",
     ],
-    tools = ["@protobuf_protoc//:protoc_bin"],
+    tools = ["protobuf/bin/protoc"],
     cmd = _CHECK_VERSION,
 )
 
@@ -30,11 +30,45 @@ cc_library(
     name = "includes",
     data = [":versions_compared"],
     hdrs = glob([
-        "tf_includes/google/protobuf/*.h",
-        "tf_includes/google/protobuf/*.inc",
-        "tf_includes/google/protobuf/**/*.h",
-        "tf_includes/google/protobuf/**/*.inc",
+        "protobuf/include/google/protobuf/*.h",
+        "protobuf/include/google/protobuf/*.inc",
+        "protobuf/include/google/protobuf/**/*.h",
+        "protobuf/include/google/protobuf/**/*.inc",
     ]),
-    includes = ["tf_includes"],
+    includes = ["protobuf/include"],
+    visibility = ["//visibility:public"],
+)
+cc_library(
+    name = "protobuf_headers",
+    data = [":versions_compared"],
+    hdrs = glob([
+        "protobuf/include/google/protobuf/*.h",
+        "protobuf/include/google/protobuf/*.inc",
+        "protobuf/include/google/protobuf/**/*.h",
+        "protobuf/include/google/protobuf/**/*.inc",
+    ]),
+    includes = ["protobuf/include"],
+    visibility = ["//visibility:public"],
+)
+cc_library(
+    name = "protobuf_lite",
+    srcs = ["protobuf/lib/libprotobuf-lite.so"],
+    visibility = ["//visibility:public"],
+)
+cc_library(
+    name = "protobuf",
+    srcs = ["protobuf/lib/libprotobuf.so"],
+    visibility = ["//visibility:public"],
+    deps = [":protobuf_lite"],
+)
+cc_library(
+    name = "protoc_lib",
+    srcs = ["protobuf/lib/libprotoc.so"],
+    visibility = ["//visibility:public"],
+    deps = [":protobuf"],
+)
+filegroup(
+    name = "protoc_bin",
+    srcs = ["protobuf/bin/protoc"],
     visibility = ["//visibility:public"],
 )
diff --git a/reverb/cc/opensource/opensource_only.files.orig b/reverb/cc/opensource/opensource_only.files
index 375df63..d74bec1 100644
--- a/reverb/cc/opensource/opensource_only.files.orig
+++ b/reverb/cc/opensource/opensource_only.files
@@ -1,8 +1,5 @@
 reverb/third_party/BUILD.oss
 reverb/third_party/protobuf.BUILD.oss
 reverb/third_party/pybind11.BUILD.oss
-reverb/third_party/toolchains/preconfig/ubuntu16.04/gcc7_manylinux2010/BUILD.oss
-reverb/third_party/toolchains/preconfig/ubuntu16.04/gcc7_manylinux2010/cc_toolchain_config.bzl.oss
-reverb/third_party/toolchains/preconfig/ubuntu16.04/gcc7_manylinux2010/dummy_toolchain.bzl.oss
 reverb/platform/default/BUILD.oss
 reverb/pip_package/BUILD.oss
diff --git a/third_party/opensource_only.files.orig b/third_party/opensource_only.files
index e1f9e12..f3e999c 100644
--- a/third_party/opensource_only.files.orig
+++ b/third_party/opensource_only.files
@@ -6,6 +6,3 @@ reverb/pip_package/setup.py:
 third_party/BUILD:
 third_party/protobuf.BUILD:
 third_party/pybind11.BUILD:
-third_party/toolchains/preconfig/ubuntu16.04/gcc7_manylinux2010/BUILD:
-third_party/toolchains/preconfig/ubuntu16.04/gcc7_manylinux2010/cc_toolchain_config.bzl:
-third_party/toolchains/preconfig/ubuntu16.04/gcc7_manylinux2010/dummy_toolchain.bzl:
diff --git a/.bazelrc.orig b/.bazelrc
index f4b08d3..89f82dd 100644
--- a/.bazelrc.orig
+++ b/.bazelrc
@@ -13,7 +13,7 @@ build:manylinux2010 --crosstool_top=//third_party/toolchains/preconfig/ubuntu16.
 
 build -c opt
 build --cxxopt="-std=c++14"
-build --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0"
+build --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=1"
 build --auto_output_filter=subpackages
 build --copt="-Wall" --copt="-Wno-sign-compare"
 build --linkopt="-lrt -lm"
