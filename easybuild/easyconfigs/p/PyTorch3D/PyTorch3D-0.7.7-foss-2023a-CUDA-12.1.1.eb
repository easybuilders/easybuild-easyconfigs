easyblock = 'PythonBundle'

name = 'PyTorch3D'
version = '0.7.7'
versionsuffix = '-CUDA-%(cudaver)s'

homepage = "https://pytorch3d.org/"
description = """PyTorch3D is FAIR's library of reusable components for deep learning with 3D data."""

toolchain = {'name': 'foss', 'version': '2023a'}

builddependencies = [
    # Building
    ('hatchling', '1.18.0'),
    # Testing (some of these are optional but actual dependencies)
    ('Python-bundle-PyPI', '2023.06'),  # pytest
    ('scikit-image', '0.22.0'),
    ('imageio', '2.33.1'),
    ('OpenCV', '4.8.1', versionsuffix + '-contrib'),
    ('plotly.py', '5.16.0'),
    ('SQLAlchemy', '2.0.25'),
    ('PyOpenGL', '3.1.7'),
    ('PyCUDA', '2024.1', versionsuffix),
    #('accelerate', '0.33.0', versionsuffix),
    #('Hydra', '1.3.2'),
    ('visdom', '0.2.4'),
]

dependencies = [
    ('Python', '3.11.3'),
    ('CUDA', '12.1.1', '', SYSTEM),
    ('tqdm', '4.66.1'),
    ('PyTorch-bundle', '2.1.2', versionsuffix),  # for portalocker, torchvision
    ('imageio', '2.33.1'),
    ('IPython', '8.14.0'),
]

sanity_pip_check = True
use_pip = True

exts_list = [
    ('termcolor', '2.3.0', {
    }),
    ('yacs', '0.1.8', {
        'checksums': ['efc4c732942b3103bea904ee89af98bcd27d01f0ac12d8d4d369f1e7a2914384'],
    }),
    ('iopath', '0.1.10', {
    }),
    #('iopath', '0.1.8', {
    #    'source_tmpl': '%(namelower)s-%(version)s-py3-none-any.whl',
    #    'unpack_sources': False,
    #    'checksums': ['e11029c30ee77616b3efd82888aa80941d12afcc5940c2ef57e04a8e93a10f9f'],
    #}),
    ('fvcore', '0.1.5.post20221221', {
    }),
    ('antlr4-python3-runtime', '4.9.3', {
        'modulename': 'antlr4',
        'checksums': ['f224469b4168294902bb1efa80a8bf7855f24c99aef99cbefc1bcd3cce77881b'],
    }),
    ('omegaconf', '2.3.0', {
        'checksums': ['d5d4b6d29955cc50ad50c46dc269bcd92c6e00f5f90d23ab5fee7bfca4ba4cc7'],
    }),
    ('lpips', '0.1.4'),
    (name, version, {
        'source_tmpl': 'v%(version)s.tar.gz',
        'source_urls': ['https://github.com/facebookresearch/%(namelower)s/archive'],
        'testinstall': True,
        # Move srcdir to not have it end-up in pythonpath
        'runtest': (
            'mv %(namelower)s %(namelower)s.src'
            ' && pytest tests -k "not ('
            ' (test_rasterize_rectangle_images.py and test_render_cow_opengl)'  # slow/hangs
            ' or (test_rasterizer.py and test_compare_rasterizers)'  # slow/hangs
            ' or (test_meshes.py and test_clone)'  # slow/hangs
            ' or (test_render_multigpu.py and test_mesh_renderer_opengl_to)'  # slow/hangs
            ' or (test_io_off.py and (test_bad or test_load_lumpy))'  # error parsing file, same issue in conda
            ' or (test_knn.py and test_knn_vs_python_square_cuda)'  # almost match, same issue in conda
            ' or (test_opengl_utils.py and test_no_egl_error)'  # import OpenGL.EGL work even after importing OpenGL.GL
            ' or (test_points_alignment.py and test_heterogeneous_inputs)'  # diff in R values, same issue in conda
            ' or (tests/implicitron/test_config.py and test_simpleclass_member)'  # mutable default use default_factory
            ' or (tests/implicitron/test_data_cow.py and test_simple)'  # docs not included in install
            ' or (tests/implicitron/test_extending_orm_types.py and test_extending_frame_data)'  # wrong number of args
            ' or (tests/pulsar/test_forward.py and TestForward)'  # can't write image with one color channel
            ')"'
            ' && mv %(namelower)s.src %(namelower)s'
        ),
    }),
]

moduleclass = 'tools'
