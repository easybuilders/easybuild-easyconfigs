Update CUDA <-> compiler version compatibility matrix
See https://github.com/pytorch/pytorch/pull/86360

Author: Alexander Grund (TU Dresden)

diff --git a/torch/utils/cpp_extension.py b/torch/utils/cpp_extension.py
index aed4fd5004..fca125ce26 100644
--- a/torch/utils/cpp_extension.py
+++ b/torch/utils/cpp_extension.py
@@ -48,20 +48,30 @@ MINIMUM_MSVC_VERSION = (19, 0, 24215)
 # The following values were taken from the following GitHub gist that
 # summarizes the minimum valid major versions of g++/clang++ for each supported
 # CUDA version: https://gist.github.com/ax3l/9489132
+# Or from include/crt/host_config.h in the CUDA SDK
+# The second value is the exclusive(!) upper bound, i.e. min <= version < max
 CUDA_GCC_VERSIONS = {
-    '10.2': (MINIMUM_GCC_VERSION, (8, 0, 0)),
-    '11.1': (MINIMUM_GCC_VERSION, (10, 0, 0)),
-    '11.2': (MINIMUM_GCC_VERSION, (10, 0, 0)),
-    '11.3': (MINIMUM_GCC_VERSION, (10, 0, 0)),
-    '11.4': ((6, 0, 0), (10, 0, 0))
+    '10.2': (MINIMUM_GCC_VERSION, (9, 0)),
+    '11.0': (MINIMUM_GCC_VERSION, (10, 0)),
+    '11.1': (MINIMUM_GCC_VERSION, (11, 0)),
+    '11.2': (MINIMUM_GCC_VERSION, (11, 0)),
+    '11.3': (MINIMUM_GCC_VERSION, (11, 0)),
+    '11.4': ((6, 0, 0), (12, 0)),
+    '11.5': ((6, 0, 0), (12, 0)),
+    '11.6': ((6, 0, 0), (12, 0)),
+    '11.7': ((6, 0, 0), (12, 0)),
 }
 
+MINIMUM_CLANG_VERSION = (3, 3, 0),
 CUDA_CLANG_VERSIONS = {
-    '10.2': ((3, 3, 0), (8, 0, 0)),
-    '11.1': ((6, 0, 0), (10, 0, 0)),
-    '11.2': ((6, 0, 0), (10, 0, 0)),
-    '11.3': ((6, 0, 0), (10, 0, 0)),
-    '11.4': ((6, 0, 0), (10, 0, 0))
+    '10.2': (MINIMUM_CLANG_VERSION, (9, 0)),
+    '11.1': (MINIMUM_CLANG_VERSION, (11, 0)),
+    '11.2': (MINIMUM_CLANG_VERSION, (12, 0)),
+    '11.3': (MINIMUM_CLANG_VERSION, (12, 0)),
+    '11.4': (MINIMUM_CLANG_VERSION, (13, 0)),
+    '11.5': (MINIMUM_CLANG_VERSION, (13, 0)),
+    '11.6': (MINIMUM_CLANG_VERSION, (14, 0)),
+    '11.7': (MINIMUM_CLANG_VERSION, (14, 0)),
 }
 
 
@@ -819,12 +829,11 @@ class BuildExtension(build_ext, object):
                     if cuda_str_version not in cuda_compiler_bounds:
                         warnings.warn(f'There are no {compiler_name} version bounds defined for CUDA version {cuda_str_version}')
                     else:
-                        min_compiler_version, max_compiler_version = cuda_compiler_bounds[cuda_str_version]
+                        min_compiler_version, max_excl_compiler_version = cuda_compiler_bounds[cuda_str_version]
                         min_compiler_version_str = '.'.join(map(str, min_compiler_version))
-                        max_compiler_version_str = '.'.join(map(str, max_compiler_version))
+                        max_excl_compiler_version_str = '.'.join(map(str, max_excl_compiler_version))
 
-                        version_bound_str = f'>={min_compiler_version_str}'
-                        version_bound_str = f'{version_bound_str}, <={max_compiler_version_str}'
+                        version_bound_str = f'>={min_compiler_version_str}, <{max_excl_compiler_version_str}'
 
                         if compiler_version < TorchVersion(min_compiler_version_str):
                             raise RuntimeError(
@@ -832,10 +841,10 @@ class BuildExtension(build_ext, object):
                                 f'than the minimum required version by CUDA {cuda_str_version} ({min_compiler_version_str}). '
                                 f'Please make sure to use an adequate version of {compiler_name} ({version_bound_str}).'
                             )
-                        elif compiler_version > TorchVersion(max_compiler_version_str):
+                        elif compiler_version >= TorchVersion(max_excl_compiler_version_str):
                             raise RuntimeError(
                                 f'The current installed version of {compiler_name} ({compiler_version}) is greater '
-                                f'than the maximum required version by CUDA {cuda_str_version} ({max_compiler_version_str}). '
+                                f'than the maximum required version by CUDA {cuda_str_version}. '
                                 f'Please make sure to use an adequate version of {compiler_name} ({version_bound_str}).'
                             )
         else:
