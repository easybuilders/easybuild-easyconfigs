When SMT is disabled CPUInfo still counts the disabled cores/threads as valid and assigns caches
to them even though the APIC ID on which this is based is wrong/invalid.
This leads to wrong results when determining e.g. blocksizes in NNPACK
which in one case leads to an abort after a floating point error (division by zero).

See https://github.com/Maratyszcza/NNPACK/issues/218

Author: Alexander Grund (TU Dresden)

diff -ur a/third_party/cpuinfo/src/x86/linux/init.c b/third_party/cpuinfo/src/x86/linux/init.c
--- a/third_party/cpuinfo/src/x86/linux/init.c	2025-05-06 14:20:59.816361914 +0200
+++ b/third_party/cpuinfo/src/x86/linux/init.c	2025-05-06 14:26:20.368063395 +0200
@@ -48,7 +48,6 @@
 	uint32_t linux_processors_count,
 	const struct cpuinfo_x86_linux_processor linux_processors[restrict static linux_processors_count],
 	const struct cpuinfo_x86_processor processor[restrict static 1],
-	uint32_t valid_processor_mask,
 	uint32_t llc_apic_bits,
 	uint32_t cores_count_ptr[restrict static 1],
 	uint32_t clusters_count_ptr[restrict static 1],
@@ -72,7 +71,7 @@
 	uint32_t last_l1i_id = UINT32_MAX, last_l1d_id = UINT32_MAX;
 	uint32_t last_l2_id = UINT32_MAX, last_l3_id = UINT32_MAX, last_l4_id = UINT32_MAX;
 	for (uint32_t i = 0; i < linux_processors_count; i++) {
-		if (bitmask_all(linux_processors[i].flags, valid_processor_mask)) {
+		if (bitmask_all(linux_processors[i].flags, CPUINFO_LINUX_FLAG_VALID)) {
 			const uint32_t apic_id = linux_processors[i].apic_id;
 			cpuinfo_log_debug("APID ID %"PRIu32": system processor %"PRIu32, apic_id, linux_processors[i].linux_id);
 
@@ -165,13 +164,13 @@
 		cpuinfo_linux_get_max_present_processor(max_processors_count);
 	cpuinfo_log_debug("maximum present processors count: %"PRIu32, max_present_processors_count);
 
-	uint32_t valid_processor_mask = 0;
+	uint32_t valid_processor_mask = CPUINFO_LINUX_FLAG_APIC_ID;
 	uint32_t x86_linux_processors_count = max_processors_count;
 	if (max_present_processors_count != 0) {
 		x86_linux_processors_count = min(x86_linux_processors_count, max_present_processors_count);
-		valid_processor_mask = CPUINFO_LINUX_FLAG_PRESENT;
+		valid_processor_mask |= CPUINFO_LINUX_FLAG_PRESENT;
 	} else {
-		valid_processor_mask = CPUINFO_LINUX_FLAG_PROC_CPUINFO;
+		valid_processor_mask |= CPUINFO_LINUX_FLAG_PROC_CPUINFO;
 	}
 	if (max_possible_processors_count != 0) {
 		x86_linux_processors_count = min(x86_linux_processors_count, max_possible_processors_count);
@@ -249,7 +248,7 @@
 	uint32_t packages_count = 0, clusters_count = 0, cores_count = 0;
 	uint32_t l1i_count = 0, l1d_count = 0, l2_count = 0, l3_count = 0, l4_count = 0;
 	cpuinfo_x86_count_objects(
-		x86_linux_processors_count, x86_linux_processors, &x86_processor, valid_processor_mask, llc_apic_bits,
+		x86_linux_processors_count, x86_linux_processors, &x86_processor, llc_apic_bits,
 		&cores_count, &clusters_count, &packages_count, &l1i_count, &l1d_count, &l2_count, &l3_count, &l4_count);
 
 	cpuinfo_log_debug("detected %"PRIu32" cores", cores_count);
