# PyTorch's CMAKE configuration by default sets RUNPATH on libraries if they link other libraries
# that are outside the build tree, which is done because of the CMAKE config on 
# https://github.com/pytorch/pytorch/blob/v1.10.0/cmake/Dependencies.cmake#L10.
# This provides problems, since the cuda stubs library path then also gets added to the RUNPATH.
# As a result, at runtime, the stub version of things like libcuda.so.1 gets picked up, instead of the real drivers
# See https://github.com/easybuilders/easybuild-easyconfigs/issues/14359
# This line https://github.com/pytorch/pytorch/blob/v1.10.0/cmake/Dependencies.cmake#L16
# Makes sure that any path that is linked, is also added to the RUNPATH.
# This has been reported upstream in https://github.com/pytorch/pytorch/issues/35418
# and a fix was attempted in https://github.com/pytorch/pytorch/pull/37737 but it was reverted
#
# This EasyBuild patch changes behavior for the libraries that were failing, i.e. the ones in this list:
# https://github.com/easybuilders/easybuild-easyconfigs/issues/14359#issuecomment-970479904
# This is done by setting INSTALL_RPATH_USE_LINK_PATH to false, and instead, specifying the RPATH
# explicitely by defining INSTALL_RPATH, but only adding directories that do not match to the "stubs" regex
#
# Original patch: Caspar van Leeuwen
# Updated: Alexander Grund (TU Dresden)
#
# See https://github.com/pytorch/pytorch/pull/122318

diff --git a/binaries/CMakeLists.txt b/binaries/CMakeLists.txt
index 15f47bf52ae..edf1ab26149 100644
--- a/binaries/CMakeLists.txt
+++ b/binaries/CMakeLists.txt
@@ -56,7 +56,8 @@ endif()
 
 if(USE_CUDA)
   caffe2_binary_target("inspect_gpu.cc")
-  target_link_libraries(inspect_gpu ${CUDA_LIBRARIES})
+  include(${Torch_SOURCE_DIR}/cmake/LinkCudaLibraries.cmake)
+  link_cuda_libraries(inspect_gpu ${CUDA_LIBRARIES})
   caffe2_binary_target("print_core_object_sizes_gpu.cc")
 
   if(BUILD_TEST)
diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index 5a68e225155..bb87d973d1a 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -651,14 +651,13 @@ endif()
 if(USE_CUDA)
   list(APPEND Caffe2_GPU_CU_SRCS ${Caffe2_GPU_HIP_JIT_FUSERS_SRCS})
   add_library(caffe2_nvrtc SHARED ${ATen_NVRTC_STUB_SRCS})
+  include(${Torch_SOURCE_DIR}/cmake/LinkCudaLibraries.cmake)
+  link_cuda_libraries(caffe2_nvrtc ${CUDA_CUDA_LIB} ${CUDA_NVRTC_LIB})
   if(MSVC)
     # Delay load nvcuda.dll so we can import torch compiled with cuda on a CPU-only machine
-    set(DELAY_LOAD_FLAGS "-DELAYLOAD:nvcuda.dll;delayimp.lib")
-  else()
-    set(DELAY_LOAD_FLAGS "")
+    target_link_libraries(caffe2_nvrtc "-DELAYLOAD:nvcuda.dll;delayimp.lib")
   endif()
 
-  target_link_libraries(caffe2_nvrtc ${CUDA_CUDA_LIB} ${CUDA_NVRTC_LIB} ${DELAY_LOAD_FLAGS})
   install(TARGETS caffe2_nvrtc DESTINATION "${TORCH_INSTALL_LIB_DIR}")
   if(USE_NCCL)
     list(APPEND Caffe2_GPU_SRCS
@@ -1607,6 +1606,7 @@ endif()
 
 # ---[ CUDA library.
 if(USE_CUDA)
+  include(${Torch_SOURCE_DIR}/cmake/LinkCudaLibraries.cmake)
   # FIXME: If kineto is linked with CUPTI it pollutes torch_cpu with CUDA dependencies
   # Even worse, it never declares that it depends on cudart, but calls the API, see
   # https://github.com/pytorch/kineto/blob/aef2f5c0f15e3be52406ac0b885e8689de6bc9f6/libkineto/src/CudaDeviceProperties.cpp#L24
@@ -1620,13 +1620,13 @@ if(USE_CUDA)
       torch_cuda INTERFACE $<INSTALL_INTERFACE:include>)
   target_include_directories(
       torch_cuda PRIVATE ${Caffe2_GPU_INCLUDE})
-  target_link_libraries(
+  link_cuda_libraries(
       torch_cuda PRIVATE ${Caffe2_CUDA_DEPENDENCY_LIBS})
 
   # These public dependencies must go after the previous dependencies, as the
   # order of the libraries in the linker call matters here when statically
   # linking; libculibos and cublas must be last.
-  target_link_libraries(torch_cuda PUBLIC torch_cpu_library ${Caffe2_PUBLIC_CUDA_DEPENDENCY_LIBS})
+  link_cuda_libraries(torch_cuda PUBLIC torch_cpu_library ${Caffe2_PUBLIC_CUDA_DEPENDENCY_LIBS})
 endif()
 
 # ---[ XPU library.
diff --git a/cmake/LinkCudaLibraries.cmake b/cmake/LinkCudaLibraries.cmake
new file mode 100644
index 00000000000..e09d1186f6d
--- /dev/null
+++ b/cmake/LinkCudaLibraries.cmake
@@ -0,0 +1,33 @@
+# Link CUDA libraries to the given target, i.e.: `target_link_libraries(target <args>)`
+#
+# Additionally makes sure CUDA stub libs don't end up being in RPath
+#
+# Example: link_cuda_libraries(mytarget PRIVATE ${CUDA_LIBRARIES})
+function(link_cuda_libraries target)
+  set(libs ${ARGN})
+  set(install_rpath "$ORIGIN")
+  set(filtered FALSE)
+  foreach(lib IN LISTS libs)
+    # CUDA stub libs are in form /prefix/lib/stubs/libcuda.so
+    # So extract the name of the parent folder, to check against "stubs"
+    # And the parent path which we need to add to the INSTALL_RPATH for non-stubs
+    get_filename_component(parent_path "${lib}" DIRECTORY)
+    get_filename_component(parent_name "${parent_path}" NAME)
+    if(parent_name STREQUAL "stubs")
+      message(STATUS "Filtering ${lib} from being set in ${target}'s RPATH, "
+                     "because it appears to point to the CUDA stubs directory.")
+      set(filtered TRUE)
+    elseif(parent_path)
+      list(APPEND install_rpath ${parent_path})
+    endif()
+  endforeach()
+
+  # Regular link command
+  target_link_libraries(${target} ${libs})
+  # Manually set INSTALL_RPATH when there were any stub libs
+  if(filtered)
+    list(REMOVE_DUPLICATES install_rpath)
+    set_target_properties(${target} PROPERTIES INSTALL_RPATH_USE_LINK_PATH FALSE)
+    set_target_properties(${target} PROPERTIES INSTALL_RPATH "${install_rpath}")
+  endif()
+endfunction()
diff --git a/test/test_torch.py b/test/test_torch.py
index 9a1b6199032..f15dbc7b9a4 100644
--- a/test/test_torch.py
+++ b/test/test_torch.py
@@ -10730,6 +10730,25 @@ def add_neg_dim_tests():
         assert not hasattr(TestTorch, test_name), "Duplicated test name: " + test_name
         setattr(TestTorch, test_name, make_neg_dim_test(name, tensor_arg, arg_constr, types, extra_dim))
 
+class TestRPATH(TestCase):
+    @unittest.skipIf(not sys.platform.startswith('linux'), "linux-only test")
+    def test_rpath(self):
+        """
+        Make sure RPATH (or RUNPATH) in nvrtc does not contain a cuda stubs directory
+        issue gh-35418
+        """
+        libdir = os.path.join(os.path.dirname(torch._C.__file__), 'lib')
+        caffe2_nvrtc = os.path.join(libdir, 'libcaffe2_nvrtc.so')
+        if os.path.exists(caffe2_nvrtc):
+            output = subprocess.check_output(['objdump', '-x', caffe2_nvrtc])
+            for line in output.split(b'\n'):
+                if b'RPATH' in line or b'RUNPATH' in line:
+                    # Catch paths like:
+                    # $ORIGIN:/usr/local/cuda-10.2/lib64/stubs:/usr/local/cuda-10.2/lib64
+                    self.assertFalse(b'/stubs:' in line)
+                    # $ORIGIN:/usr/local/cuda-10.2/lib64:/usr/local/cuda-10.2/lib64/stubs
+                    self.assertFalse(line.endswith(b'/stubs'))
+
 # TODO: these empy classes are temporarily instantiated for XLA compatibility
 #   once XLA updates their test suite it should be removed
 class TestViewOps(TestCase):
