Fixes some compatibility issues with Python 3.10

Most notably conversion from float to long which avoids:
    TypeError: 'float' object cannot be interpreted as an integer
Also some test failures in test_fx & test_jit due to differences in Python 3.10.

From https://github.com/pytorch/pytorch/pull/82329
Backported: Alexander Grund (TU Dresden)

diff --git a/test/jit/test_hash.py b/test/jit/test_hash.py
index cb1c1544b10..2ca1e9cda0a 100644
--- a/test/jit/test_hash.py
+++ b/test/jit/test_hash.py
@@ -75,7 +75,10 @@ class TestHash(JitTestCase):
         self.checkScript(fn, (1.2345, float("inf")))
         self.checkScript(fn, (float("inf"), float("inf")))
         self.checkScript(fn, (1.2345, float('nan')))
-        self.checkScript(fn, (float("nan"), float("nan")))
+        if sys.version_info < (3, 10):
+            # Hash of two nans are not guaranteed to be equal. From https://docs.python.org/3/whatsnew/3.10.html :
+            # Hashes of NaN values of both float type and decimal.Decimal type now depend on object identity.
+            self.checkScript(fn, (float("nan"), float("nan")))
         self.checkScript(fn, (float("nan"), float("inf")))
 
     def test_hash_int(self):
diff --git a/test/test_fx.py b/test/test_fx.py
index 625614d29a8..307b629cab3 100644
--- a/test/test_fx.py
+++ b/test/test_fx.py
@@ -3280,6 +3280,7 @@ class TestFX(JitTestCase):
             .run(scripted.code)
 
     @unittest.skipIf(IS_WINDOWS, "Python Windows bug? https://bugs.python.org/issue45108")
+    @unittest.skipIf(sys.version_info >= (3, 10), "Does not work on Python-3.10")
     def test_assert(self):
         def f(x):
             assert x > 1
@@ -4017,7 +4018,7 @@ class TestFunctionalTracing(JitTestCase):
 
         def functional_test(self):
             if func_name in self.UNTRACEABLE_FUNCTIONALS_PY38 and \
-                    sys.version_info >= (3, 8) and sys.version_info < (3, 10):
+                    sys.version_info >= (3, 8) and sys.version_info < (3, 11):
                 exc, err = self.UNTRACEABLE_FUNCTIONALS_PY38[func_name]
                 with self.assertRaisesRegex(exc, err):
                     symbolic_trace(fn)
diff --git a/test/test_jit.py b/test/test_jit.py
index 7dbae135a9a..ea436482a55 100644
--- a/test/test_jit.py
+++ b/test/test_jit.py
@@ -7450,6 +7450,9 @@ a")
                     # tensor from empty list is type float in python and annotated type in torchscript
                     if "annotate" in li and "dtype" not in option:
                         continue
+                    # Skip unsigned tensor initializaton for signed values on 3.10
+                    if sys.version_info[:2] >= (3, 10) and "torch.uint8" in option and "-" in li:
+                        continue
                     code = tensor_template.format(list_create=li, tensor_op=op, options=option)
                     scope = {}
                     exec(code, globals(), scope)
diff --git a/torch/csrc/utils/python_scalars.h b/torch/csrc/utils/python_scalars.h
index 7f454bdff82..7df0662fa2c 100644
--- a/torch/csrc/utils/python_scalars.h
+++ b/torch/csrc/utils/python_scalars.h
@@ -1,6 +1,7 @@
 #pragma once
 
 #include <ATen/ATen.h>
+#include <c10/util/TypeCast.h>
 #include <torch/csrc/python_headers.h>
 
 #include <torch/csrc/utils/python_numbers.h>
@@ -8,13 +9,37 @@
 
 namespace torch { namespace utils {
 
+template <typename T>
+inline T unpackIntegral(PyObject* obj, const char* type) {
+#if PY_VERSION_HEX >= 0x030a00f0
+  // In Python-3.10 floats can no longer be silently converted to integers
+  // Keep backward compatible behavior for now
+  if (PyFloat_Check(obj)) {
+    return c10::checked_convert<T>(THPUtils_unpackDouble(obj), type);
+  }
+  return c10::checked_convert<T>(THPUtils_unpackLong(obj), type);
+#else
+  return static_cast<T>(THPUtils_unpackLong(obj));
+#endif
+}
+
 inline void store_scalar(void* data, at::ScalarType scalarType, PyObject* obj) {
   switch (scalarType) {
-    case at::kByte: *(uint8_t*)data = (uint8_t)THPUtils_unpackLong(obj); break;
-    case at::kChar: *(int8_t*)data = (int8_t)THPUtils_unpackLong(obj); break;
-    case at::kShort: *(int16_t*)data = (int16_t)THPUtils_unpackLong(obj); break;
-    case at::kInt: *(int32_t*)data = (int32_t)THPUtils_unpackLong(obj); break;
-    case at::kLong: *(int64_t*)data = THPUtils_unpackLong(obj); break;
+    case at::kByte:
+      *(uint8_t*)data = unpackIntegral<uint8_t>(obj, "uint8");
+      break;
+    case at::kChar:
+      *(int8_t*)data = unpackIntegral<int8_t>(obj, "int8");
+      break;
+    case at::kShort:
+      *(int16_t*)data = unpackIntegral<int16_t>(obj, "int16");
+      break;
+    case at::kInt:
+      *(int32_t*)data = unpackIntegral<int32_t>(obj, "int32");
+      break;
+    case at::kLong:
+      *(int64_t*)data = unpackIntegral<int64_t>(obj, "int64");
+      break;
     case at::kHalf:
       *(at::Half*)data = at::convert<at::Half, double>(THPUtils_unpackDouble(obj));
       break;
