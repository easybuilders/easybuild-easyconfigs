A reinterpret_cast to an unrelated type is undefined behavior.
This causes real issues due to misoptimizations on at least GCC 10.2 on POWER
See https://github.com/pytorch/pytorch/issues/58031

Author: Alexander Grund (TU Dresden)

Adapted for PT-1.10, where this is now in vec_base.h and templated

diff --git a/aten/src/ATen/cpu/vec/vec_base.h b/aten/src/ATen/cpu/vec/vec_base.h
index 697996ab8e..1663ae239a 100644
--- a/aten/src/ATen/cpu/vec/vec_base.h
+++ b/aten/src/ATen/cpu/vec/vec_base.h
@@ -701,12 +701,14 @@ inline Vectorized<T> operator^(const Vectorized<T>& a, const Vectorized<T>& b) {
 
 template<class T, typename Op>
 static inline Vectorized<T> bitwise_binary_op(const Vectorized<T> &a, const Vectorized<T> &b, Op op) {
-  static constexpr uint32_t element_no = VECTOR_WIDTH / sizeof(intmax_t);
+  constexpr uint32_t element_no = VECTOR_WIDTH / sizeof(intmax_t);
+  __at_align__ intmax_t buffer_a[element_no];
+  __at_align__ intmax_t buffer_b[element_no];
   __at_align__ intmax_t buffer[element_no];
-  const intmax_t *a_ptr = reinterpret_cast<const intmax_t*>((const T*) a);
-  const intmax_t *b_ptr = reinterpret_cast<const intmax_t*>((const T*) b);
+  a.store(buffer_a);
+  b.store(buffer_b);
   for (uint32_t i = 0U; i < element_no; ++ i) {
-    buffer[i] = op(a_ptr[i], b_ptr[i]);
+    buffer[i] = op(buffer_a[i], buffer_b[i]);
   }
   return Vectorized<T>::loadu(buffer);
 }
