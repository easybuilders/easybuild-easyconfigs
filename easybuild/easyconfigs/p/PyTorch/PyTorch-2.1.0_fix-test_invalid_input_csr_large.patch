A test raises a RuntimeError with the wrong text.
The test suite expects "32-bit integer overflow in nnz" but gets
"value cannot be converted to type int32 without overflow".  Test
changed to look for a regexp that matches both.

Author: Jakob Schiotz, Tech. Univ. Denmark
Email: schiotz@fysik.dtu.dk
Date: 8. November 2023

Stacktrace:
==================================================================== FAILURES =====================================================================
____________________________________________ TestSparseCompressedCPU.test_invalid_input_csr_large_cpu _____________________________________________
RuntimeError: value cannot be converted to type int32 without overflow

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/modules/software/Python/3.11.3-GCCcore-12.3.0/lib/python3.11/unittest/case.py", line 57, in testPartExecutor
    yield
  File "/home/modules/software/Python/3.11.3-GCCcore-12.3.0/lib/python3.11/unittest/case.py", line 623, in run
    self._callTestMethod(testMethod)
  File "/home/modules/software/Python/3.11.3-GCCcore-12.3.0/lib/python3.11/unittest/case.py", line 579, in _callTestMethod
    if method() is not None:
       ^^^^^^^^
  File "/tmp/eb-19tah_22/tmplupwseoe/lib/python3.11/site-packages/torch/testing/_internal/common_utils.py", line 2388, in wrapper
    method(*args, **kwargs)
  File "/tmp/eb-19tah_22/tmplupwseoe/lib/python3.11/site-packages/torch/testing/_internal/common_device_type.py", line 415, in instantiated_test
    result = test(self, **param_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/tmp/eb-19tah_22/tmplupwseoe/lib/python3.11/site-packages/torch/testing/_internal/common_device_type.py", line 945, in dep_fn
    return fn(slf, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/tmp/eb-19tah_22/tmplupwseoe/lib/python3.11/site-packages/torch/testing/_internal/common_device_type.py", line 1084, in only_fn
    return fn(slf, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/tmp/eb-19tah_22/tmplupwseoe/lib/python3.11/site-packages/torch/testing/_internal/common_device_type.py", line 1045, in dep_fn
    return fn(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/schiotz/eb_build/PyTorch/2.1.0/foss-2023a/pytorch-v2.1.0/test/test_sparse_csr.py", line 868, in test_invalid_input_csr_large
    with self.assertRaisesRegex(RuntimeError, '32-bit integer overflow in nnz'):
  File "/home/modules/software/Python/3.11.3-GCCcore-12.3.0/lib/python3.11/unittest/case.py", line 275, in __exit__
    self._raiseFailure('"{}" does not match "{}"'.format(
  File "/home/modules/software/Python/3.11.3-GCCcore-12.3.0/lib/python3.11/unittest/case.py", line 199, in _raiseFailure
    raise self.test_case.failureException(msg)
AssertionError: "32-bit integer overflow in nnz" does not match "value cannot be converted to type int32 without overflow"

To execute this test, run the following from the base repo dir:
     python test/test_sparse_csr.py -k test_invalid_input_csr_large_cpu

This message can be suppressed by setting PYTORCH_PRINT_REPRO_ON_FAILURE=0
============================================================= short test summary info =============================================================
FAILED [82.1119s] test_sparse_csr.py::TestSparseCompressedCPU::test_invalid_input_csr_large_cpu - AssertionError: "32-bit integer overflow in nn...
======================================== 1 failed, 3997 passed, 671 skipped, 2 rerun in 491.16s (0:08:11) =========================================

diff --git a/test/test_sparse_csr.py b/test/test_sparse_csr.py
index 5d34495..3a47602 100644
--- a/test/test_sparse_csr.py
+++ b/test/test_sparse_csr.py
@@ -865,7 +865,7 @@ class TestSparseCompressed(TestCase):
                                 torch.tensor([1]), (1, cols))
 
         nnz = 2 ** 31
-        with self.assertRaisesRegex(RuntimeError, '32-bit integer overflow in nnz'):
+        with self.assertRaisesRegex(RuntimeError, '.+32.+overflow.*'):
             torch.sparse_csr_tensor(torch.tensor([0, nnz // 2, nnz], dtype=torch.int32),
                                     torch.arange(nnz // 2, dtype=torch.int32).repeat(2),
                                     torch.ones(nnz, dtype=torch.int8), (2, nnz // 2))
