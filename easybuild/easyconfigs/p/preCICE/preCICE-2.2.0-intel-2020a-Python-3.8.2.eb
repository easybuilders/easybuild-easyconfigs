easyblock = 'CMakeMake'

name = 'preCICE'
version = '2.2.0'
versionsuffix = '-Python-%(pyver)s'

homepage = 'https://www.precice.org/'
description = """preCICE (Precise Code Interaction Coupling Environment)
is a coupling library for partitioned multi-physics simulations,
including, but not restricted to fluid-structure interaction and
conjugate heat transfer simulations. Partitioned means that preCICE
couples existing programs (solvers) capable of simulating a subpart of
the complete physics involved in a simulation. This allows for the high
flexibility that is needed to keep a decent time-to-solution for complex
multi-physics scenarios."""

toolchain = {'name': 'intel', 'version': '2020a'}
toolchainopts = {'usempi': True}

source_urls = ['https://github.com/precice/precice/archive']
sources = ['v%(version)s.tar.gz']
checksums = ['f8c4e0810dcaeb6a40a0fcab64b95c899f0121c968e0730416d4d2a97d39d0c4']

builddependencies = [
    ('CMake', '3.16.4'),
    ('pkg-config', '0.29.2'),
]

dependencies = [
    ('Python', '3.8.2'),
    ('Boost', '1.72.0'),
    ('Eigen', '3.3.7'),
    ('libxml2', '2.9.10'),
    ('PETSc', '3.12.4', versionsuffix),
    ('SciPy-bundle', '2020.03', '-Python-3.8.2'),
]

separate_build_dir = True
build_shared_libs = True

# Tell pkg-config to keep flags available in CPATH and others because it prevents CMake from finding PETSc correctly
preconfigopts = 'PKG_CONFIG_ALLOW_SYSTEM_LIBS=1 PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1 '
# Make sure MPI support is enabled
configopts = '-DPRECICE_MPICommunication=ON '
# Make sure PETSc support is enabled
configopts += '-DPRECICE_PETScMapping=ON '
# Make sure PythonActions support is enabled
configopts += "-DPYTHON_INCLUDE_DIR=$EBROOTPYTHON/include/python%(pyshortver)s "
configopts += "-DPYTHON_LIBRARY=$EBROOTPYTHON/lib/libpython%%(pyshortver)s.%s " % SHLIB_EXT
configopts += '-DPRECICE_PythonActions=ON '
# force Eigen include directory which is not found correctly otherwise
configopts += '-DEIGEN3_INCLUDE_DIR="$EBROOTEIGEN/include"'

# Run basic tests 
# -> disabled because they fail with intel toolchain 
#    cf https://github.com/precice/precice/issues/966
# runtest = ' test_base'

sanity_check_paths = {
    'files': ['bin/binprecice'] +
             ['include/precice/%s' % x for x in ['SolverInterfaceC.h', 'SolverInterfaceFASTEST.hpp',
                                                 'SolverInterfaceFortran.hpp', 'SolverInterface.hpp']] +
             ['lib/libprecice.%s' % SHLIB_EXT],
    'dirs': [],
}

moduleclass = 'numlib'
