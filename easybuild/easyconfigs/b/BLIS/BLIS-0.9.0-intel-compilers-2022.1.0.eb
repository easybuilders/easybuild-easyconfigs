easyblock = 'ConfigureMake'

name = 'BLIS'
version = '0.9.0'

homepage = 'https://github.com/flame/blis/'
description = """BLIS is a portable software framework for instantiating high-performance
BLAS-like dense linear algebra libraries."""

toolchain = {'name': 'intel-compilers', 'version': '2022.1.0'}
toolchainopts = {'oneapi': True}

source_urls = ['https://github.com/flame/blis/archive/']
sources = ['%(version)s.tar.gz']
checksums = ['1135f664be7355427b91025075562805cdc6cc730d3173f83533b2c5dcc2f308']

builddependencies = [
    ('Python', '3.10.4', '-bare'),
    ('Perl', '5.34.1'),
]

configopts = '--enable-cblas --enable-threading=openmp --enable-shared --complex-return=intel CC="$CC" auto'

# Intel expects classic f2c-style calling convention.
pretestopts = 'for cu in c u; do for cz in c z; do '
pretestopts += 'sed -i "s/\([^ ]*complex\) ${cz}dot${cu}_(/void ${cz}dot${cu}_(\\1 \*, /g;'
pretestopts += 's/\([qz]__1\) = ${cz}dot${cu}_(/${cz}dot${cu}_(\&\\1, /g" blastest/src/${cz}blat1.c; done; done && '

runtest = 'check'

sanity_check_paths = {
    'files': ['include/blis/cblas.h', 'include/blis/blis.h',
              'lib/libblis.a', 'lib/libblis.%s' % SHLIB_EXT],
    'dirs': [],
}

modextrapaths = {'CPATH': 'include/blis'}

moduleclass = 'numlib'
