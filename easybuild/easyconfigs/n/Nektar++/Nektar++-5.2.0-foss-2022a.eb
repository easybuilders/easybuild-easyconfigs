# Changed to FlexiBLAS and Ninja
# J. Sassmannshausen (Imperial College London/UK)

easyblock = 'CMakeMake'

name = 'Nektar++'
version = '5.2.0'

homepage = 'https://www.nektar.info'
description = """Nektar++ is a tensor product based finite element package
designed to allow one to construct efficient classical low polynomial order
h-type solvers (where h is the size of the finite element) as well as higher
p-order piecewise polynomial order solvers."""

toolchain = {'name': 'foss', 'version': '2022a'}
toolchainopts = {'usempi': True, 'openmp': True, 'pic': True}

source_urls = ['https://www.nektar.info/src']
sources = ['%(namelower)s-%(version)s.tar.gz']
patches = ['Nektar++-5.2.0-cmake-flexiblas.patch']
checksums = [
    ('f463e28a3dcaa314659727bb1958c31864c6ed7213a54cfb5f13b88efcfabe5c'),  # nektar++-5.2.0.tar.gz
    ('59086bd2645d97cd3a7441050d6987533b3abfb9b0be677225b844b7e02c00c9'),  # Nektar++-5.2.0-cmake-flexiblas.patch
]

builddependencies = [
    ('CMake', '3.24.3'),
    ('Ninja', '1.10.2'),
    ('TinyXML', '2.6.2'),
]

dependencies = [
    ('zlib', '1.2.12'),
    ('Boost', '1.79.0'),
    ('HDF5', '1.12.2'),
    ('METIS', '5.1.0'),
    ('PETSc', '3.17.4'),
    ('VTK', '9.2.2'),
]

# We are using FlexiBLAS instead of OpenBLAS
preconfigopts = 'export FLEXI_HOME=$EBROOTFLEXIBLAS && '
configopts = '-DNEKTAR_USE_FLEXIBLAS=True -DNEKTAR_USE_SYSTEM_BLAS_LAPACK=OFF '
# We are using HDF5-1.12.x and thus we need to do it like that: 
configopts += '-DCMAKE_C_FLAGS="-DH5_USE_110_API" -DCMAKE_CXX_FLAGS="-DH5_USE_110_API" '
# Default options, required for a basic build:
configopts += '-DNEKTAR_USE_HDF5=ON -DNEKTAR_USE_FFTW=ON -DNEKTAR_USE_MPI=ON '
configopts += '-DTHIRDPARTY_BUILD_GSMPI=ON -DNEKTAR_USE_CCM=ON '
# Optional, we can use PETSc:
# configopts += '-DNEKTAR_USE_PETSC=ON -DTHIRDPARTY_BUILD_PETSC=OFF '

# When tested, 2 out of the 703 jobs failed with segfault.
# We need to use 1 core as some tests have threading enabled it seems!
# (Working on that with maintainer) 
test_cmd = 'ctest -j 1 --output-on-failure'
runtest = ''

sanity_check_paths = {
    'files': ['bin/%s' % x
              for x in ['AcousticSolver', 'AddModeTo2DFld', 'ADRSolver', 'Aliasing', 'APESolver', 'CardiacEPSolver',
                        'CFLStep', 'CollectionsUnitTests', 'CollectionTiming', 'CompressibleBL',
                        'CompressibleFlowSolver', 'Deriv3DHomo1D', 'Deriv3DHomo1D_SingleMode', 'Deriv3DHomo2D',
                        'DiffusionSolver', 'DiffusionSolverTimeInt', 'DummySolver', 'ErrorStream',
                        'ExtractMeanModeFromHomo1DFld', 'ExtractSurface2DCFS', 'ExtractSurface3DCFS', 'FieldConvert',
                        'Fld2DTo2D5', 'Fld2Tecplot', 'FldAddFalknerSkanBL', 'FoundationDemo', 'HDGHelmholtz1D',
                        'HDGHelmholtz2D', 'HDGHelmholtz3D', 'HDGHelmholtz3DHomo1D', 'Helmholtz1D', 'Helmholtz2D',
                        'Helmholtz3D', 'Helmholtz3DHomo1D', 'Helmholtz3DHomo2D', 'IncNavierStokesSolver',
                        'LibUtilitiesUnitTests', 'LinearAlgebraUnitTests', 'LinearElasticSolver',
                        'LocalRegionsUnitTests', 'LocProject', 'MMFDiffusion', 'MMFSolver', 'NekMesh', 'NodalDemo',
                        'NonLinearEnergy', 'PartitionAnalyse', 'PostProcHDG2D', 'PostProcHDG3D', 'PrePacing',
                        'PulseWaveSolver', 'ShallowWaterSolver', 'StdEquiToCoeff2D', 'StdProject',
                        'SteadyAdvectionDiffusionReaction2D', 'Tester', 'TimeIntegrationDemo', 'UnitTests']] +
             ['lib/lib%s.%s' % (x, SHLIB_EXT)
              for x in ['Collections', 'FieldUtils', 'GlobalMapping', 'LibUtilities', 'LocalRegions',
                        'MultiRegions', 'SolverUtils', 'SpatialDomains', 'StdRegions', 'NekMesh', 'MatrixFreeOps']],
    'dirs': ['include/nektar++', 'lib/nektar++/cmake'],
}

moduleclass = 'cae'
