fix build on top of LLVM 14,
like this: https://github.com/numba/llvmlite/issues/897
diff -ruN llvmlite-0.39.1.orig/ffi/passmanagers.cpp llvmlite-0.39.1/ffi/passmanagers.cpp
--- llvmlite-0.39.1.orig/ffi/passmanagers.cpp	2022-09-01 13:47:22.477959200 +0000
+++ llvmlite-0.39.1/ffi/passmanagers.cpp	2023-01-10 16:59:33.776510869 +0000
@@ -8,6 +8,7 @@
 #include "llvm/IR/DiagnosticInfo.h"
 #include "llvm/IR/DiagnosticPrinter.h"
 #include "llvm/IR/LegacyPassManager.h"
+#include "llvm/Pass.h"
 #include "llvm/IR/Module.h"
 #include "llvm/Support/FileSystem.h"
 #include "llvm/Support/ToolOutputFile.h"
@@ -17,9 +18,6 @@
 #include "llvm-c/Transforms/IPO.h"
 #include "llvm-c/Transforms/Scalar.h"
 #include "llvm/IR/LegacyPassManager.h"
-#if LLVM_VERSION_MAJOR > 11
-#include "llvm/IR/RemarkStreamer.h"
-#endif
 #include "llvm/IR/LLVMRemarkStreamer.h"
 #include "llvm/Remarks/RemarkStreamer.h"
 #include "llvm/Transforms/IPO.h"
diff -ruN llvmlite-0.39.1.orig/ffi/targets.cpp llvmlite-0.39.1/ffi/targets.cpp
--- llvmlite-0.39.1.orig/ffi/targets.cpp	2022-09-01 13:47:22.449959300 +0000
+++ llvmlite-0.39.1/ffi/targets.cpp	2023-01-10 16:59:54.544810234 +0000
@@ -6,7 +6,7 @@
 #include "llvm/IR/LegacyPassManager.h"
 #include "llvm/IR/Type.h"
 #include "llvm/Support/Host.h"
-#include "llvm/Support/TargetRegistry.h"
+#include "llvm/MC/TargetRegistry.h"
 #include "llvm/Target/TargetMachine.h"
 
 #include <cstdio>
@@ -204,7 +204,6 @@
         rm = Reloc::DynamicNoPIC;
 
     TargetOptions opt;
-    opt.PrintMachineCode = PrintMC;
     opt.MCOptions.ABIName = ABIName;
 
     bool jit = JIT;
diff -ruN llvmlite-0.39.1.orig/ffi/value.cpp llvmlite-0.39.1/ffi/value.cpp
--- llvmlite-0.39.1.orig/ffi/value.cpp	2022-09-01 13:47:22.449959300 +0000
+++ llvmlite-0.39.1/ffi/value.cpp	2023-01-10 16:59:09.616162588 +0000
@@ -154,7 +154,7 @@
     Argument *arg = unwrap<Argument>(A);
     unsigned argno = arg->getArgNo();
     AttributeSet attrs =
-        arg->getParent()->getAttributes().getParamAttributes(argno);
+        arg->getParent()->getAttributes().getParamAttrs(argno);
     return wrap(new AttributeSetIterator(attrs.begin(), attrs.end()));
 }
 
diff -ruN llvmlite-0.39.1.orig/llvmlite/tests/test_binding.py llvmlite-0.39.1/llvmlite/tests/test_binding.py
--- llvmlite-0.39.1.orig/llvmlite/tests/test_binding.py	2022-09-01 13:47:22.481959000 +0000
+++ llvmlite-0.39.1/llvmlite/tests/test_binding.py	2023-01-10 17:00:04.868959051 +0000
@@ -18,6 +18,16 @@
 from llvmlite.tests import TestCase
 
 
+def clean_string_whitespace(x: str) -> str:
+    # Remove trailing whitespace from the end of each line
+    x = re.sub(r"\s+$", "", x, flags=re.MULTILINE)
+    # Remove intermediate blank lines
+    x = re.sub(r"\n\s*\n", r"\n", x, flags=re.MULTILINE)
+    # Remove extraneous whitespace from the beginning and end of the string
+    x = x.strip()
+    return x
+
+
 # arvm7l needs extra ABI symbols to link successfully
 if platform.machine() == 'armv7l':
     llvm.load_library_permanently('libgcc_s.so.1')
@@ -555,7 +565,10 @@
         bd = ir.IRBuilder(fn.append_basic_block(name="<>!*''#"))
         bd.ret(ir.Constant(ir.IntType(32), 12345))
         asm = str(mod)
-        self.assertEqual(asm, asm_nonalphanum_blocklabel)
+        self.assertEqual(
+            clean_string_whitespace(asm),
+            clean_string_whitespace(asm_nonalphanum_blocklabel)
+        )
 
     def test_global_context(self):
         gcontext1 = llvm.context.get_global_context()
@@ -640,7 +653,7 @@
     def test_version(self):
         major, minor, patch = llvm.llvm_version_info
         # one of these can be valid
-        valid = [(11,)]
+        valid = [(11,), (12,), (13,), (14,)]
         self.assertIn((major,), valid)
         self.assertIn(patch, range(10))
