name = 'NWChem'
version = '6.6'
revision = 'revision27844'
verdate = '2015-10-20'

homepage = 'http://www.nwchem-sw.org'
description = """NWChem aims to provide its users with computational chemistry tools that are scalable both in
their ability to treat large scientific computational chemistry problems efficiently, and in their use of available
parallel computing resources from high-performance parallel supercomputers to conventional workstation clusters.
NWChem software can handle: biomolecules, nanostructures, and solid-state; from quantum to classical, and all
combinations; Gaussian basis functions or plane-waves; scaling from one to thousands of processors; properties
and relativity."""
toolchain = {'name': 'intel', 'version': '2015a'}

toolchainopts = {'i8': True}

source_urls = ['http://www.nwchem-sw.org/download.php?f=']
sources = ['Nwchem-%s.revision27746-src.%s.tar.bz2' % (version, verdate)]

patches = [
	'NWChem_fix-date.patch',
	'NWChem-%s.revision27755-Tddft_mxvec20.patch' % version,
	'NWChem-%s.revision27829-Tools_lib64.patch' % version,
	'NWChem-%s.revision27844-Config_libs66.patch' % version,
]

#Could add some NWChem patches:
#cd $NWCHEM_TOP/src
#wget http://www.nwchem-sw.org/images/Bcast_ccsd.patch.gz
#gzip -d Bcast_ccsd.patch.gz
#patch -p0 < Bcast_ccsd.patch

armci_network = "OPENIB"

# 90GB / 8 (ie: doubles).  Better if user overrides it though.
#lib_defines = "-DDFLT_TOT_MEM=11796480"
# Alternatively, use "getmem.nwchem", which will look up system
# properties and calculate an appropriate value for DFLT_TOT_MEM.
# This may require osmem_per_core to be set (if it is not set, the
# default value, currently 30 MB per core, will be used).
osmem_per_core = 512

python = 'Python'
pyver = '2.7.9'
versionsuffix = '-%s-%s' % (python, pyver)
dependencies = [(python, pyver)]

modules = 'all python'

# more test failures than normal?
max_fail_ratio = 0.65

moduleclass = 'chem'
