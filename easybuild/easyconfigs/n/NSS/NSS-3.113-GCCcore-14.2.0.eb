easyblock = 'MakeCp'

name = 'NSS'
version = '3.113'

homepage = 'https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS'
description = """Network Security Services (NSS) is a set of libraries designed to support cross-platform development
 of security-enabled client and server applications."""

toolchain = {'name': 'GCCcore', 'version': '14.2.0'}

source_urls = ['https://ftp.mozilla.org/pub/security/nss/releases/NSS_%s_RTM/src/' % version.replace('.', '_')]
sources = [SOURCELOWER_TAR_GZ]
patches = [
    '%(name)s-3.39_pkgconfig.patch',
    '%(name)s-3.55_fix-ftbfs-glibc-invalid-oob-error.patch',
]
checksums = [
    {'nss-3.113.tar.gz': 'acef06b512d3bd81c87a63b3c8653d258bb689d2191fc0e64decf5a1efa01c0f'},
    {'NSS-3.39_pkgconfig.patch': '5c4b55842e5afd1e8e67b90635f6474510b89242963c4ac2622d3e3da9062774'},
    {'NSS-3.55_fix-ftbfs-glibc-invalid-oob-error.patch':
     '15768297c5dd6918132af281531afcfe3e358f45a00bc2655d20a6cbe4310a9b'},
]

builddependencies = [
    ('binutils', '2.42'),
    ('Perl', '5.40.0'),
]
dependencies = [
    ('NSPR', '4.36'),
    ('zlib', '1.3.1'),
]

# disable use of -Werror to work around compilation errors with newer glibc versions,
# see also https://sourceware.org/bugzilla/show_bug.cgi?id=27476
buildopts = 'NSS_ENABLE_WERROR=0 BUILD_OPT=1 USE_64=1 '
buildopts += 'CPATH="$EBROOTNSPR/include/nspr:$CPATH" OS_REL_CFLAGS="-D_XOPEN_SOURCE "'
buildopts += ' && cd config && make PREFIX=%(installdir)s BUILD_OPT=1 USE_64=1 && cd -'

# building in parallel fails
maxparallel = 1

# optional testsuite (takes a long time)
# buildopts += " && cd %(builddir)s/%(namelower)s-%(version)s/%(namelower)s/tests && "
# buildopts += " BUILD_OPT=1 USE_64=1 ./all.sh "

files_to_copy = [
    '../dist/Linux*.OBJ/*',
    (['../dist/public/*'], 'include'),
]
# symlinks in bin/ would point to outside of installation directory, so can't keep them
keepsymlinks = False

sanity_check_paths = {
    'files': ['bin/%(namelower)s-config', 'bin/multinit', 'lib/libnss.a'],
    'dirs': ['include/dbm', 'include/%(namelower)s'],
}

sanity_check_commands = [
    "multinit --help",
    "%(namelower)s-config --version",
]

modextrapaths = {MODULE_LOAD_ENV_HEADERS: 'include/%(namelower)s'}

moduleclass = 'lib'
