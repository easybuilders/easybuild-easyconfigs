This patch updates the py-compile file used by OTF2 during the install process
to fix the removal of the imp module in Python 3.12 which was long deprecated.
With this, OTF2 can be installed with Python 3.12, which would previously fail
with a module not found error.

--- build-config/py-compile	2023-02-12 17:32:31.274132086 +0100
+++ ../../otf2/build-config/py-compile	2024-08-22 17:44:59.939242651 +0200
@@ -1,7 +1,7 @@
 #!/bin/sh
 # py-compile - Compile a Python program
 
-scriptversion=2011-06-08.12; # UTC
+scriptversion=2023-03-30.00; # UTC
 
 # Copyright (C) 2000-2013 Free Software Foundation, Inc.
 
@@ -27,7 +27,7 @@
 # bugs to <bug-automake@gnu.org> or send patches to
 # <automake-patches@gnu.org>.
 
-if [ -z "$PYTHON" ]; then
+if test -z "$PYTHON"; then
   PYTHON=python
 fi
 
@@ -79,13 +79,20 @@
       ;;
     -h|--help)
       cat <<\EOF
-Usage: py-compile [--help] [--version] [--basedir DIR] [--destdir DIR] [--silent] FILES..."
+Usage: py-compile [options] FILES...
 
 Byte compile some python scripts FILES.  Use --destdir to specify any
 leading directory path to the FILES that you don't want to include in the
 byte compiled file.  Specify --basedir for any additional path information you
 do want to be shown in the byte compiled file.
 
+Options:
+  --basedir DIR   Prefix all FILES with DIR, and include in error messages.
+  --destdir DIR   Prefix all FILES with DIR before compiling.
+  -v, --version   Display version information.
+  -h, --help      This help screen.
+  --silent        Operate silently.
+
 Example:
   py-compile --destdir /tmp/pkg-root --basedir /usr/share/test test.py test2.py
 
@@ -114,87 +121,165 @@
   shift
 done
 
-files=$*
-if test -z "$files"; then
-    usage_error "no files given"
+if test $# -eq 0; then
+  usage_error "no files given"
 fi
 
 # if basedir was given, then it should be prepended to filenames before
 # byte compilation.
-if [ -z "$basedir" ]; then
-    pathtrans="path = file"
+if test -z "$basedir"; then
+  pathtrans="path = file"
 else
-    pathtrans="path = os.path.join('$basedir', file)"
+  pathtrans="path = os.path.join('$basedir', file)"
 fi
 
 # if destdir was given, then it needs to be prepended to the filename to
 # byte compile but not go into the compiled file.
-if [ -z "$destdir" ]; then
-    filetrans="filepath = path"
+if test -z "$destdir"; then
+  filetrans="filepath = path"
 else
-    filetrans="filepath = os.path.normpath('$destdir' + os.sep + path)"
+  filetrans="filepath = os.path.normpath('$destdir' + os.sep + path)"
+fi
+
+python_major=`$PYTHON -c 'import sys; print(sys.version_info[0])'`
+if test -z "$python_major"; then
+  usage_error "could not determine $PYTHON major version"
 fi
 
+case $python_major in
+[01])
+  usage_error "python version 0.x and 1.x not supported"
+  ;;
+esac
+
+python_minor=`$PYTHON -c 'import sys; print(sys.version_info[1])'`
+
+# NB: When adding support for newer versions, prefer copying & adding new cases
+# rather than try to keep things merged with shell variables.
+
+# First byte compile (no optimization) all the modules.
+# This works for all currently known Python versions.
 $PYTHON -c "
-import sys, os, py_compile, imp
+import sys, os, py_compile
+
+try:
+    import importlib
+except ImportError:
+    importlib = None
+
+# importlib.util.cache_from_source was added in 3.4
+if (
+        hasattr(importlib, 'util')
+        and hasattr(importlib.util, 'cache_from_source')
+):
+    destpath = importlib.util.cache_from_source
+else:
+    destpath = lambda filepath: filepath + 'c'
 
-files = '''$files'''
 silent = $silent
 blu = '''$blu'''
 std = '''$std'''
 
 if not silent:
-    sys.stdout.write('Byte-compiling python modules...')
-for file in files.split():
+    sys.stdout.write('Byte-compiling python modules...\n')
+for file in sys.argv[1:]:
     $pathtrans
     $filetrans
-    if not os.path.exists(filepath) or not (len(filepath) >= 3
-                                            and filepath[-3:] == '.py'):
-	    continue
+    if (
+            not os.path.exists(filepath)
+            or not (len(filepath) >= 3 and filepath[-3:] == '.py')
+     ):
+        continue
     if not silent:
-        sys.stdout.write(' ' + file)
+        sys.stdout.write(file + ' ')
         sys.stdout.flush()
     else:
-        sys.stdout.write('  PYTHON   {}{}{}\n'.format(blu, filepath + 'c', std))
-    if hasattr(imp, 'get_tag'):
-        py_compile.compile(filepath, imp.cache_from_source(filepath), path)
-    else:
-        py_compile.compile(filepath, filepath + 'c', path)
+        sys.stdout.write('  PYCACHE  {}{}{}\n'.format(blu, destpath(filepath), std))
+    py_compile.compile(filepath, destpath(filepath), path)
 if not silent:
-    sys.stdout.write('\n')" || exit $?
+    sys.stdout.write('\n')" "$@" || exit $?
 
-# this will fail for python < 1.5, but that doesn't matter ...
+# Then byte compile w/optimization all the modules.
 $PYTHON -O -c "
-import sys, os, py_compile, imp
+import sys, os, py_compile
+
+try:
+    import importlib
+except ImportError:
+    importlib = None
+
+# importlib.util.cache_from_source was added in 3.4
+if (
+        hasattr(importlib, 'util')
+        and hasattr(importlib.util, 'cache_from_source')
+):
+    destpath = importlib.util.cache_from_source
+else:
+    destpath = lambda filepath: filepath + 'o'
 
-# pypy does not use .pyo optimization
-if hasattr(sys, 'pypy_translation_info'):
+# pypy2 does not use .pyo optimization
+if sys.version_info.major <= 2 and hasattr(sys, 'pypy_translation_info'):
     sys.exit(0)
 
-files = '''$files'''
 silent = $silent
 blu = '''$blu'''
 std = '''$std'''
 
 if not silent:
-    sys.stdout.write('Byte-compiling python modules (optimized versions)...')
-for file in files.split():
+    sys.stdout.write('Byte-compiling python modules (optimized versions) ...\n')
+for file in sys.argv[1:]:
     $pathtrans
     $filetrans
-    if not os.path.exists(filepath) or not (len(filepath) >= 3
-                                            and filepath[-3:] == '.py'):
-	    continue
+    if (
+            not os.path.exists(filepath)
+            or not (len(filepath) >= 3 and filepath[-3:] == '.py')
+    ):
+        continue
     if not silent:
-        sys.stdout.write(' ' + file)
+        sys.stdout.write(file + ' ')
         sys.stdout.flush()
     else:
-        sys.stdout.write('  PYTHON   {}{}{}\n'.format(blu, filepath + 'o', std))
-    if hasattr(imp, 'get_tag'):
-        py_compile.compile(filepath, imp.cache_from_source(filepath, False), path)
+        sys.stdout.write('  PYCACHE  {}{}{}\n'.format(blu, destpath(filepath), std))
+    py_compile.compile(filepath, destpath(filepath), path)
+if not silent:
+    sys.stdout.write('\n')" "$@" 2>/dev/null || exit $?
+
+# Then byte compile w/more optimization.
+# Only do this for Python 3.5+, see https://bugs.gnu.org/38043 for background.
+case $python_major.$python_minor in
+2.*|3.[0-4])
+  ;;
+*)
+  $PYTHON -OO -c "
+import sys, os, py_compile, importlib
+
+destpath = importlib.util.cache_from_source
+
+silent = $silent
+blu = '''$blu'''
+std = '''$std'''
+
+if not silent:
+    sys.stdout.write('Byte-compiling python modules (more optimized versions)'
+                     ' ...\n')
+for file in sys.argv[1:]:
+    $pathtrans
+    $filetrans
+    if (
+            not os.path.exists(filepath)
+            or not (len(filepath) >= 3 and filepath[-3:] == '.py')
+    ):
+        continue
+    if not silent:
+        sys.stdout.write(file + ' ')
+        sys.stdout.flush()
     else:
-        py_compile.compile(filepath, filepath + 'o', path)
+        sys.stdout.write('  PYCACHE  {}{}{}\n'.format(blu, destpath(filepath), std))
+    py_compile.compile(filepath, destpath(filepath), path)
 if not silent:
-    sys.stdout.write('\n')" 2>/dev/null || :
+    sys.stdout.write('\n')" "$@" 2>/dev/null || exit $?
+  ;;
+esac
 
 # Local Variables:
 # mode: shell-script
