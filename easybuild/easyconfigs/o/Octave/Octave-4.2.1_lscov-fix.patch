use fixed lscov.m to fix "error: lscov: V should be a square matrix or a vector with the s"
see https://savannah.gnu.org/bugs/index.php?52874
--- octave-4.2.1/scripts/statistics/base/lscov.m.orig	2018-03-15 17:52:40.535033583 +0100
+++ octave-4.2.1/scripts/statistics/base/lscov.m	2018-03-15 17:52:51.405163710 +0100
@@ -1,17 +1,20 @@
 ## Copyright (C) 2014-2017 Nir Krakauer
 ##
-## This program is free software; you can redistribute it and/or modify
-## it under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 3 of the License, or
+## This file is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
 ## (at your option) any later version.
 ##
-## This program is distributed in the hope that it will be useful,
-## but WITHOUT ANY WARRANTY; without even the implied warranty of
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
-## along with this program; If not, see <http://www.gnu.org/licenses/>.
+## along with Octave; see the file COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{x} =} lscov (@var{A}, @var{b})
@@ -21,26 +24,26 @@
 ##
 ## Compute a generalized linear least squares fit.
 ##
-## Estimate @var{x} under the model @var{b} = @var{A}@var{x} + @var{w},
-## where the noise @var{w} is assumed to follow a normal distribution
-## with covariance matrix @math{{\sigma^2} V}.
-##
-## If the size of the coefficient matrix @var{A} is n-by-p, the
-## size of the vector/array of constant terms @var{b} must be n-by-k.
-##
-## The optional input argument @var{V} may be a n-by-1 vector of positive
-## weights (inverse variances), or a n-by-n symmetric positive semidefinite
-## matrix representing the covariance of @var{b}.  If @var{V} is not
-## supplied, the ordinary least squares solution is returned.
+## Estimate @var{x} under the model @var{b} = @var{A}@var{x} + @var{w}, where
+## the noise @var{w} is assumed to follow a normal distribution with covariance
+## matrix @math{{\sigma^2} V}.
+##
+## If the size of the coefficient matrix @var{A} is n-by-p, the size of the
+## vector/array of constant terms @var{b} must be n-by-k.
+##
+## The optional input argument @var{V} may be an n-element vector of positive
+## weights (inverse variances), or an n-by-n symmetric positive semi-definite
+## matrix representing the covariance of @var{b}.  If @var{V} is not supplied,
+## the ordinary least squares solution is returned.
 ##
 ## The @var{alg} input argument, a guidance on solution method to use, is
 ## currently ignored.
 ##
 ## Besides the least-squares estimate matrix @var{x} (p-by-k), the function
-## also returns @var{stdx} (p-by-k), the error standard deviation of
-## estimated @var{x}; @var{mse} (k-by-1), the estimated data error covariance
-## scale factors (@math{\sigma^2}); and @var{S} (p-by-p, or p-by-p-by-k if k
-## > 1), the error covariance of @var{x}.
+## also returns @var{stdx} (p-by-k), the error standard deviation of estimated
+## @var{x}; @var{mse} (k-by-1), the estimated data error covariance scale
+## factors (@math{\sigma^2}); and @var{S} (p-by-p, or p-by-p-by-k if k > 1),
+## the error covariance of @var{x}.
 ##
 ## Reference: @nospell{Golub and Van Loan} (1996),
 ## @cite{Matrix Computations (3rd Ed.)}, Johns Hopkins, Section 5.6.3
@@ -52,31 +55,45 @@
 
 function [x, stdx, mse, S] = lscov (A, b, V = [], alg)
 
-  if (nargin < 2 || (rows (A) != rows (b)))
+  if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
+  if (rows (A) != rows (b))
+    error ("lscov: A and B must have the same number of rows");
+  endif
+
+
+  if (nargin == 4)
+    warning ("lscov: algorithm selection input ALG is not yet implemented, using default");
+  endif
+
   n = rows (A);
   p = columns (A);
   k = columns (b);
 
   if (! isempty (V))
-    if (rows (V) != n || ! any (columns (V) == [1 n]))
-      error ("lscov: V should be a square matrix or a vector with the same number of rows as A");
-    endif
 
     if (isvector (V))
-      ## n-by-1 vector of inverse variances
+      ## n-element vector of inverse variances
+      if (numel (V) != n)
+        error ("lscov: vector V must have n (number of row in A) elements ");
+      endif
+
       v = diag (sqrt (V));
       A = v * A;
       b = v * b;
     else
       ## n-by-n covariance matrix
+      if (size (V) != [n, n])
+        error ("lscov: matrix V must be square with the same number of rows as A");
+      endif
+
       try
-        ## ordinarily V will be positive definite
+        ## Ordinarily V will be positive definite
         B = chol (V)';
       catch
-        ## if V is only positive semidefinite, use its
+        ## If V is only positive semi-definite, use its
         ## eigendecomposition to find a factor B such that V = B*B'
         [B, lambda] = eig (V);
         image_dims = (diag (lambda) > 0);
@@ -87,28 +104,27 @@
     endif
   endif
 
-  pinv_A = pinv (A); #pseudoinverse
+  pinv_A = pinv (A);
 
   x = pinv_A * b;
 
-  if (isargout (3))
-    dof = n - p; #degrees of freedom remaining after fit
+  if (nargout > 1)
+    dof = n - p;  # degrees of freedom remaining after fit
     SSE = sumsq (b - A * x);
     mse = SSE / dof;
-  endif
 
-  s = pinv_A * pinv_A';
+    s = pinv_A * pinv_A';
+    stdx = sqrt (diag (s) * mse);
 
-  stdx = sqrt (diag (s) * mse);
-
-  if (isargout (4))
-    if (k == 1)
-      S = mse * s;
-    else
-      S = nan (p, p, k);
-      for i = 1:k
-        S(:, :, i) = mse(i) * s;
-      endfor
+    if (nargout > 3)
+      if (k == 1)
+        S = mse * s;
+      else
+        S = NaN (p, p, k);
+        for i = 1:k
+          S(:, :, i) = mse(i) * s;
+        endfor
+      endif
     endif
   endif
 
@@ -180,7 +196,7 @@
 %! assert(S2(:, :, 2), 4*S, eps);
 
 %!test
-%! ## Artificial example with positive semidefinite weight matrix
+%! ## Artificial example with positive semi-definite weight matrix
 %! x = (0:0.2:2)';
 %! y = round(100*sin(x) + 200*cos(x));
 %! X = [ones(size(x)) sin(x) cos(x)];
@@ -188,3 +204,12 @@
 %! V(end, end-1) = V(end-1, end) = 1;
 %! [b, seb, mseb, S] = lscov (X, y, V);
 %! assert(b, [0 100 200]', 0.2);
+
+%!error lscov ()
+%!error lscov (1)
+%!error lscov (1,2,3,4,5)
+%!error <A and B must have the same number of rows> lscov (ones (2,2),1)
+%!warning <algorithm selection input ALG is not yet implemented>
+%! lscov (1,1, [], "chol");
+%!error <vector V must have n .* elements> lscov (1,2, [1, 2])
+%!error <matrix V must be square> lscov (1,2, [1 2 3; 4 5 6])
