Intel compiler does not understand __builtin_*_overflow
# Oct 25th 2016 by B. Hajgato (Free University Brussels - VUB)
# Apr 4th 2017 by B. Oldeman (Compute Canada)
--- octave-4.2.1/libgnu/xalloc-oversized.h.orig 2017-02-22 18:17:37.000000000 +0000
+++ octave-4.2.1/libgnu/xalloc-oversized.h      2017-04-04 14:29:22.020046084 +0000
@@ -43,12 +43,12 @@
    nonnegative.  This is a macro, not a function, so that it
    works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__ || __has_builtin (__builtin_add_overflow_p)
+#if (7 <= __GNUC__ || __has_builtin (__builtin_add_overflow_p) && !__INTEL_COMPILER)
 # define xalloc_oversized(n, s) __builtin_mul_overflow_p (n, s, (size_t) 1)
 #elif ((5 <= __GNUC__ \
         || (__has_builtin (__builtin_mul_overflow) \
             && __has_builtin (__builtin_constant_p))) \
-       && !__STRICT_ANSI__)
+       && !__STRICT_ANSI__ && !__INTEL_COMPILER)
 # define xalloc_oversized(n, s) \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
--- octave-4.0.3/libgnu/glob.c.orig     2016-10-24 16:11:56.437441986 +0200
+++ octave-4.0.3/libgnu/glob.c  2016-10-24 16:12:21.127612656 +0200
@@ -257,7 +257,7 @@
 static bool
 size_add_wrapv (size_t a, size_t b, size_t *r)
 {
-#if 5 <= __GNUC__ || __has_builtin (__builtin_add_overflow)
+#if ((5 <= __GNUC__ || __has_builtin (__builtin_add_overflow)) && !__INTEL_COMPILER)
   return __builtin_add_overflow (a, b, r);
 #else
   *r = a + b;
--- octave-4.2.1/libgnu/intprops.h.orig	2017-02-22 18:17:35.000000000 +0000
+++ octave-4.2.1/libgnu/intprops.h	2017-04-04 14:35:17.208604138 +0000
@@ -242,11 +242,11 @@
 
 /* True if __builtin_add_overflow (A, B, P) works when P is non-null.  */
 #define _GL_HAS_BUILTIN_OVERFLOW \
-  (5 <= __GNUC__ || __has_builtin (__builtin_add_overflow))
+  ((5 <= __GNUC__ || __has_builtin (__builtin_add_overflow)) && !__INTEL_COMPILER)
 
 /* True if __builtin_add_overflow_p (A, B, C) works.  */
 #define _GL_HAS_BUILTIN_OVERFLOW_P \
-  (7 <= __GNUC__ || __has_builtin (__builtin_add_overflow_p))
+  ((7 <= __GNUC__ || __has_builtin (__builtin_add_overflow_p)) && !__INTEL_COMPILER)
 
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
