Intel compiler does not understand __builtin_*_overflow 
# Oct 25th 2016 by B. Hajgato (Free University Brussels - VUB)
--- octave-4.0.3/libgnu/xalloc-oversized.h.orig	2016-07-01 20:43:46.000000000 +0200
+++ octave-4.0.3/libgnu/xalloc-oversized.h	2016-10-24 16:05:11.093643937 +0200
@@ -36,7 +36,7 @@
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
-#if 5 <= __GNUC__ || __has_builtin (__builtin_mul_overflow)
+#if ((5 <= __GNUC__ || __has_builtin (__builtin_mul_overflow)) && !__INTEL_COMPILER)
 # define xalloc_oversized(n, s) \
     ({ size_t __xalloc_size; __builtin_mul_overflow (n, s, &__xalloc_size); })
 #else
--- octave-4.0.3/libgnu/glob.c.orig	2016-10-24 16:11:56.437441986 +0200
+++ octave-4.0.3/libgnu/glob.c	2016-10-24 16:12:21.127612656 +0200
@@ -257,7 +257,7 @@
 static bool
 size_add_wrapv (size_t a, size_t b, size_t *r)
 {
-#if 5 <= __GNUC__ || __has_builtin (__builtin_add_overflow)
+#if ((5 <= __GNUC__ || __has_builtin (__builtin_add_overflow)) && !__INTEL_COMPILER)
   return __builtin_add_overflow (a, b, r);
 #else
   *r = a + b;
--- octave-4.0.3/libgnu/intprops.h.orig	2016-07-01 20:43:43.000000000 +0200
+++ octave-4.0.3/libgnu/intprops.h	2016-10-24 16:23:43.652325264 +0200
@@ -353,7 +353,7 @@
 /* Store A <op> B into *R, where OP specifies the operation.
    BUILTIN is the builtin operation, and OVERFLOW the overflow predicate.
    See above for restrictions.  */
-#if 5 <= __GNUC__ || __has_builtin (__builtin_add_overflow)
+#if ((5 <= __GNUC__ || __has_builtin (__builtin_add_overflow)) && !__INTEL_COMPILER)
 # define _GL_INT_OP_WRAPV(a, b, r, op, builtin, overflow) builtin (a, b, r)
 #elif 201112 <= __STDC_VERSION__ && !_GL__GENERIC_BOGUS
 # define _GL_INT_OP_WRAPV(a, b, r, op, builtin, overflow) \
