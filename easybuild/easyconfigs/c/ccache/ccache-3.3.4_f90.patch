port unmerged support for Fortran90 to ccache 3.3.4
see also https://github.com/ccache/ccache/pull/90
diff -ru ccache-3.3.4.orig/compopt.c ccache-3.3.4/compopt.c
--- ccache-3.3.4.orig/compopt.c	2017-02-17 22:26:01.000000000 +0100
+++ ccache-3.3.4/compopt.c	2017-09-08 22:37:37.887344362 +0200
@@ -40,6 +40,7 @@
 	{"-F",              AFFECTS_CPP | TAKES_ARG | TAKES_CONCAT_ARG | TAKES_PATH},
 	{"-G",              TAKES_ARG},
 	{"-I",              AFFECTS_CPP | TAKES_ARG | TAKES_CONCAT_ARG | TAKES_PATH},
+	{"-J",              TAKES_ARG | TAKES_PATH},
 	{"-L",              TAKES_ARG},
 	{"-M",              TOO_HARD},
 	{"-MF",             TAKES_ARG},
Only in ccache-3.3.4: compopt.c.orig
diff -ru ccache-3.3.4.orig/language.c ccache-3.3.4/language.c
--- ccache-3.3.4.orig/language.c	2017-02-17 22:26:01.000000000 +0100
+++ ccache-3.3.4/language.c	2017-09-08 22:40:39.688431455 +0200
@@ -73,19 +73,17 @@
 	{".FPP", "f77-cpp-input"},
 	{".FTN", "f77-cpp-input"},
 	// Free form Fortran without preprocessing:
-#if 0 // Could generate modules, ignore for now!
+    // Could generate modules, ignore for now!
 	{".f90", "f95"},
 	{".f95", "f95"},
 	{".f03", "f95"},
 	{".f08", "f95"},
-#endif
 	// Free form Fortran with traditional preprocessing:
-#if 0 // Could generate modules, ignore for now!
+    // Could generate modules, ignore for now!
 	{".F90", "f95-cpp-input"},
 	{".F95", "f95-cpp-input"},
 	{".F03", "f95-cpp-input"},
 	{".F08", "f95-cpp-input"},
-#endif
 	{NULL,  NULL}
 };
 
@@ -113,10 +111,8 @@
 	{"assembler",                "assembler"},
 	{"f77-cpp-input",            "f77"},
 	{"f77",                      "f77"},
-#if 0 // Could generate module files, ignore for now!
 	{"f95-cpp-input",            "f95"},
 	{"f95",                      "f95"},
-#endif
 	{NULL,  NULL}
 };
 
diff -ru ccache-3.3.4.orig/ccache.c ccache-3.3.4/ccache.c
--- ccache-3.3.4.orig/ccache.c	2017-02-17 22:26:01.000000000 +0100
+++ ccache-3.3.4/ccache.c	2017-09-08 22:45:31.380156530 +0200
@@ -188,6 +188,9 @@
 
 // The name of the cpp stderr file.
 static char *cpp_stderr;
+ 
+/* the name of the custom fortran module directory (default: pwd dirname) */
+static char *fortran_module_dir = NULL;
 
 // Full path to the statistics file in the subdirectory where the cached result
 // belongs (<cache_dir>/<x>/stats).
@@ -1106,6 +1109,12 @@
 	//   tmp.stdout.vexed.732.o: /home/mbp/.ccache/tmp.stdout.vexed.732.i
 	x_unsetenv("DEPENDENCIES_OUTPUT");
 
+  /* for Fortran explicitly specify target module directory */
+  if (fortran_module_dir) {
+    args_add(args, "-J");
+    args_add(args, fortran_module_dir);
+  }
+
 	if (conf->run_second_cpp) {
 		args_add(args, input_file);
 	} else {
@@ -1116,6 +1125,9 @@
 	int status =
 	  execute(args->argv, tmp_stdout_fd, tmp_stderr_fd, &compiler_pid);
 	args_pop(args, 3);
+	if (fortran_module_dir) {
+    args_pop(args, 2);
+	}
 
 	struct stat st;
 	if (x_stat(tmp_stdout, &st) != 0) {
@@ -1665,7 +1677,9 @@
 				i++;
 				continue;
 			}
-			if (compopt_short(compopt_affects_cpp, args->argv[i])) {
+      if (str_startswith(args->argv[i], "-J")) {
+          /* ignore it here - handled later */
+			} else if (compopt_short(compopt_affects_cpp, args->argv[i])) {
 				continue;
 			}
 		}
@@ -1856,12 +1870,19 @@
 // Try to return the compile result from cache. If we can return from cache
 // then this function exits with the correct status code, otherwise it returns.
 static void
-from_cache(enum fromcache_call_mode mode, bool put_object_in_manifest)
+from_cache(enum fromcache_call_mode mode, bool put_object_in_manifest, struct args* args)
 {
+   char *tmp_stdout, *tmp_stderr;
+   int tmp_stdout_fd, tmp_stderr_fd, status;
 	// The user might be disabling cache hits.
 	if (conf->recache) {
 		return;
 	}
+ 
+	/* Fortran 90/95 code might depend on module files, so allow only direct mode then */
+	if (fortran_module_dir && mode != FROMCACHE_DIRECT_MODE ) {
+    return;
+	}
 
 	struct stat st;
 	if (stat(cached_obj, &st) != 0) {
@@ -1957,6 +1978,45 @@
 	if (put_object_in_manifest) {
 		update_manifest_file();
 	}
+ 
+	/* Fortran regenerate possible module files */
+	if (fortran_module_dir) {
+    tmp_stdout = format("%s.tmp.stdout", cached_obj);
+    tmp_stdout_fd = create_tmp_fd(&tmp_stdout);
+    tmp_stderr = format("%s.tmp.stderr", cached_obj);
+    tmp_stderr_fd = create_tmp_fd(&tmp_stderr);
+
+    args_add(args, "-J");
+    args_add(args, fortran_module_dir);
+    args_add(args, "-fsyntax-only");
+    args_add(args, input_file);
+
+    cc_log("Running compiler to generate Fortran modules");
+    status = execute(args->argv, tmp_stdout_fd, tmp_stderr_fd, &compiler_pid);
+    args_pop(args, 4);
+
+    if (status != 0) {
+      int fd;
+      cc_log("Compiler gave exit status %d", status);
+      stats_update(STATS_STATUS);
+
+      fd = open(tmp_stderr, O_RDONLY | O_BINARY);
+      if (fd != -1) {
+        /* We can output stderr immediately instead of rerunning the compiler. */
+        copy_fd(fd, 2);
+        close(fd);
+        tmp_unlink(tmp_stderr);
+        tmp_unlink(tmp_stdout);
+
+        x_exit(status);
+      }
+      tmp_unlink(tmp_stderr);
+      tmp_unlink(tmp_stdout);
+
+      failed();
+    }
+	}
+
 
 	// Log the cache hit.
 	switch (mode) {
@@ -2302,6 +2362,25 @@
 			continue;
 		}
 
+		/* we need to work out where Fortran module files are meant to go */
+		if (str_eq(argv[i], "-J")) {
+      if (i == argc-1) {
+        cc_log("Missing argument to %s", argv[i]);
+        stats_update(STATS_ARGS);
+        result = false;
+        goto out;
+      }
+      fortran_module_dir = make_relative_path(x_strdup(argv[i+1]));
+      i++;
+      continue;
+		}
+
+		/* alternate form of -J, with no space */
+		if (str_startswith(argv[i], "-J")) {
+      fortran_module_dir = make_relative_path(x_strdup(&argv[i][2]));
+      continue;
+		}
+
 		if (str_eq(argv[i], "-gsplit-dwarf")) {
 			cc_log("Enabling caching of dwarf files since -gsplit-dwarf is used");
 			using_split_dwarf = true;
@@ -2610,7 +2689,9 @@
 			}
 
 			char *relpath = make_relative_path(x_strdup(argv[i+1]));
-			if (compopt_affects_cpp(argv[i])) {
+			if (str_startswith(argv[i], "-J")) {
+          /* ignore it here - handled later */
+			} else if (compopt_affects_cpp(argv[i])) {
 				args_add(cpp_args, argv[i]);
 				args_add(cpp_args, relpath);
 			} else {
@@ -2968,6 +3049,19 @@
 	*preprocessor_args = args_copy(stripped_args);
 	args_extend(*preprocessor_args, cpp_args);
 
+	/* special handling for Fortran */
+	if (str_startswith(actual_language, "f95")) {
+  	/* do not do explicit preprocessing in Fortran 90/95 */
+    args_extend(*compiler_args, cpp_args);
+
+    /* Fortran may produce module files. Output directory was specified by -J */
+    if (!fortran_module_dir) {
+      /* defaults to current working directory */
+      fortran_module_dir = make_relative_path(x_strdup(current_working_dir));
+    }
+  } else {
+    free(fortran_module_dir); fortran_module_dir = NULL;
+  }
 out:
 	args_free(expanded_args);
 	args_free(stripped_args);
@@ -3129,6 +3223,7 @@
 	i_tmpfile = NULL;
 	direct_i_file = false;
 	free(cpp_stderr); cpp_stderr = NULL;
+	free(fortran_module_dir); fortran_module_dir = NULL;
 	free(stats_file); stats_file = NULL;
 	output_is_precompiled_header = false;
 
@@ -3219,6 +3314,9 @@
 	if (output_dia) {
 		cc_log("Diagnostic file: %s", output_dia);
 	}
+	if (fortran_module_dir) {
+    cc_log("Fortran 90/95 or newer detected, putting module files into: %s", fortran_module_dir);
+	}
 
 	if (using_split_dwarf) {
 		if (!generating_dependencies) {
@@ -3250,7 +3348,7 @@
 			update_cached_result_globals(object_hash);
 
 			// If we can return from cache at this point then do so.
-			from_cache(FROMCACHE_DIRECT_MODE, 0);
+			from_cache(FROMCACHE_DIRECT_MODE, 0, compiler_args);
 
 			// Wasn't able to return from cache at this point. However, the object
 			// was already found in manifest, so don't readd it later.
@@ -3299,7 +3397,7 @@
 	}
 
 	// If we can return from cache at this point then do.
-	from_cache(FROMCACHE_CPP_MODE, put_object_in_manifest);
+	from_cache(FROMCACHE_CPP_MODE, put_object_in_manifest, compiler_args);
 
 	if (conf->read_only) {
 		cc_log("Read-only mode; running real compiler");
