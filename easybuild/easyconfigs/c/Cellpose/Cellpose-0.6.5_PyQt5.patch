From 9f030e804e729924344e1bb1c3676478b812fe8e Mon Sep 17 00:00:00 2001
From: Carsen Stringer <carsen.stringer@gmail.com>
Date: Mon, 9 Aug 2021 16:53:02 -0400
Subject: [PATCH] fixing changes in pyqt5 imports (#298)

---
 cellpose/gui/gui.py      |  87 ++++++++++++++--------------
 cellpose/gui/guiparts.py | 121 ++++++++++++++++++---------------------
 cellpose/gui/io.py       |   8 +--
 cellpose/gui/menus.py    |  34 +++++------
 tests/test_train.py      |   6 +-
 5 files changed, 123 insertions(+), 133 deletions(-)

diff --git a/cellpose/gui/gui.py b/cellpose/gui/gui.py
index 5734bbb..28b2849 100644
--- a/cellpose/gui/gui.py
+++ b/cellpose/gui/gui.py
@@ -4,6 +4,7 @@
 from tqdm import tqdm
 
 from PyQt5 import QtGui, QtCore, Qt, QtWidgets
+from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QScrollBar, QSlider, QComboBox, QGridLayout, QPushButton, QFrame, QCheckBox, QLabel, QProgressBar, QLineEdit
 import pyqtgraph as pg
 from pyqtgraph import GraphicsScene
 
@@ -32,11 +33,11 @@
 except:
     SERVER_UPLOAD = False
 
-class QHLine(QtGui.QFrame):
+class QHLine(QFrame):
     def __init__(self):
         super(QHLine, self).__init__()
-        self.setFrameShape(QtGui.QFrame.HLine)
-        self.setFrameShadow(QtGui.QFrame.Sunken)
+        self.setFrameShape(QFrame.HLine)
+        self.setFrameShadow(QFrame.Sunken)
 
 def avg3d(C):
     """ smooth value of c across nearby points
@@ -115,7 +116,7 @@ def make_cmap(cm=0):
 def run(image=None):
     # Always start by initializing Qt (only once per application)
     warnings.filterwarnings("ignore")
-    app = QtGui.QApplication(sys.argv)
+    app = QApplication(sys.argv)
     icon_path = pathlib.Path.home().joinpath('.cellpose', 'logo.png')
     guip_path = pathlib.Path.home().joinpath('.cellpose', 'cellpose_gui.png')
     if not icon_path.is_file():
@@ -148,7 +149,7 @@ def get_unique_points(set):
     set = list(np.unique(cps, axis=0))
     return set
 
-class MainW(QtGui.QMainWindow):
+class MainW(QMainWindow):
     def __init__(self, image=None):
         super(MainW, self).__init__()
 
@@ -187,8 +188,8 @@ def __init__(self, image=None):
         self.loaded = False
 
         # ---- MAIN WIDGET LAYOUT ---- #
-        self.cwidget = QtGui.QWidget(self)
-        self.l0 = QtGui.QGridLayout()
+        self.cwidget = QWidget(self)
+        self.l0 = QGridLayout()
         self.cwidget.setLayout(self.l0)
         self.setCentralWidget(self.cwidget)
         self.l0.setVerticalSpacing(6)
@@ -255,17 +256,17 @@ def make_buttons(self):
                         "selection-background-color: rgb(50,100,50);")
         self.checkstyle = "color: rgb(190,190,190);"
 
-        label = QtGui.QLabel('Views:')#[\u2191 \u2193]')
+        label = QLabel('Views:')#[\u2191 \u2193]')
         label.setStyleSheet(self.headings)
         label.setFont(self.boldfont)
         self.l0.addWidget(label, 0,0,1,1)
 
-        label = QtGui.QLabel('[up/down or W/S]')
+        label = QLabel('[up/down or W/S]')
         label.setStyleSheet(label_style)
         label.setFont(self.smallfont)
         self.l0.addWidget(label, 1,0,1,1)
 
-        label = QtGui.QLabel('[pageup/down]')
+        label = QLabel('[pageup/down]')
         label.setStyleSheet(label_style)
         label.setFont(self.smallfont)
         self.l0.addWidget(label, 1,1,1,1)
@@ -274,7 +275,7 @@ def make_buttons(self):
         self.view = 0 # 0=image, 1=flowsXY, 2=flowsZ, 3=cellprob
         self.color = 0 # 0=RGB, 1=gray, 2=R, 3=G, 4=B
         self.RGBChoose = guiparts.RGBRadioButtons(self, b,1)
-        self.RGBDropDown = QtGui.QComboBox()
+        self.RGBDropDown = QComboBox()
         self.RGBDropDown.addItems(["RGB","gray","spectral","red","green","blue"])
         self.RGBDropDown.setFont(self.medfont)
         self.RGBDropDown.currentIndexChanged.connect(self.color_choose)
@@ -292,21 +293,21 @@ def make_buttons(self):
         line.setStyleSheet('color: white;')
         self.l0.addWidget(line, b,0,1,2)
         b+=1
-        label = QtGui.QLabel('Drawing:')
+        label = QLabel('Drawing:')
         label.setStyleSheet(self.headings)
         label.setFont(self.boldfont)
         self.l0.addWidget(label, b,0,1,2)
 
         b+=1
         self.brush_size = 3
-        self.BrushChoose = QtGui.QComboBox()
+        self.BrushChoose = QComboBox()
         self.BrushChoose.addItems(["1","3","5","7","9"])
         self.BrushChoose.currentIndexChanged.connect(self.brush_choose)
         self.BrushChoose.setFixedWidth(60)
         self.BrushChoose.setStyleSheet(self.dropdowns)
         self.BrushChoose.setFont(self.medfont)
         self.l0.addWidget(self.BrushChoose, b, 1,1,1)
-        label = QtGui.QLabel('brush size: [, .]')
+        label = QLabel('brush size: [, .]')
         label.setStyleSheet(label_style)
         label.setFont(self.medfont)
         self.l0.addWidget(label, b,0,1,1)
@@ -317,7 +318,7 @@ def make_buttons(self):
 
         b+=1
         # turn on draw mode
-        self.SCheckBox = QtGui.QCheckBox('single stroke')
+        self.SCheckBox = QCheckBox('single stroke')
         self.SCheckBox.setStyleSheet(self.checkstyle)
         self.SCheckBox.setFont(self.medfont)
         self.SCheckBox.toggled.connect(self.autosave_on)
@@ -325,7 +326,7 @@ def make_buttons(self):
 
         b+=1
         # turn on crosshairs
-        self.CHCheckBox = QtGui.QCheckBox('cross-hairs')
+        self.CHCheckBox = QCheckBox('cross-hairs')
         self.CHCheckBox.setStyleSheet(self.checkstyle)
         self.CHCheckBox.setFont(self.medfont)
         self.CHCheckBox.toggled.connect(self.cross_hairs)
@@ -335,7 +336,7 @@ def make_buttons(self):
         # turn off masks
         self.layer_off = False
         self.masksOn = True
-        self.MCheckBox = QtGui.QCheckBox('MASKS ON [X]')
+        self.MCheckBox = QCheckBox('MASKS ON [X]')
         self.MCheckBox.setStyleSheet(self.checkstyle)
         self.MCheckBox.setFont(self.medfont)
         self.MCheckBox.setChecked(True)
@@ -345,7 +346,7 @@ def make_buttons(self):
         b+=1
         # turn off outlines
         self.outlinesOn = True
-        self.OCheckBox = QtGui.QCheckBox('outlines on [Z]')
+        self.OCheckBox = QCheckBox('outlines on [Z]')
         self.OCheckBox.setStyleSheet(self.checkstyle)
         self.OCheckBox.setFont(self.medfont)
         self.OCheckBox.setChecked(True)
@@ -354,7 +355,7 @@ def make_buttons(self):
 
         b+=1
         # send to server
-        self.ServerButton = QtGui.QPushButton(' send manual seg. to server')
+        self.ServerButton = QPushButton(' send manual seg. to server')
         self.ServerButton.clicked.connect(lambda: save_server(self))
         self.l0.addWidget(self.ServerButton, b,0,1,2)
         self.ServerButton.setEnabled(False)
@@ -366,19 +367,19 @@ def make_buttons(self):
         line.setStyleSheet('color: white;')
         self.l0.addWidget(line, b,0,1,2)
         b+=1
-        label = QtGui.QLabel('Segmentation:')
+        label = QLabel('Segmentation:')
         label.setStyleSheet(self.headings)
         label.setFont(self.boldfont)
         self.l0.addWidget(label, b,0,1,2)
 
         b+=1
         self.diameter = 30
-        label = QtGui.QLabel('cell diameter (pixels) (click ENTER):')
+        label = QLabel('cell diameter (pixels) (click ENTER):')
         label.setStyleSheet(label_style)
         label.setFont(self.medfont)
         label.setToolTip('you can manually enter the approximate diameter for your cells, \nor press “calibrate” to let the model estimate it. \nThe size is represented by a disk at the bottom of the view window \n(can turn this disk off by unchecking “scale disk on”)')
         self.l0.addWidget(label, b, 0,1,2)
-        self.Diameter = QtGui.QLineEdit()
+        self.Diameter = QLineEdit()
         self.Diameter.setToolTip('you can manually enter the approximate diameter for your cells, \nor press “calibrate” to let the model estimate it. \nThe size is represented by a disk at the bottom of the view window \n(can turn this disk off by unchecking “scale disk on”)')
         self.Diameter.setText(str(self.diameter))
         self.Diameter.setFont(self.medfont)
@@ -388,7 +389,7 @@ def make_buttons(self):
         self.l0.addWidget(self.Diameter, b, 0,1,2)
 
         # recompute model
-        self.SizeButton = QtGui.QPushButton('  calibrate')
+        self.SizeButton = QPushButton('  calibrate')
         self.SizeButton.clicked.connect(self.calibrate_size)
         self.l0.addWidget(self.SizeButton, b,1,1,1)
         self.SizeButton.setEnabled(False)
@@ -398,7 +399,7 @@ def make_buttons(self):
         # scale toggle
         b+=1
         self.scale_on = True
-        self.ScaleOn = QtGui.QCheckBox('scale disk on')
+        self.ScaleOn = QCheckBox('scale disk on')
         self.ScaleOn.setFont(self.medfont)
         self.ScaleOn.setStyleSheet('color: red;')
         self.ScaleOn.setChecked(True)
@@ -408,7 +409,7 @@ def make_buttons(self):
 
         # use GPU
         b+=1
-        self.useGPU = QtGui.QCheckBox('use GPU')
+        self.useGPU = QCheckBox('use GPU')
         self.useGPU.setStyleSheet(self.checkstyle)
         self.useGPU.setFont(self.medfont)
         self.useGPU.setToolTip('if you have specially installed the <i>cuda</i> version of mxnet, then you can activate this, but it won’t give huge speedups when running single 2D images in the GUI.')
@@ -416,7 +417,7 @@ def make_buttons(self):
         self.l0.addWidget(self.useGPU, b,0,1,1)
 
         # fast mode
-        self.NetAvg = QtGui.QComboBox()
+        self.NetAvg = QComboBox()
         self.NetAvg.addItems(['average 4 nets', '+ resample (slow)', 'run 1 net (fast)', ])
         self.NetAvg.setFont(self.medfont)
         self.NetAvg.setToolTip('average 4 different fit networks (default) + resample for smooth masks (slow) or run 1 network (fast)')
@@ -424,7 +425,7 @@ def make_buttons(self):
 
         b+=1
         # choose models
-        self.ModelChoose = QtGui.QComboBox()
+        self.ModelChoose = QComboBox()
         self.model_dir = pathlib.Path.home().joinpath('.cellpose', 'models')
         models = ['cyto', 'nuclei', 'cyto2']
         self.ModelChoose.addItems(models)
@@ -432,7 +433,7 @@ def make_buttons(self):
         self.ModelChoose.setStyleSheet(self.dropdowns)
         self.ModelChoose.setFont(self.medfont)
         self.l0.addWidget(self.ModelChoose, b, 1,1,1)
-        label = QtGui.QLabel('model: ')
+        label = QLabel('model: ')
         label.setStyleSheet(label_style)
         label.setFont(self.medfont)
         label.setToolTip('there is a <em>cyto</em> model, a new <em>cyto2</em> model from user submissions, and a <em>nuclei</em> model')
@@ -441,7 +442,7 @@ def make_buttons(self):
 
         b+=1
         # choose channel
-        self.ChannelChoose = [QtGui.QComboBox(), QtGui.QComboBox()]
+        self.ChannelChoose = [QComboBox(), QComboBox()]
         self.ChannelChoose[0].addItems(['gray','red','green','blue'])
         self.ChannelChoose[1].addItems(['none','red','green','blue'])
         cstr = ['chan to segment:', 'chan2 (optional): ']
@@ -449,7 +450,7 @@ def make_buttons(self):
             self.ChannelChoose[i].setFixedWidth(70)
             self.ChannelChoose[i].setStyleSheet(self.dropdowns)
             self.ChannelChoose[i].setFont(self.medfont)
-            label = QtGui.QLabel(cstr[i])
+            label = QLabel(cstr[i])
             label.setStyleSheet(label_style)
             label.setFont(self.medfont)
             if i==0:
@@ -464,28 +465,28 @@ def make_buttons(self):
 
         # use inverted image for running cellpose
         b+=1
-        self.invert = QtGui.QCheckBox('invert grayscale')
+        self.invert = QCheckBox('invert grayscale')
         self.invert.setStyleSheet(self.checkstyle)
         self.invert.setFont(self.medfont)
         self.l0.addWidget(self.invert, b,0,1,2)
 
         b+=1
         # recompute model
-        self.ModelButton = QtGui.QPushButton('  run segmentation')
+        self.ModelButton = QPushButton('  run segmentation')
         self.ModelButton.clicked.connect(self.compute_model)
         self.l0.addWidget(self.ModelButton, b,0,1,2)
         self.ModelButton.setEnabled(False)
         self.ModelButton.setStyleSheet(self.styleInactive)
         self.ModelButton.setFont(self.boldfont)
         b+=1
-        self.progress = QtGui.QProgressBar(self)
+        self.progress = QProgressBar(self)
         self.progress.setStyleSheet('color: gray;')
         self.l0.addWidget(self.progress, b,0,1,2)
 
         # post-hoc paramater tuning
 
         b+=1
-        label = QtGui.QLabel('model match threshold:')
+        label = QLabel('model match threshold:')
         label.setToolTip('threshold on gradient match to accept a mask (set lower to get more cells)')
         label.setStyleSheet(label_style)
         label.setFont(self.medfont)
@@ -493,7 +494,7 @@ def make_buttons(self):
 
         b+=1
         self.threshold = 0.4
-        self.threshslider = QtGui.QSlider()
+        self.threshslider = QSlider()
         self.threshslider.setOrientation(QtCore.Qt.Horizontal)
         self.threshslider.setMinimum(1.0)
         self.threshslider.setMaximum(30.0)
@@ -504,14 +505,14 @@ def make_buttons(self):
         self.threshslider.setEnabled(False)
         
         b+=1
-        label = QtGui.QLabel('cell prob threshold:')
+        label = QLabel('cell prob threshold:')
         label.setStyleSheet(label_style)
         label.setFont(self.medfont)
         self.l0.addWidget(label, b, 0,1,2)
         label.setToolTip('cell probability threshold (set lower to get more cells)')
         
         b+=1
-        self.probslider = QtGui.QSlider()
+        self.probslider = QSlider()
         self.probslider.setOrientation(QtCore.Qt.Horizontal)
         self.probslider.setMinimum(-6.0)
         self.probslider.setMaximum(6.0)
@@ -527,14 +528,14 @@ def make_buttons(self):
         line.setStyleSheet('color: white;')
         self.l0.addWidget(line, b,0,1,2)
 
-        self.autobtn = QtGui.QCheckBox('auto-adjust')
+        self.autobtn = QCheckBox('auto-adjust')
         self.autobtn.setStyleSheet(self.checkstyle)
         self.autobtn.setFont(self.medfont)
         self.autobtn.setChecked(True)
         self.l0.addWidget(self.autobtn, b+2,0,1,1)
 
         b+=1
-        label = QtGui.QLabel('Image saturation:')
+        label = QLabel('Image saturation:')
         label.setStyleSheet(self.headings)
         label.setFont(self.boldfont)
         self.l0.addWidget(label, b,0,1,2)
@@ -545,18 +546,18 @@ def make_buttons(self):
         self.slider.setMaximum(255)
         self.slider.setLow(0)
         self.slider.setHigh(255)
-        self.slider.setTickPosition(QtGui.QSlider.TicksRight)
+        self.slider.setTickPosition(QSlider.TicksRight)
         self.l0.addWidget(self.slider, b,1,1,1)
         self.l0.setRowStretch(b, 1)
         
         b+=2
         # add z position underneath
         self.currentZ = 0
-        label = QtGui.QLabel('Z:')
+        label = QLabel('Z:')
         label.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
         label.setStyleSheet(label_style)
         self.l0.addWidget(label, b, 0,1,1)
-        self.zpos = QtGui.QLineEdit()
+        self.zpos = QLineEdit()
         self.zpos.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
         self.zpos.setText(str(self.currentZ))
         self.zpos.returnPressed.connect(self.compute_scale)
@@ -564,7 +565,7 @@ def make_buttons(self):
         self.l0.addWidget(self.zpos, b, 1,1,1)
 
         # add scrollbar underneath
-        self.scroll = QtGui.QScrollBar(QtCore.Qt.Horizontal)
+        self.scroll = QScrollBar(QtCore.Qt.Horizontal)
         self.scroll.setMaximum(10)
         self.scroll.valueChanged.connect(self.move_in_Z)
         self.l0.addWidget(self.scroll, b,3,1,20)
diff --git a/cellpose/gui/guiparts.py b/cellpose/gui/guiparts.py
index 6b9590b..841c514 100644
--- a/cellpose/gui/guiparts.py
+++ b/cellpose/gui/guiparts.py
@@ -1,4 +1,6 @@
 from PyQt5 import QtGui, QtCore, QtWidgets
+from PyQt5.QtGui import QPainter, QPixmap
+from PyQt5.QtWidgets import QApplication, QRadioButton, QWidget, QDialog, QButtonGroup, QSlider, QStyle, QStyleOptionSlider, QGridLayout, QPushButton, QLabel
 import pyqtgraph as pg
 from pyqtgraph import functions as fn
 from pyqtgraph import Point
@@ -7,7 +9,7 @@
 
 def make_quadrants(parent):
     """ make quadrant buttons """
-    parent.quadbtns = QtGui.QButtonGroup(parent)
+    parent.quadbtns = QButtonGroup(parent)
     for b in range(9):
         btn = QuadButton(b, ' '+str(b+1), parent)
         parent.quadbtns.addButton(btn, b)
@@ -16,7 +18,7 @@ def make_quadrants(parent):
         b += 1
     parent.quadbtns.setExclusive(True)
 
-class QuadButton(QtGui.QPushButton):
+class QuadButton(QPushButton):
     """ custom QPushButton class for quadrant plotting
         requires buttons to put into a QButtonGroup (parent.quadbtns)
          allows only 1 button to pressed at a time
@@ -104,29 +106,29 @@ def horizontal_slider_style():
             border-radius: 4px;
             }"""
 
-class ExampleGUI(QtGui.QDialog):
+class ExampleGUI(QDialog):
     def __init__(self, parent=None):
         super(ExampleGUI, self).__init__(parent)
         self.setGeometry(100,100,1300,900)
         self.setWindowTitle('GUI layout')
-        self.win = QtGui.QWidget(self)
-        layout = QtGui.QGridLayout()
+        self.win = QWidget(self)
+        layout = QGridLayout()
         self.win.setLayout(layout)
         guip_path = pathlib.Path.home().joinpath('.cellpose', 'cellpose_gui.png')
         guip_path = str(guip_path.resolve())
-        pixmap = QtGui.QPixmap(guip_path)
-        label = QtGui.QLabel(self)
+        pixmap = QPixmap(guip_path)
+        label = QLabel(self)
         label.setPixmap(pixmap)
         pixmap.scaled
         layout.addWidget(label, 0, 0, 1, 1)
 
-class HelpWindow(QtGui.QDialog):
+class HelpWindow(QDialog):
     def __init__(self, parent=None):
         super(HelpWindow, self).__init__(parent)
         self.setGeometry(100,100,700,800)
         self.setWindowTitle('cellpose help')
-        self.win = QtGui.QWidget(self)
-        layout = QtGui.QGridLayout()
+        self.win = QWidget(self)
+        layout = QGridLayout()
         self.win.setLayout(layout)
         
         text = ('''
@@ -225,20 +227,20 @@ def __init__(self, parent=None):
             <p class="has-line-data" data-line-start="44" data-line-end="45">CHAN TO SEG: this is the channel in which the cytoplasm or nuclei exist</p>
             <p class="has-line-data" data-line-start="46" data-line-end="47">CHAN2 (OPT): if <em>cytoplasm</em> model is chosen, then choose the nuclear channel for this option</p>
             ''')
-        label = QtGui.QLabel(text)
+        label = QLabel(text)
         label.setFont(QtGui.QFont("Arial", 8))
         label.setWordWrap(True)
         layout.addWidget(label, 0, 0, 1, 1)
         self.show()
 
-class TypeRadioButtons(QtGui.QButtonGroup):
+class TypeRadioButtons(QButtonGroup):
     def __init__(self, parent=None, row=0, col=0):
         super(TypeRadioButtons, self).__init__()
         parent.color = 0
         self.parent = parent
         self.bstr = self.parent.cell_types
         for b in range(len(self.bstr)):
-            button = QtGui.QRadioButton(self.bstr[b])
+            button = QRadioButton(self.bstr[b])
             button.setStyleSheet('color: rgb(190,190,190);')
             button.setFont(QtGui.QFont("Arial", 10))
             if b==0:
@@ -253,16 +255,16 @@ def btnpress(self, parent):
        b = self.checkedId()
        self.parent.cell_type = b
 
-class RGBRadioButtons(QtGui.QButtonGroup):
+class RGBRadioButtons(QButtonGroup):
     def __init__(self, parent=None, row=0, col=0):
         super(RGBRadioButtons, self).__init__()
         parent.color = 0
         self.parent = parent
         self.bstr = ["image", "gradXY", "cellprob", "gradZ"]
-        #self.buttons = QtGui.QButtonGroup()
+        #self.buttons = QButtonGroup()
         self.dropdown = []
         for b in range(len(self.bstr)):
-            button = QtGui.QRadioButton(self.bstr[b])
+            button = QRadioButton(self.bstr[b])
             button.setStyleSheet('color: white;')
             button.setFont(QtGui.QFont("Arial", 10))
             if b==0:
@@ -359,7 +361,7 @@ class ImageDraw(pg.ImageItem):
     for controlling the levels and lookup table used to display the image.
     """
 
-    sigImageChanged = QtCore.Signal()
+    sigImageChanged = QtCore.pyqtSignal()
 
     def __init__(self, image=None, viewbox=None, parent=None, **kargs):
         super(ImageDraw, self).__init__()
@@ -534,7 +536,7 @@ def setDrawKernel(self, kernel_size=3):
         self.greenmask = np.concatenate((onmask,offmask,onmask,opamask), axis=-1)
 
 
-class RangeSlider(QtGui.QSlider):
+class RangeSlider(QSlider):
     """ A slider for ranges.
 
         This class provides a dual-slider for ranges, where there is a defined
@@ -553,39 +555,35 @@ def __init__(self, parent=None, *args):
         self._low = self.minimum()
         self._high = self.maximum()
 
-        self.pressed_control = QtGui.QStyle.SC_None
-        self.hover_control = QtGui.QStyle.SC_None
+        self.pressed_control = QStyle.SC_None
+        self.hover_control = QStyle.SC_None
         self.click_offset = 0
 
         self.setOrientation(QtCore.Qt.Vertical)
-        self.setTickPosition(QtGui.QSlider.TicksRight)
-        #self.setStyleSheet(\
-        #        "QSlider::handle:vertical {\
-        #        background-color: cyan;\
-        #        border: 1px solid white;\
-        #        border-radius: 2px;\
-        #        border-color: white;\
-        #        height: 16px;\
-        #        width: 3px;\
-        #        margin: 8px 2; \
-        #        }")
-
-        # set groove color
-        
-        self.opt = QtGui.QStyleOptionSlider()
-        self.opt.orientation=QtCore.Qt.Vertical
-        self.initStyleOption(self.opt)
+        self.setTickPosition(QSlider.TicksRight)
+        self.setStyleSheet(\
+                "QSlider::handle:horizontal {\
+                background-color: white;\
+                border: 1px solid #5c5c5c;\
+                border-radius: 0px;\
+                border-color: black;\
+                height: 8px;\
+                width: 6px;\
+                margin: -8px 2; \
+                }")
+
+
+        #self.opt = QStyleOptionSlider()
+        #self.opt.orientation=QtCore.Qt.Vertical
+        #self.initStyleOption(self.opt)
         # 0 for the low, 1 for the high, -1 for both
         self.active_slider = 0
         self.parent = parent
-        self.show()
-
 
     def level_change(self):
         if self.parent is not None:
             if self.parent.loaded:
-                for z in range(self.parent.NZ):
-                    self.parent.saturation[z] = [self._low, self._high]
+                self.parent.ops_plot['saturation'] = [self._low, self._high]
                 self.parent.update_plot()
 
     def low(self):
@@ -604,47 +602,38 @@ def setHigh(self, high):
 
     def paintEvent(self, event):
         # based on http://qt.gitorious.org/qt/qt/blobs/master/src/gui/widgets/qslider.cpp
-        painter = QtGui.QPainter(self)
-        style = QtGui.QApplication.style()
+        painter = QPainter(self)
+        style = QApplication.style()
 
         for i, value in enumerate([self._low, self._high]):
-            opt = QtWidgets.QStyleOptionSlider()
+            opt = QStyleOptionSlider()
             self.initStyleOption(opt)
 
             # Only draw the groove for the first slider so it doesn't get drawn
             # on top of the existing ones every time
             if i == 0:
-                opt.subControls = QtWidgets.QStyle.SC_SliderGroove | QtWidgets.QStyle.SC_SliderHandle
+                opt.subControls = QStyle.SC_SliderHandle#QStyle.SC_SliderGroove | QStyle.SC_SliderHandle
             else:
-                opt.subControls = QtWidgets.QStyle.SC_SliderHandle
+                opt.subControls = QStyle.SC_SliderHandle
 
             if self.tickPosition() != self.NoTicks:
-                opt.subControls |= QtWidgets.QStyle.SC_SliderTickmarks
+                opt.subControls |= QStyle.SC_SliderTickmarks
 
             if self.pressed_control:
                 opt.activeSubControls = self.pressed_control
-                opt.state |= QtWidgets.QStyle.State_Sunken
+                opt.state |= QStyle.State_Sunken
             else:
                 opt.activeSubControls = self.hover_control
 
             opt.sliderPosition = value
             opt.sliderValue = value
+            style.drawComplexControl(QStyle.CC_Slider, opt, painter, self)
+
 
-            if i==0:
-                pen = QtGui.QPen()
-                pen.setBrush(QtGui.QColor('#2e4f37'))
-                pen.setCapStyle(QtCore.Qt.RoundCap)
-                pen.setWidth(3)
-                painter.setPen(pen)
-                painter.setBrush(QtGui.QColor('#2e4f37'))
-                x1,y1,x2,y2 = event.rect().getCoords()
-                painter.drawRect(event.rect())
-            style.drawComplexControl(QtWidgets.QStyle.CC_Slider, opt, painter, self)
-            
     def mousePressEvent(self, event):
         event.accept()
 
-        style = QtGui.QApplication.style()
+        style = QApplication.style()
         button = event.button()
         # In a normal slider control, when the user clicks on a point in the
         # slider's total range, but not on the slider part of the control the
@@ -652,7 +641,7 @@ def mousePressEvent(self, event):
         # For this control, clicks which are not direct hits will slide both
         # slider parts
         if button:
-            opt = QtGui.QStyleOptionSlider()
+            opt = QStyleOptionSlider()
             self.initStyleOption(opt)
 
             self.active_slider = -1
@@ -671,7 +660,7 @@ def mousePressEvent(self, event):
                     break
 
             if self.active_slider < 0:
-                self.pressed_control = QtGui.QStyle.SC_SliderHandle
+                self.pressed_control = QStyle.SC_SliderHandle
                 self.click_offset = self.__pixelPosToRangeValue(self.__pick(event.pos()))
                 self.triggerAction(self.SliderMove)
                 self.setRepeatAction(self.SliderNoAction)
@@ -679,13 +668,13 @@ def mousePressEvent(self, event):
             event.ignore()
 
     def mouseMoveEvent(self, event):
-        if self.pressed_control != QtGui.QStyle.SC_SliderHandle:
+        if self.pressed_control != QStyle.SC_SliderHandle:
             event.ignore()
             return
 
         event.accept()
         new_pos = self.__pixelPosToRangeValue(self.__pick(event.pos()))
-        opt = QtGui.QStyleOptionSlider()
+        opt = QStyleOptionSlider()
         self.initStyleOption(opt)
 
         if self.active_slider < 0:
@@ -723,9 +712,9 @@ def __pick(self, pt):
 
 
     def __pixelPosToRangeValue(self, pos):
-        opt = QtGui.QStyleOptionSlider()
+        opt = QStyleOptionSlider()
         self.initStyleOption(opt)
-        style = QtGui.QApplication.style()
+        style = QApplication.style()
 
         gr = style.subControlRect(style.CC_Slider, opt, style.SC_SliderGroove, self)
         sr = style.subControlRect(style.CC_Slider, opt, style.SC_SliderHandle, self)
diff --git a/cellpose/gui/io.py b/cellpose/gui/io.py
index 95711b9..cb6a6b5 100644
--- a/cellpose/gui/io.py
+++ b/cellpose/gui/io.py
@@ -9,7 +9,7 @@
 from ..io import imread, imsave, outlines_to_text
 
 try:
-    from PyQt5 import QtGui, QtCore, Qt, QtWidgets
+    from PyQt5.QtWidgets import QFileDialog
     GUI = True
 except:
     GUI = False
@@ -23,7 +23,7 @@
 def _load_image(parent, filename=None):
     """ load image with filename; if None, open QFileDialog """
     if filename is None:
-        name = QtGui.QFileDialog.getOpenFileName(
+        name = QFileDialog.getOpenFileName(
             parent, "Load image"
             )
         filename = name[0]
@@ -131,7 +131,7 @@ def _initialize_images(parent, image, resize, X2):
 def _load_seg(parent, filename=None, image=None, image_file=None):
     """ load *_seg.npy with filename; if None, open QFileDialog """
     if filename is None:
-        name = QtGui.QFileDialog.getOpenFileName(
+        name = QFileDialog.getOpenFileName(
             parent, "Load labelled data", filter="*.npy"
             )
         filename = name[0]
@@ -276,7 +276,7 @@ def _load_seg(parent, filename=None, image=None, image_file=None):
 def _load_masks(parent, filename=None):
     """ load zeros-based masks (0=no cell, 1=cell 1, ...) """
     if filename is None:
-        name = QtGui.QFileDialog.getOpenFileName(
+        name = QFileDialog.getOpenFileName(
             parent, "Load masks (PNG or TIFF)"
             )
         filename = name[0]
diff --git a/cellpose/gui/menus.py b/cellpose/gui/menus.py
index b01f76a..2efbace 100644
--- a/cellpose/gui/menus.py
+++ b/cellpose/gui/menus.py
@@ -1,4 +1,4 @@
-from PyQt5 import QtGui, QtCore, Qt, QtWidgets
+from PyQt5.QtWidgets import QAction
 from . import io
 from .. import models
 from ..io import save_server
@@ -7,51 +7,51 @@ def mainmenu(parent):
     main_menu = parent.menuBar()
     file_menu = main_menu.addMenu("&File")
     # load processed data
-    loadImg = QtGui.QAction("&Load image (*.tif, *.png, *.jpg)", parent)
+    loadImg = QAction("&Load image (*.tif, *.png, *.jpg)", parent)
     loadImg.setShortcut("Ctrl+L")
     loadImg.triggered.connect(lambda: io._load_image(parent))
     file_menu.addAction(loadImg)
 
-    parent.loadMasks = QtGui.QAction("Load &masks (*.tif, *.png, *.jpg)", parent)
+    parent.loadMasks = QAction("Load &masks (*.tif, *.png, *.jpg)", parent)
     parent.loadMasks.setShortcut("Ctrl+M")
     parent.loadMasks.triggered.connect(lambda: io._load_masks(parent))
     file_menu.addAction(parent.loadMasks)
     parent.loadMasks.setEnabled(False)
 
-    loadManual = QtGui.QAction("Load &processed/labelled image (*_seg.npy)", parent)
+    loadManual = QAction("Load &processed/labelled image (*_seg.npy)", parent)
     loadManual.setShortcut("Ctrl+P")
     loadManual.triggered.connect(lambda: io._load_seg(parent))
     file_menu.addAction(loadManual)
 
-    #loadStack = QtGui.QAction("Load &numpy z-stack (*.npy nimgs x nchan x pixels x pixels)", parent)
+    #loadStack = QAction("Load &numpy z-stack (*.npy nimgs x nchan x pixels x pixels)", parent)
     #loadStack.setShortcut("Ctrl+N")
     #loadStack.triggered.connect(lambda: parent.load_zstack(None))
     #file_menu.addAction(loadStack)
 
-    parent.saveSet = QtGui.QAction("&Save masks and image (as *_seg.npy)", parent)
+    parent.saveSet = QAction("&Save masks and image (as *_seg.npy)", parent)
     parent.saveSet.setShortcut("Ctrl+S")
     parent.saveSet.triggered.connect(lambda: io._save_sets(parent))
     file_menu.addAction(parent.saveSet)
     parent.saveSet.setEnabled(False)
 
-    parent.savePNG = QtGui.QAction("Save masks as P&NG", parent)
+    parent.savePNG = QAction("Save masks as P&NG", parent)
     parent.savePNG.setShortcut("Ctrl+N")
     parent.savePNG.triggered.connect(lambda: io._save_png(parent))
     file_menu.addAction(parent.savePNG)
     parent.savePNG.setEnabled(False)
 
-    parent.saveOutlines = QtGui.QAction("Save &Outlines as text for imageJ", parent)
+    parent.saveOutlines = QAction("Save &Outlines as text for imageJ", parent)
     parent.saveOutlines.setShortcut("Ctrl+O")
     parent.saveOutlines.triggered.connect(lambda: io._save_outlines(parent))
     file_menu.addAction(parent.saveOutlines)
     parent.saveOutlines.setEnabled(False)
 
-    parent.saveServer = QtGui.QAction("Send manually labelled data to server", parent)
+    parent.saveServer = QAction("Send manually labelled data to server", parent)
     parent.saveServer.triggered.connect(lambda: save_server(parent))
     file_menu.addAction(parent.saveServer)
     parent.saveServer.setEnabled(False)
 
-    parent.switchBackend = QtGui.QAction("Switch backend to MXNET if installed", parent)
+    parent.switchBackend = QAction("Switch backend to MXNET if installed", parent)
     parent.switchBackend.triggered.connect(lambda: parent.check_gpu(False))
     file_menu.addAction(parent.switchBackend)
     if models.MXNET_ENABLED:
@@ -62,25 +62,25 @@ def mainmenu(parent):
 def editmenu(parent):
     main_menu = parent.menuBar()
     edit_menu = main_menu.addMenu("&Edit")
-    parent.undo = QtGui.QAction('Undo previous mask/trace', parent)
+    parent.undo = QAction('Undo previous mask/trace', parent)
     parent.undo.setShortcut("Ctrl+Z")
     parent.undo.triggered.connect(parent.undo_action)
     parent.undo.setEnabled(False)
     edit_menu.addAction(parent.undo)
 
-    parent.redo = QtGui.QAction('Undo remove mask', parent)
+    parent.redo = QAction('Undo remove mask', parent)
     parent.redo.setShortcut("Ctrl+Y")
     parent.redo.triggered.connect(parent.undo_remove_action)
     parent.redo.setEnabled(False)
     edit_menu.addAction(parent.redo)
 
-    parent.ClearButton = QtGui.QAction('Clear all masks', parent)
+    parent.ClearButton = QAction('Clear all masks', parent)
     parent.ClearButton.setShortcut("Ctrl+0")
     parent.ClearButton.triggered.connect(parent.clear_all)
     parent.ClearButton.setEnabled(False)
     edit_menu.addAction(parent.ClearButton)
 
-    parent.remcell = QtGui.QAction('Remove selected cell (Ctrl+CLICK)', parent)
+    parent.remcell = QAction('Remove selected cell (Ctrl+CLICK)', parent)
     parent.remcell.setShortcut("Ctrl+Click")
     parent.remcell.triggered.connect(parent.remove_action)
     parent.remcell.setEnabled(False)
@@ -90,16 +90,16 @@ def helpmenu(parent):
     main_menu = parent.menuBar()
     help_menu = main_menu.addMenu("&Help")
     
-    checkMKL = QtGui.QAction("Check CPU MKL -- see terminal", parent)
+    checkMKL = QAction("Check CPU MKL -- see terminal", parent)
     checkMKL.triggered.connect(lambda: models.check_mkl(istorch=parent.torch))
     help_menu.addAction(checkMKL)
 
-    openHelp = QtGui.QAction("&Help window", parent)
+    openHelp = QAction("&Help window", parent)
     openHelp.setShortcut("Ctrl+H")
     openHelp.triggered.connect(parent.help_window)
     help_menu.addAction(openHelp)
 
-    openGUI = QtGui.QAction("&GUI layout", parent)
+    openGUI = QAction("&GUI layout", parent)
     openGUI.setShortcut("Ctrl+G")
     openGUI.triggered.connect(parent.gui_window)
     help_menu.addAction(openGUI)
diff --git a/tests/test_train.py b/tests/test_train.py
index 9d05545..bce599c 100644
--- a/tests/test_train.py
+++ b/tests/test_train.py
@@ -6,7 +6,7 @@
 
 os.environ["KMP_DUPLICATE_LIB_OK"]="TRUE"
 
-def test_class_train(data_dir, image_names):
+def test_class_train(data_dir):
     train_dir = str(data_dir.joinpath('2D').joinpath('train'))
     model_dir = str(data_dir.joinpath('2D').joinpath('train').joinpath('models'))
     shutil.rmtree(model_dir, ignore_errors=True)
@@ -18,7 +18,7 @@ def test_class_train(data_dir, image_names):
                                channels=[2,1], save_path=train_dir, n_epochs=10)
     print('>>>> model trained and saved to %s'%cpmodel_path)
         
-def test_cli_train(data_dir, image_names):
+def test_cli_train(data_dir):
     train_dir = str(data_dir.joinpath('2D').joinpath('train'))
     model_dir = str(data_dir.joinpath('2D').joinpath('train').joinpath('models'))
     shutil.rmtree(model_dir, ignore_errors=True)
@@ -29,7 +29,7 @@ def test_cli_train(data_dir, image_names):
         print(e) 
         raise ValueError(e)
 
-def test_cli_train_pretrained(data_dir, image_names):
+def test_cli_train_pretrained(data_dir):
     train_dir = str(data_dir.joinpath('2D').joinpath('train'))
     model_dir = str(data_dir.joinpath('2D').joinpath('train').joinpath('models'))
     shutil.rmtree(model_dir, ignore_errors=True)
