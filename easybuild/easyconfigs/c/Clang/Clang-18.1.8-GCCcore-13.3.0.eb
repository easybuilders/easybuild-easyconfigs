name = 'Clang'
version = '18.1.8'
easyblock = 'EB_LLVM'

homepage = 'https://clang.llvm.org/'
description = """C, C++, Objective-C compiler, based on LLVM.  Does not
 include C++ standard library -- use libstdc++ from GCC."""

# Clang also depends on libstdc++ during runtime, but this dependency is
# already specified as the toolchain.
toolchain = {'name': 'GCCcore', 'version': '13.3.0'}

source_urls = ["https://github.com/llvm/llvm-project/releases/download/llvmorg-%(version)s"]
sources = [
    'llvm-project-%(version)s.src.tar.xz',
]
checksums = ['0b58557a6d32ceee97c8d533a59b9212d87e0fc4d2833924eb6c611247db2f2a']

builddependencies = [
    ('CMake', '3.29.3'),
    ('Perl', '5.38.2'),
    # Including Python bindings would require this as a runtime dep
    ('Python', '3.12.3'),
    # For testing
    ('psutil', '6.0.0'),
    ('lit', '18.1.8'),
]
dependencies = [
    # since Clang is a compiler, binutils is a runtime dependency too
    ('binutils', '2.42'),
    ('hwloc', '2.10.0'),
    ('libxml2', '2.12.7'),
    ('ncurses', '6.5'),
    ('GMP', '6.3.0'),
    ('Z3', '4.13.0'),
]

# enabling RTTI makes the flang compiler need to link to libc++ so instead of
#   flang-new -flang-experimental-exec -fopenmp hello_openmp.f90
# you would need
#   flang-new -flang-experimental-exec -fopenmp hello_openmp.f90 -l c++
enable_rtti = False

assertions = True
build_clang_extras = True
build_lld = True
build_lldb = True
build_runtimes = True
build_shared_libs = True
python_bindings = False
use_polly = True

moduleclass = 'compiler'
