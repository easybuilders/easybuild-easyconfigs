name = 'Clang'
easyblock = 'EB_LLVM'
version = '21.0.0'
versionsuffix = '-CUDA-%(cudaver)s'
local_commit = '3bd3e06' # 'a66376b0dc3b'

homepage = 'https://clang.llvm.org/'
description = """C, C++, Objective-C compiler, based on LLVM.  Does not
 include C++ standard library -- use libstdc++ from GCC."""

# Clang also depends on libstdc++ during runtime, but this dependency is
# already specified as the toolchain.
toolchain = {'name': 'GCCcore', 'version': '13.3.0'}

sources = [{
    'source_urls': ["https://github.com/llvm/llvm-project/archive"],
    'download_filename': '%s.tar.gz' % local_commit,
    'filename': 'llvm-project-%s.tar.gz' % version,
}]

#checksums = ['10eb1d36aabbc5d31c9d2af27844f51638d40be28975a4ab20ad13609f7da23d']

builddependencies = [
    ('CMake', '3.29.3'),
    ('Perl', '5.38.2'),
    # Including Python bindings would require this as a runtime dep
    ('Python', '3.12.3'),
]
dependencies = [
    # since Clang is a compiler, binutils is a runtime dependency too
    ('binutils', '2.42'),
    ('hwloc', '2.10.0'),
    ('libxml2', '2.12.7'),
    ('ncurses', '6.5'),
    ('GMP', '6.3.0'),
    ('Z3', '4.13.0'),
    ('CUDA', '12.6.0', '', SYSTEM),
]

# enabling RTTI makes the flang compiler need to link to libc++ so instead of
#   flang-new -flang-experimental-exec -fopenmp hello_openmp.f90
# you would need
#   flang-new -flang-experimental-exec -fopenmp hello_openmp.f90 -l c++
enable_rtti = False

assertions = True
build_clang_extras = True
build_lld = True
build_lldb = True
build_runtimes = True
build_shared_libs = True
python_bindings = False
skip_all_tests = True
use_polly = True

moduleclass = 'compiler'
