name = 'LAMMPS'
version = '7Aug2019'
local_python_versionsuffix = '-Python-%(pyver)s'
versionsuffix = local_python_versionsuffix
versionsuffix += '-kokkos'

homepage = 'https://lammps.sandia.gov/'
description = """LAMMPS is a classical molecular dynamics code, and an acronym
for Large-scale Atomic/Molecular Massively Parallel Simulator. LAMMPS has
potentials for solid-state materials (metals, semiconductors) and soft matter
(biomolecules, polymers) and coarse-grained or mesoscopic systems. It can be
used to model atoms or, more generically, as a parallel particle simulator at
the atomic, meso, or continuum scale. LAMMPS runs on single processors or in
parallel using message-passing techniques and a spatial-decomposition of the
simulation domain. The code is designed to be easy to modify or extend with new
functionality.
"""

toolchain = {'name': 'foss', 'version': '2019b'}
toolchainopts = {'openmp': True, 'usempi': True, 'cstd': 'c++11'}

# 'https://github.com/lammps/lammps/archive/'
source_urls = [GITHUB_LOWER_SOURCE]
sources = [
    'stable_%(version)s.tar.gz',
    {'filename': 'lammps_vs_yaff_test_single_point_energy.py', 'extract_cmd': "cp %s %(builddir)s"},
]
patches = ['%(name)s-%(version)s_EPYC.patch']
checksums = [
    '5380c1689a93d7922e3d65d9c186401d429878bb3cbe9a692580d3470d6a253f',  # stable_7Aug2019.tar.gz
    'c28fa5a1ea9608e4fd8686937be501c3bed8cc03ce1956f1cf0a1efce2c75349',  # lammps_vs_yaff_test_single_point_energy.py
    '5cc5d2498f45d46569eb325aea5c217867f1afd95ee833fd0139f22e80431b86',  # LAMMPS-7Aug2019_EPYC.patch
]

local_source_dir_name = '%(namelower)s-%(version)s'

builddependencies = [
    ('CMake', '3.15.3'),
    ('pkg-config', '0.29.2'),
    ('archspec', '0.1.0', local_python_versionsuffix),
]

dependencies = [
    ('Python', '3.7.4'),
    ('libpng', '1.6.37'),
    ('libjpeg-turbo', '2.0.3'),
    ('netCDF', '4.7.1'),
    ('GSL', '2.6'),
    ('zlib', '1.2.11'),
    ('gzip', '1.10'),
    ('cURL', '7.66.0'),
    ('HDF5', '1.10.5'),
    ('tbb', '2019_U9'),
    ('PCRE', '8.43'),
    ('libxml2', '2.9.9'),
    ('FFmpeg', '4.2.1'),
    ('Voro++', '0.4.6'),
    ('kim-api', '2.1.3'),
    ('Eigen', '3.3.7', '', SYSTEM),
    ('yaff', '1.6.0', local_python_versionsuffix),
    ('PLUMED', '2.5.3', local_python_versionsuffix),
]

# To use additional custom configuration options, use the 'configopts' easyconfig parameter
# See docs and lammps easyblock for more information.
# https://github.com/lammps/lammps/blob/master/cmake/README.md#lammps-configuration-options
# configopts = " "

# auto-enabled by easyblock
# 'GPU'    - if cuda package is present and kokkos is disabled
# 'KOKKOS' - if kokkos is enabled (by default)
#
# not enabled (yet), needs more work/additional dependencies:
# 'LATTE', - https://lammps.sandia.gov/doc/Build_extras.html#latte-package
# 'MSCG',  - https://lammps.sandia.gov/doc/Build_extras.html#mscg-package
general_packages = [
    'ASPHERE', 'BODY', 'CLASS2', 'COLLOID', 'COMPRESS', 'CORESHELL', 'DIPOLE',
    'GRANULAR', 'KIM', 'KSPACE', 'MANYBODY', 'MC', 'MESSAGE', 'MISC',
    'MOLECULE', 'MPIIO', 'PERI', 'POEMS', 'PYTHON', 'QEQ', 'REPLICA', 'RIGID',
    'SHOCK', 'SNAP', 'SPIN', 'SRD', 'VORONOI',
]

# not enabled (yet), needs more work/additional dependencies:
# ADIOS - https://lammps.sandia.gov/doc/Build_extras.html#user-adios-package
# AWPMD - https://lammps.sandia.gov/doc/Build_extras.html#user-awpmd-package
# QUIP  - https://lammps.sandia.gov/doc/Build_extras.html#user-quip-package
# SCAFACOS - https://lammps.sandia.gov/doc/Build_extras.html#user-scafacos-package
# VTK - https://lammps.sandia.gov/doc/Build_extras.html#user-vtk-package
user_packages = [
    'ATC', 'BOCS', 'CGDNA', 'CGSDK', 'COLVARS', 'DIFFRACTION', 'DPD', 'DRUDE',
    'EFF', 'FEP', 'H5MD', 'LB', 'MANIFOLD', 'MEAMC', 'MESO', 'MGPT', 'MISC',
    'MOFFF', 'MOLFILE', 'NETCDF', 'PHONON', 'PLUMED', 'PTM', 'QTB', 'REAXC',
    'SMD', 'SMTBQ', 'SPH', 'TALLY', 'UEF', 'YAFF',
]

enhance_sanity_check = True

# run short test case to make sure installation doesn't produce blatently incorrect results;
# this catches a problem where having the USER-INTEL package enabled causes trouble when installing with intel/2019b
sanity_check_commands = ["cd %(builddir)s && python lammps_vs_yaff_test_single_point_energy.py"]

moduleclass = 'chem'
