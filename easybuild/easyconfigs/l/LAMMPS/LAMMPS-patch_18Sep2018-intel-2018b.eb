easyblock = 'CMakeMake'

name = 'LAMMPS'
version = 'patch_18Sep2018'

homepage = 'http://lammps.sandia.gov/'
description = """LAMMPS is a classical molecular dynamics code, and an acronym
for Large-scale Atomic/Molecular Massively Parallel Simulator. LAMMPS has
potentials for solid-state materials (metals, semiconductors) and soft matter
(biomolecules, polymers) and coarse-grained or mesoscopic systems. It can be
used to model atoms or, more generically, as a parallel particle simulator at
the atomic, meso, or continuum scale. LAMMPS runs on single processors or in
parallel using message-passing techniques and a spatial-decomposition of the
simulation domain. The code is designed to be easy to modify or extend with new
functionality.
"""


toolchain = {'name': 'intel', 'version': '2018b'}
toolchainopts = {'openmp': True, 'cstd': 'c++11'}

sources = ['%(version)s.tar.gz']
source_urls = ['https://github.com/lammps/lammps/archive/']

builddependencies = [
    ('CMake', '3.12.1'),
    ('pkg-config', '0.29.2')
]

dependencies = [
    ('Python', '2.7.15'),
    ('libpng', '1.6.34'),
    ('libjpeg-turbo', '2.0.0'),
    ('netCDF', '4.6.1'),
    ('GSL', '2.5'),
    ('zlib', '1.2.11'),
    ('gzip', '1.9'),
    ('HDF5', '1.10.2'),
    ('tbb', '2018_U5'),
    ('CUDA', '10.0.130', '', True)
]

separate_build_dir = True

# We need to give a short path to the sources otherwise we trigger an "Argument list too long" error from Kokkos
# We know things are built in a name/version/software subdir, so lets make a link a few dirs up
short_dir = '%(builddir)s/../../../'
short_sources = short_dir + '%(namelower)s-%(version)s'
# CMakeLists.txt is in the cmake subdir
srcdir = short_sources + '/cmake'

# Make the symlink to solve our long path problem
preconfigopts = "ln -sf %(builddir)s/%(namelower)s-%(version)s " + "%s &&" % short_sources 

# Initialise configopts so we can comment out at will below
configopts = ""

parallelisation_packages = ['BUILD_MPI', 'BUILD_OMP', 'PKG_KOKKOS', 'PKG_OPT', 'PKG_USER-OMP', 'PKG_USER-INTEL', 'PKG_GPU']

configuration_options = ['BUILD_LIB', 'BUILD_EXE', 'BUILD_SHARED_LIBS']

# Blacklist because of deps
# USER-SMD PKG_USER-QUIP PKG_LATTE PKG_USER-QMMM PKG_USER-VTK PKG_KIM PKG_MSCG

general_packages = ['PKG_ASPHERE', 'PKG_BODY', 'PKG_CLASS2', 'PKG_COLLOID', 'PKG_COMPRESS', 'PKG_CORESHELL',
                    'PKG_DIPOLE', 'PKG_GRANULAR', 'PKG_KSPACE', 'PKG_MANYBODY', 'PKG_MC', 'PKG_MEAM', 'PKG_MISC',
                    'PKG_MOLECULE', 'PKG_PERI', 'PKG_QEQ', 'PKG_REAX', 'PKG_REPLICA', 'PKG_RIGID', 'PKG_SHOCK',
                    'PKG_SNAP', 'PKG_SRD']

other_packages = ['PKG_PYTHON', 'PKG_MPIIO', 'PKG_POEMS']

user_packages = ['PKG_USER-ATC', 'PKG_USER-AWPMD', 'PKG_USER-CGDNA', 'PKG_USER-CGSDK', 'PKG_USER-COLVARS',
                 'PKG_USER-DIFFRACTION', 'PKG_USER-DPD', 'PKG_USER-DRUDE', 'PKG_USER-EFF', 'PKG_USER-FEP',
                 'PKG_USER-H5MD', 'PKG_USER-LB', 'PKG_USER-MANIFOLD', 'PKG_USER-MEAMC', 'PKG_USER-MESO',
                 'PKG_USER-MGPT', 'PKG_USER-MISC', 'PKG_USER-MOFFF', 'PKG_USER-MOLFILE', 'PKG_USER-NETCDF',
                 'PKG_USER-PHONON', 'PKG_USER-QTB', 'PKG_USER-REAXC',
                 'PKG_USER-SMTBQ', 'PKG_USER-SPH', 'PKG_USER-TALLY', 'PKG_USER-UEF']

packages_opts = ' '.join("-D%s=on" % item for item in parallelisation_packages + general_packages + other_packages
                         + user_packages + configuration_options)

kspace_opts = ['FFT' + '=MKL', 'FFT_PACK' + '=array']

gpu_opts = ['GPU_API' + '=cuda', 'GPU_ARCH' + '=sm_37', 'CUDPP_OPT' + '=on']

optional_deps = ['WITH_JPEG', 'WITH_PNG', 'WITH_GZIP']

specific_opts = ' '.join("-D%s" % item for item in kspace_opts + gpu_opts)
other_opts = ' '.join("-D%s=yes" % item for item in optional_deps)

configopts += packages_opts + ' ' + other_opts + ' ' + specific_opts 

# Kokkos options:
# Need to use the Kokkos wrapper if we are using CUDA
configopts += ' -DCMAKE_CXX_COMPILER="%(builddir)s/%(namelower)s-%(version)s/lib/kokkos/bin/nvcc_wrapper" '
# and tell the wrapper which c++ compiler to use
configopts += ' -DCMAKE_CXX_FLAGS="-ccbin $CXX $CXXFLAGS" '
# Set the architecture specifics
configopts += ' -DKOKKOS_ENABLE_OPENMP=yes -DKOKKOS_ENABLE_CUDA=yes -DKOKKOS_ARCH="HSW;Kepler37" '
# configopts += ' -DKOKKOS_ENABLE_OPENMP=yes -DKOKKOS_ARCH="HSW"'

# remove the symlink to tidy up
postinstallcmds = ["rm %s" % short_sources]

pythonpath = 'lib/python%(pyshortver)s/site-packages'
modextrapaths = {'PYTHONPATH': pythonpath}

sanity_check_paths = {
    'files': ['include/lammps/library.h', 'bin/lmp', 'lib64/liblammps.%s' % SHLIB_EXT],
    'dirs': [pythonpath],
}

moduleclass = 'chem'

