import subprocess as _subprocess  # NOQA
import os as _os

name = 'LAMMPS'
version = '29Oct2020'
versionsuffix = '-kokkos'

homepage = 'https://lammps.sandia.gov/'
description = """LAMMPS is a classical molecular dynamics code, and an acronym
for Large-scale Atomic/Molecular Massively Parallel Simulator. LAMMPS has
potentials for solid-state materials (metals, semiconductors) and soft matter
(biomolecules, polymers) and coarse-grained or mesoscopic systems. It can be
used to model atoms or, more generically, as a parallel particle simulator at
the atomic, meso, or continuum scale. LAMMPS runs on single processors or in
parallel using message-passing techniques and a spatial-decomposition of the
simulation domain. The code is designed to be easy to modify or extend with new
functionality.
"""

toolchain = {'name': 'fosscuda', 'version': '2020b'}
toolchainopts = {'openmp': True, 'usempi': True, 'cstd': 'c++11'}

# 'https://github.com/lammps/lammps/archive/'
source_urls = [GITHUB_LOWER_SOURCE]
sources = [
    'stable_%(version)s.tar.gz',
    {'filename': 'lammps_vs_yaff_test_single_point_energy.py', 'extract_cmd': "cp %s %(builddir)s"},
]
patches = ['LAMMPS-29Oct2020_VTK9.patch']
checksums = [
    '759705e16c1fedd6aa6e07d028cc0c78d73c76b76736668420946a74050c3726',  # stable_29Oct2020.tar.gz
    'c28fa5a1ea9608e4fd8686937be501c3bed8cc03ce1956f1cf0a1efce2c75349',  # lammps_vs_yaff_test_single_point_energy.py
    '1baf5c1509e945b4a4aa1ea08ac3799f55d101bef824aa5bddbf759491491351',  # LAMMPS-29Oct2020_VTK9.patch
]

local_source_dir_name = '%(namelower)s-%(version)s'

builddependencies = [
    ('CMake', '3.18.4'),
    ('pkg-config', '0.29.2'),
    ('archspec', '0.1.0'),
]

dependencies = [
    ('Python', '3.8.6'),
    ('libpng', '1.6.37'),
    ('libjpeg-turbo', '2.0.5'),
    ('netCDF', '4.7.4'),
    ('GSL', '2.6'),
    ('zlib', '1.2.11'),
    ('gzip', '1.10'),
    ('cURL', '7.72.0'),
    ('HDF5', '1.10.7'),
    ('tbb', '2020.3'),
    ('PCRE', '8.44'),
    ('libxml2', '2.9.10'),
    ('FFmpeg', '4.3.1'),
    ('Voro++', '0.4.6'),
    ('kim-api', '2.2.1'),
    ('Eigen', '3.3.9'),
    ('yaff', {'arch=x86_64': '1.6.0', 'arch=POWER': False}),
    ('PLUMED', '2.6.2'),
    ('ScaFaCoS', {'arch=x86_64': '1.0.1', 'arch=POWER': False}),
    ('VTK', '9.0.1'),
]

# To use additional custom configuration options, use the 'configopts' easyconfig parameter
# See docs and lammps easyblock for more information.
# https://github.com/lammps/lammps/blob/master/cmake/README.md#lammps-configuration-options
# The docs build with a python virtualenv that doesn't seem to work in Python 3.8 - so disable them.
configopts = "-DBUILD_DOC=no "

# default options use libtbbmalloc.so (ASCII text file pointing to libtbbmalloc.so.2), which nvlink fails to open
configopts += "-DTBB_MALLOC_LIBRARY=$EBROOTTBB/lib/libtbbmalloc.so.2 "

# auto-enabled by easyblock
# 'GPU'    - if cuda package is present and kokkos is disabled
# 'KOKKOS' - if kokkos is enabled (by default)
#
# not enabled (yet), needs more work/additional dependencies:
# 'LATTE', - https://lammps.sandia.gov/doc/Build_extras.html#latte-package
# 'MSCG',  - https://lammps.sandia.gov/doc/Build_extras.html#mscg-package
general_packages = [
    'ASPHERE', 'BODY', 'CLASS2', 'COLLOID', 'COMPRESS', 'CORESHELL', 'DIPOLE',
    'GRANULAR', 'KIM', 'KSPACE', 'MANYBODY', 'MC', 'MESSAGE', 'MISC',
    'MOLECULE', 'MPIIO', 'PERI', 'POEMS', 'PYTHON', 'QEQ', 'REPLICA', 'RIGID',
    'SHOCK', 'SNAP', 'SPIN', 'SRD', 'VORONOI',
]

# not enabled (yet), needs more work/additional dependencies:
# ADIOS - https://lammps.sandia.gov/doc/Build_extras.html#user-adios-package
# AWPMD - https://lammps.sandia.gov/doc/Build_extras.html#user-awpmd-package
# QUIP  - https://lammps.sandia.gov/doc/Build_extras.html#user-quip-package
# SCAFACOS (listed below) will only be enabled if ScaFaCoS is a dependency (I.e. on x86_64 only)
# YAFF(listed below) will only be enabled if yaff is a dependency (I.e. on x86_64 only)
user_packages = [
    'ATC', 'BOCS', 'CGDNA', 'CGSDK', 'COLVARS', 'DIFFRACTION', 'DPD', 'DRUDE',
    'EFF', 'FEP', 'H5MD', 'LB', 'MANIFOLD', 'MEAMC', 'MESODPD', 'MESONT', 'MGPT', 'MISC',
    'MOFFF', 'MOLFILE', 'NETCDF', 'PHONON', 'PLUMED', 'PTM', 'QTB', 'REAXC',
    'SCAFACOS', 'SDPD', 'SMD', 'SMTBQ', 'SPH', 'TALLY', 'UEF', 'YAFF', 'VTK'
]

# Specify this on the command line or here
#   cuda_compute_capabilities = ["7.0"]
#   --cuda-compute-capabilities=7.0
# The easyblock takes the highest number if you specify a list in the easyconfig, even if the GPU doesn't support it.

_arch = _subprocess.check_output(['uname', '-m'], universal_newlines=True).strip()
_cpu = _os.environ.get('BB_CPU')
if _arch == 'ppc64le':
    cuda_compute_capabilities = ["7.0"]
else:
    if _cpu == 'haswell':
        cuda_compute_capabilities = ["6.0"]
    else:
        cuda_compute_capabilities = ["8.0"]

enhance_sanity_check = True

# run short test case to make sure installation doesn't produce blatently incorrect results;
# this catches a problem where having the USER-INTEL package enabled causes trouble when installing with intel/2019b
sanity_check_commands = ["cd %(builddir)s && python lammps_vs_yaff_test_single_point_energy.py"]

moduleclass = 'chem'
