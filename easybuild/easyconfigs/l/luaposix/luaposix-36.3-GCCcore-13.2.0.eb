easyblock = 'ConfigureMake'

name = 'luaposix'
version = '36.3'

homepage = 'http://luaposix.github.io/luaposix'
description = """
A library binding various POSIX APIs. POSIX is the IEEE Portable Operating System
 Interface standard. luaposix is based on lposix.
"""

toolchain = {'name': 'GCCcore', 'version': '13.2.0'}

source_urls = ['https://github.com/%(name)s/%(name)s/archive/refs/tags/']
sources = ['v%(version)s.tar.gz']
checksums = ['82cd9a96c41a4a3205c050206f0564ff4456f773a8f9ffc9235ff8f1907ca5e6']

builddependencies = [
    ('binutils', '2.40'),
]
dependencies = [
    ('Lua', '5.4.6'),
]

skipsteps = [
    'configure',
    'build',
]
install_cmd = "build-aux/luke package=%(name)s version=%(version)s PREFIX=%(installdir)s LUA=$EBROOTLUA/bin/lua && "
install_cmd += "build-aux/luke install --quiet INST_LIBDIR=%(installdir)s/lib INST_LUADIR=%(installdir)s/lib/lua"

sanity_check_paths = {
    'files': ['lib/lua/posix/init.lua'],
    'dirs': ['lib/lua/posix'],
}

sanity_check_commands = ['lua -e \'local posix = require("posix"); print(posix.uname())\'']

# Lua supports extensions via the path-like variables below
# They syntax is different though, ';' is the separator and ';;' tells it to (also) look in the default locations.
# Ideally we would like direct support, or as a workaround support '%(installdir)s/lib/?.so;${LUA_CPATH:-;}'
# but none of that is currently supported (and there are no defaults for non existent variables, so we can't even
# try to use LUA_PATH and have extra ';'s at the end even though that could work).
# As things stand we have no choice but to just set these variables. 
modextravars = {
    'LUA_PATH': '%(installdir)s/lib/lua/?/init.lua;%(installdir)s/lib/lua/?.lua;;',
    'LUA_CPATH': '%(installdir)s/lib/?.so;;',
}

moduleclass = 'lang'
