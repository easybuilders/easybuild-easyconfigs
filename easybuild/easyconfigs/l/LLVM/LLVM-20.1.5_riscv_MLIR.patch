# Author: julian.morillo@bsc.es
# Disable problematic MLIR Runner tests on RISC-V.
# Failures on RISC-V are due to missing soft-float helper symbols (like __addsf3), 
# which is a known issue when running LLVM's JIT on platforms like RISC-V.
diff -Naur mlir-ORIG/test/mlir-runner/async-func.mlir mlir/test/mlir-runner/async-func.mlir
--- mlir-ORIG/test/mlir-runner/async-func.mlir	2025-07-21 12:45:58.452247073 +0200
+++ mlir/test/mlir-runner/async-func.mlir	2025-07-21 12:47:13.188230321 +0200
@@ -11,6 +11,8 @@
 // FIXME: Windows does not have aligned_alloc
 // UNSUPPORTED: system-windows
 
+// UNSUPPORTED: riscv64
+
 async.func @async_func_empty() -> !async.token {
   return
 }
diff -Naur mlir-ORIG/test/mlir-runner/async-value.mlir mlir/test/mlir-runner/async-value.mlir
--- mlir-ORIG/test/mlir-runner/async-value.mlir	2025-07-21 12:45:58.452247073 +0200
+++ mlir/test/mlir-runner/async-value.mlir	2025-07-21 12:47:58.548230401 +0200
@@ -11,6 +11,8 @@
 // FIXME: Windows does not have aligned_alloc
 // UNSUPPORTED: system-windows
 
+// UNSUPPORTED: riscv64
+
 func.func @main() {
 
   // ------------------------------------------------------------------------ //
diff -Naur mlir-ORIG/test/mlir-runner/bare-ptr-call-conv.mlir mlir/test/mlir-runner/bare-ptr-call-conv.mlir
--- mlir-ORIG/test/mlir-runner/bare-ptr-call-conv.mlir	2025-07-21 12:45:58.452247073 +0200
+++ mlir/test/mlir-runner/bare-ptr-call-conv.mlir	2025-07-21 12:49:57.348231865 +0200
@@ -5,6 +5,8 @@
 // one. 'main' calls 'simple_add1_add2_test' with {1, 1} and {2, 2} so {2, 2}
 // and {4, 4} are the expected outputs.
 
+// UNSUPPORTED: riscv64
+
 func.func @simple_add1_add2_test(%arg0: memref<2xf32>, %arg1: memref<2xf32>) {
   %c2 = arith.constant 2 : index
   %c0 = arith.constant 0 : index
diff -Naur mlir-ORIG/test/mlir-runner/copy.mlir mlir/test/mlir-runner/copy.mlir
--- mlir-ORIG/test/mlir-runner/copy.mlir	2025-07-21 12:45:58.452247073 +0200
+++ mlir/test/mlir-runner/copy.mlir	2025-07-21 12:50:17.704231606 +0200
@@ -2,6 +2,7 @@
 // RUN: | mlir-runner -e main -entry-point-result=void \
 // RUN: -shared-libs=%mlir_runner_utils,%mlir_c_runner_utils \
 // RUN: | FileCheck %s
+// UNSUPPORTE: riscv64
 
 func.func private @printMemrefF32(memref<*xf32>) attributes { llvm.emit_c_interface }
 
diff -Naur mlir-ORIG/test/mlir-runner/expand-arith-ops.mlir mlir/test/mlir-runner/expand-arith-ops.mlir
--- mlir-ORIG/test/mlir-runner/expand-arith-ops.mlir	2025-07-21 12:45:58.452247073 +0200
+++ mlir/test/mlir-runner/expand-arith-ops.mlir	2025-07-21 12:51:02.568230790 +0200
@@ -4,6 +4,7 @@
 // RUN:     -shared-libs=%mlir_c_runner_utils  \
 // RUN:     -shared-libs=%mlir_runner_utils    \
 // RUN: | FileCheck %s
+// UNSUPPORTED: riscv64
 
 func.func @trunc_bf16(%a : f32) {
   %b = arith.truncf %a : f32 to bf16
diff -Naur mlir-ORIG/test/mlir-runner/global-constructors.mlir mlir/test/mlir-runner/global-constructors.mlir
--- mlir-ORIG/test/mlir-runner/global-constructors.mlir	2025-07-21 12:45:58.452247073 +0200
+++ mlir/test/mlir-runner/global-constructors.mlir	2025-07-21 12:52:18.376232300 +0200
@@ -1,4 +1,4 @@
-// UNSUPPORTED: target=aarch64{{.*}}, target=arm64{{.*}}
+// UNSUPPORTED: target=aarch64{{.*}}, target=arm64{{.*}}, target=riscv64{{.*}
 // RUN: mlir-runner %s -e entry -entry-point-result=void  \
 // RUN: -shared-libs=%mlir_c_runner_utils | \
 // RUN: FileCheck %s
diff -Naur mlir-ORIG/test/mlir-runner/math-polynomial-approx.mlir mlir/test/mlir-runner/math-polynomial-approx.mlir
--- mlir-ORIG/test/mlir-runner/math-polynomial-approx.mlir	2025-07-21 12:45:58.452247073 +0200
+++ mlir/test/mlir-runner/math-polynomial-approx.mlir	2025-07-21 12:53:44.952235767 +0200
@@ -1,3 +1,4 @@
+// UNSUPPORTED: target=riscv64{{.*}
 // RUN:   mlir-opt %s -pass-pipeline="builtin.module(func.func(test-math-polynomial-approximation),convert-vector-to-scf,convert-scf-to-cf,convert-vector-to-llvm,convert-to-llvm,reconcile-unrealized-casts)" \
 // RUN: | mlir-runner                                                      \
 // RUN:     -e main -entry-point-result=void -O0                               \
diff -Naur mlir-ORIG/test/mlir-runner/memref-reshape.mlir mlir/test/mlir-runner/memref-reshape.mlir
--- mlir-ORIG/test/mlir-runner/memref-reshape.mlir	2025-07-21 12:45:58.452247073 +0200
+++ mlir/test/mlir-runner/memref-reshape.mlir	2025-07-21 12:54:12.424236199 +0200
@@ -1,3 +1,4 @@
+// UNSUPPORTED: target=riscv64{{.*}
 // RUN: mlir-opt %s -pass-pipeline="builtin.module(func.func(convert-scf-to-cf,memref-expand,convert-arith-to-llvm),finalize-memref-to-llvm,convert-func-to-llvm,convert-cf-to-llvm,reconcile-unrealized-casts)" \
 // RUN: | mlir-runner -e main -entry-point-result=void \
 // RUN: -shared-libs=%mlir_runner_utils,%mlir_c_runner_utils \
diff -Naur mlir-ORIG/test/mlir-runner/sgemm-naive-codegen.mlir mlir/test/mlir-runner/sgemm-naive-codegen.mlir
--- mlir-ORIG/test/mlir-runner/sgemm-naive-codegen.mlir	2025-07-21 12:45:58.452247073 +0200
+++ mlir/test/mlir-runner/sgemm-naive-codegen.mlir	2025-07-21 12:54:36.584236767 +0200
@@ -1,3 +1,4 @@
+// UNSUPPORTED: target=riscv64{{.*}
 // RUN: mlir-opt -pass-pipeline="builtin.module(func.func(convert-linalg-to-loops,lower-affine,convert-scf-to-cf,convert-arith-to-llvm),convert-vector-to-llvm,finalize-memref-to-llvm,convert-func-to-llvm,convert-cf-to-llvm,reconcile-unrealized-casts)" %s | mlir-runner -O3 -e main -entry-point-result=void -shared-libs=%mlir_c_runner_utils | FileCheck %s
 
 func.func @main() {
diff -Naur mlir-ORIG/test/mlir-runner/test-expand-math-approx.mlir mlir/test/mlir-runner/test-expand-math-approx.mlir
--- mlir-ORIG/test/mlir-runner/test-expand-math-approx.mlir	2025-07-21 12:45:58.456247070 +0200
+++ mlir/test/mlir-runner/test-expand-math-approx.mlir	2025-07-21 12:55:53.592239897 +0200
@@ -1,3 +1,4 @@
+// UNSUPPORTED: target=riscv64{{.*}
 // RUN:   mlir-opt %s -pass-pipeline="builtin.module(func.func(test-expand-math),convert-vector-to-scf,convert-scf-to-cf,convert-vector-to-llvm,convert-to-llvm,reconcile-unrealized-casts)" \
 // RUN: | mlir-runner                                                      \
 // RUN:     -e main -entry-point-result=void -O0                               \
