name = 'LLVM'
version = '20.1.5'


homepage = "https://llvm.org/"
description = """The LLVM Core libraries provide a modern source- and target-independent
 optimizer, along with code generation support for many popular CPUs
 (as well as some less common ones!) These libraries are built around a well
 specified code representation known as the LLVM intermediate representation
 ("LLVM IR"). The LLVM Core libraries are well documented, and it is
 particularly easy to invent your own language (or port an existing compiler)
 to use LLVM as an optimizer and code generator."""

toolchain = {'name': 'GCCcore', 'version': '13.2.0'}
toolchainopts = {
    # 'cstd': 'gnu++11',
    'pic': True
}

source_urls = ['https://github.com/llvm/llvm-project/releases/download/llvmorg-%(version)s/']
sources = [
    'llvm-project-%(version)s.src.tar.xz',
]
patches = [
    'LLVM-18.1.8_envintest.patch',
    'LLVM-19.1.7_libomptarget_tests.patch',
    'LLVM-19.1.7_clang_rpathwrap_test.patch',
    'LLVM-20.1.5-GCCcore-13.2.0_riscv_optimization_remark.patch',
    'LLVM-20.1.5-GCCcore-13.2.0_riscv_fast_math.patch',
    'LLVM-20.1.5-GCCcore-13.2.0_riscv_debug_complex_1.patch',
    'LLVM-20.1.5-GCCcore-13.2.0_riscv_execution_engine.patch',
    'LLVM-20.1.5-GCCcore-13.2.0_riscv_MLIR.patch',
]
# riscv_debug_complex_1.patch: Flang's LLVM CodeGen backend (in version 20.1.5) does not support returning
# complex numbers of certain precisions (like complex(16) or complex(32)) on RISC-V target.
# This is a known limitation in current Flang/LLVM support.

# riscv_execution_engine.patch: Skip the test on RISC-V, which is appropriate since JIT execution via MLIR's
# ExecutionEngine is not reliably supported on this architecture in this LLVM version.

# riscv_MLIR.patch: Disable problematic MLIR Runner tests on RISC-V.
# Failures on RISC-V are due to missing soft-float helper symbols (like __addsf3),
# which is a known issue when running LLVM's JIT on platforms like RISC-V.

checksums = [
    {'llvm-project-20.1.5.src.tar.xz': 'a069565cd1c6aee48ee0f36de300635b5781f355d7b3c96a28062d50d575fa3e'},
    {'LLVM-18.1.8_envintest.patch': '8e25dfab8a29a860717b4bd2d8cdd0e795433766d7fffbda32d06a2bde47058d'},
    {'LLVM-19.1.7_libomptarget_tests.patch': '79a67c118d034cfb74e255696369150c73432d2b422f4834efacb26f7904edbf'},
    {'LLVM-19.1.7_clang_rpathwrap_test.patch': '5ee6a87ec8ff1c8b736ffe0513aa2098bd2b83a1ffc647a1ad2cf966f567e8a1'},
    {'LLVM-20.1.5-GCCcore-13.2.0_riscv_optimization_remark.patch':
        'e414a15e0fc48049a6ec75835cd032c8db6fb5c6d2825f0c604969c192aa60e0'},
    {'LLVM-20.1.5-GCCcore-13.2.0_riscv_fast_math.patch':
        '8f5383024c089a8220247aef1a021f85ea5c58c93196ebf80d8227f9c4097eb7'},
    {'LLVM-20.1.5-GCCcore-13.2.0_riscv_debug_complex_1.patch':
        '42a04437a0b74c8cf8aeef585f138b85416ea55d3ad5464762e766d476010590'},
    {'LLVM-20.1.5-GCCcore-13.2.0_riscv_execution_engine.patch':
        '7d795920e98c2c65df30ed01cc7e9251d69ae25e2674c251bc283ed44b53d02f'},
    {'LLVM-20.1.5-GCCcore-13.2.0_riscv_MLIR.patch':
        '826c8d6ee1e8112988d2b2cef13bc99d84989959cca31812b4fcc750a3d8a9b0'},
]

builddependencies = [
    ('binutils', '2.40'),
    ('Python', '3.11.5'),
    ('CMake', '3.27.6'),
    ('psutil', '6.1.0'),  # Needed to enable test timeout in lit
    ('lit', '18.1.7'),
    ('git', '2.42.0'),
]

dependencies = [
    ('libxml2', '2.11.5'),
    ('ncurses', '6.4'),
    ('zlib', '1.2.13'),
    ('Z3', '4.13.0'),
]

build_shared_libs = True

bootstrap = True
full_llvm = False
build_clang_extras = True
build_runtimes = True
build_lld = True
build_lldb = True
build_openmp = True
build_openmp_tools = True

# openmp offload is not supported for riscv64 (https://clang.llvm.org/docs/OffloadingDesign.html)
# There is a Bug in (at least) testing phase. See https://github.com/llvm/llvm-project/issues/134245
if ARCH != 'riscv64':
    build_openmp_offload = True
    build_bolt = True
else:
    build_openmp_offload = False
    build_bolt = False
usepolly = True


python_bindings = True

build_targets = ['all']
# disable_werror = True

skip_all_tests = False
skip_sanitizer_tests = True
test_suite_max_failed = 10
test_suite_timeout_single = 5 * 60
test_suite_ignore_patterns = [
    "X86/register-fragments-bolt-symbols.s",
    "modularize/ProblemsCoverage.modularize",
    "Driver/atomic.f90",
    "Driver/gcc-toolchain-install-dir.f90",
    "api_tests/test_ompd_get_icv_from_scope.c",
]

if ARCH == 'riscv64':
    # binutils 2.40 is too old and doesn't recognize the 'zaamo' ISA extension used in the test
    # with binutils >= 2.41, this test would work
    test_suite_ignore_patterns.append("Driver/save-mlir-temps.f90",)

# LLVM will produce .mod files for its flang installation at the 3rd stage of the build via Clang+Flang
# These should not be checked for sanity, as we want to build LLVM on top of GCCcore to be used as a new toolchain
skip_mod_files_sanity_check = True

moduleclass = 'compiler'
