avoid that 'import h5py' triggers MPI_Init via mpi4py

backported to h5py 2.10.0 from https://github.com/h5py/h5py/pull/1552 by Kenneth Hoste (HPC-UGent)

diff -ru h5py-2.10.0.orig/h5py/api_types_ext.pxd h5py-2.10.0/h5py/api_types_ext.pxd
--- h5py-2.10.0.orig/h5py/api_types_ext.pxd	2019-09-06 23:29:33.000000000 +0200
+++ h5py-2.10.0/h5py/api_types_ext.pxd	2020-05-25 19:30:30.000000000 +0200
@@ -12,7 +12,7 @@
 include 'config.pxi'
 
 IF MPI:
-    from mpi4py.MPI cimport MPI_Comm, MPI_Info, Comm, Info
+    from mpi4py.libmpi cimport MPI_Comm, MPI_Info
 
 cdef extern from "stdlib.h":
   ctypedef long size_t
@@ -52,6 +52,7 @@
 cdef extern from "Python.h":
   ctypedef void PyObject
   ctypedef ssize_t Py_ssize_t
+  ctypedef size_t Py_uintptr_t
 
   PyObject* PyErr_Occurred()
   void PyErr_SetString(object type, char *message)
diff -ru h5py-2.10.0.orig/h5py/h5p.pyx h5py-2.10.0/h5py/h5p.pyx
--- h5py-2.10.0.orig/h5py/h5p.pyx	2019-09-06 23:29:33.000000000 +0200
+++ h5py-2.10.0/h5py/h5p.pyx	2020-05-25 19:33:24.000000000 +0200
@@ -17,6 +17,7 @@
 from cpython.buffer cimport PyObject_CheckBuffer, \
                             PyObject_GetBuffer, PyBuffer_Release, \
                             PyBUF_SIMPLE
+from cpython.long cimport PyLong_AsVoidPtr
 
 from utils cimport  require_tuple, convert_dims, convert_tuple, \
                     emalloc, efree, \
@@ -1161,7 +1162,7 @@
 
     IF MPI:
         @with_phil
-        def set_fapl_mpio(self, Comm comm not None, Info info not None):
+        def set_fapl_mpio(self, comm, info):
             """ (Comm comm, Info info)
 
             Set MPI-I/O Parallel HDF5 driver.
@@ -1169,7 +1170,12 @@
             Comm: An mpi4py.MPI.Comm instance
             Info: An mpi4py.MPI.Info instance
             """
-            H5Pset_fapl_mpio(self.id, comm.ob_mpi, info.ob_mpi)
+            from mpi4py.MPI import Comm, Info, _handleof
+            assert isinstance(comm, Comm)
+            assert isinstance(info, Info)
+            cdef Py_uintptr_t _comm = _handleof(comm)
+            cdef Py_uintptr_t _info = _handleof(info)
+            H5Pset_fapl_mpio(self.id, <MPI_Comm>_comm, <MPI_Info>_info)
 
 
         @with_phil
@@ -1183,20 +1189,22 @@
             """
             cdef MPI_Comm comm
             cdef MPI_Info info
+            from mpi4py.MPI import Comm, Info, _addressof
 
             H5Pget_fapl_mpio(self.id, &comm, &info)
             pycomm = Comm()
-            pyinfo = Info()
-            MPI_Comm_dup(comm, &pycomm.ob_mpi)
-            MPI_Info_dup(info, &pyinfo.ob_mpi)
+            MPI_Comm_dup(comm, <MPI_Comm *>PyLong_AsVoidPtr(_addressof(pycomm)))
             MPI_Comm_free(&comm)
+
+            pyinfo = Info()
+            MPI_Info_dup(info, <MPI_Info *>PyLong_AsVoidPtr(_addressof(pyinfo)))
             MPI_Info_free(&info)
 
             return (pycomm, pyinfo)
 
 
         @with_phil
-        def set_fapl_mpiposix(self, Comm comm not None, bint use_gpfs_hints=0):
+        def set_fapl_mpiposix(self, comm, bint use_gpfs_hints=0):
             """ Obsolete.
             """
             raise RuntimeError("MPI-POSIX driver is broken; removed in h5py 2.3.1")
