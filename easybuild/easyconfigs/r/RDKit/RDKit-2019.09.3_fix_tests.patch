Fix failing test for correct but permutated atom sets
Author: Samuel Moors, Vrije Universiteit Brussel (VUB)
diff -ur rdkit-Release_2019_09_3.orig/Code/GraphMol/Wrap/rough_test.py rdkit-Release_2019_09_3/Code/GraphMol/Wrap/rough_test.py
--- rdkit-Release_2019_09_3.orig/Code/GraphMol/Wrap/rough_test.py	2020-01-09 18:20:46.000000000 +0100
+++ rdkit-Release_2019_09_3/Code/GraphMol/Wrap/rough_test.py	2020-03-14 16:06:22.537832599 +0100
@@ -3889,7 +3889,8 @@
     self.assertEqual(matches, ((1, 2, 3), (1, 3, 2)))
     matches = resMolSuppl.GetSubstructMatches(query, uniquify=True)
     self.assertEqual(len(matches), 1)
-    self.assertEqual(matches, ((1, 2, 3), ))
+    # self.assertEqual(matches, ((1, 2, 3), ))
+    self.assertEqual(tuple(set(x) for x in matches), ({1, 2, 3}, ))
     matches = resMolSuppl.GetSubstructMatches(query, uniquify=False)
     self.assertEqual(len(matches), 2)
     self.assertEqual(matches, ((1, 2, 3), (1, 3, 2)))
@@ -3899,13 +3900,15 @@
     self.assertEqual(matches, ((1, 2, 3), (1, 3, 2)))
     matches = mol.GetSubstructMatches(query, uniquify=True)
     self.assertEqual(len(matches), 1)
-    self.assertEqual(matches, ((1, 2, 3), ))
+    # self.assertEqual(matches, ((1, 2, 3), ))
+    self.assertEqual(tuple(set(x) for x in matches), ({1, 2, 3}, ))
     matches = resMolSuppl.GetSubstructMatches(query, uniquify=False)
     self.assertEqual(len(matches), 2)
     self.assertEqual(matches, ((1, 2, 3), (1, 3, 2)))
     matches = resMolSuppl.GetSubstructMatches(query, uniquify=True)
     self.assertEqual(len(matches), 1)
-    self.assertEqual(matches, ((1, 2, 3), ))
+    # self.assertEqual(matches, ((1, 2, 3), ))
+    self.assertEqual(tuple(set(x) for x in matches), ({1, 2, 3}, ))
 
   def testSubstructMatchDMAP(self):
     mol = Chem.MolFromSmiles('C(C)Nc1cc[nH+]cc1')
@@ -3964,7 +3967,8 @@
                                (320, 321, 326), (320, 326, 321)))
     matches = resMolSupplST.GetSubstructMatches(carboxylateQuery, uniquify=True)
     self.assertEqual(len(matches), 3)
-    self.assertEqual(matches, ((166, 167, 168), (298, 299, 300), (320, 321, 326)))
+    # self.assertEqual(matches, ((166, 167, 168), (298, 299, 300), (320, 321, 326)))
+    self.assertEqual(tuple(set(x) for x in matches), ({166, 167, 168}, {298, 299, 300}, {320, 321, 326}))
     matches = resMolSupplST.GetSubstructMatches(guanidiniumQuery)
     self.assertEqual(len(matches), 8)
     self.assertEqual(matches, ((66, 67, 68, 69), (66, 67, 69, 68), (68, 67, 69, 66),
@@ -3972,7 +3976,8 @@
                                (125, 124, 126, 123), (126, 124, 125, 123)))
     matches = resMolSupplST.GetSubstructMatches(guanidiniumQuery, uniquify=True)
     self.assertEqual(len(matches), 2)
-    self.assertEqual(matches, ((66, 67, 69, 68), (123, 124, 126, 125)))
+    # self.assertEqual(matches, ((66, 67, 69, 68), (123, 124, 126, 125)))
+    self.assertEqual(tuple(set(x) for x in matches), ({66, 67, 69, 68}, {123, 124, 126, 125}))
     btList2ST = getBtList2(resMolSupplST)
     self.assertTrue(btList2ST)
     resMolSupplMT = Chem.ResonanceMolSupplier(crambin)
@@ -3991,7 +3996,8 @@
                                  (320, 321, 326), (320, 326, 321)))
       matches = suppl.GetSubstructMatches(carboxylateQuery, uniquify=True, numThreads=0)
       self.assertEqual(len(matches), 3)
-      self.assertEqual(matches, ((166, 167, 168), (298, 299, 300), (320, 321, 326)))
+      # self.assertEqual(matches, ((166, 167, 168), (298, 299, 300), (320, 321, 326)))
+      self.assertEqual(tuple(set(x) for x in matches), ({166, 167, 168}, {298, 299, 300}, {320, 321, 326}))
       matches = suppl.GetSubstructMatches(guanidiniumQuery, numThreads=0)
       self.assertEqual(len(matches), 8)
       self.assertEqual(matches, ((66, 67, 68, 69), (66, 67, 69, 68), (68, 67, 69, 66),
@@ -3999,7 +4005,8 @@
                                  (125, 124, 126, 123), (126, 124, 125, 123)))
       matches = suppl.GetSubstructMatches(guanidiniumQuery, uniquify=True, numThreads=0)
       self.assertEqual(len(matches), 2)
-      self.assertEqual(matches, ((66, 67, 69, 68), (123, 124, 126, 125)))
+      # self.assertEqual(matches, ((66, 67, 69, 68), (123, 124, 126, 125)))
+      self.assertEqual(tuple(set(x) for x in matches), ({66, 67, 69, 68}, {123, 124, 126, 125}))
 
   def testGitHUb1166(self):
     mol = Chem.MolFromSmiles('NC(=[NH2+])c1ccc(cc1)C(=O)[O-]')
Only in rdkit-Release_2019_09_3.orig/Code/GraphMol/Wrap/test_data: outNCI_few.sdf
Only in rdkit-Release_2019_09_3.orig/Code/GraphMol/Wrap/test_data: outSmiles.txt
Only in rdkit-Release_2019_09_3/rdkit: __pycache__
