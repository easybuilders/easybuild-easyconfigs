# Thomas Hoffmann, EMBL Heidelberg, structures-it@embl.de, 2023/11
# allow to use TORCH_HOME with modextrapaths.
# Automatic download of v1.0.ckpt is disabled for multi TORCH_HOME.
diff -ru relion-classranker-b6e751e5cb4205d8e9b36d0ae38c3687b3395acb/relion_classranker/command_line.py relion-classranker-b6e751e5cb4205d8e9b36d0ae38c3687b3395acb_multi_torch_home/relion_classranker/command_line.py
--- relion-classranker-b6e751e5cb4205d8e9b36d0ae38c3687b3395acb/relion_classranker/command_line.py	2023-08-22 19:15:52.000000000 +0200
+++ relion-classranker-b6e751e5cb4205d8e9b36d0ae38c3687b3395acb_multi_torch_home/relion_classranker/command_line.py	2023-11-16 18:57:48.509605576 +0100
@@ -1,3 +1,4 @@
+#!/usr/bin/env python
 import sys
 
 if sys.version_info < (3, 0):
@@ -42,9 +43,9 @@
     model_path = os.path.join(dest_dir, f"{name}.ckpt")
     model_path_gz = model_path + ".gz"
     completed_check_path = os.path.join(dest_dir, f"{name}_installed.txt")
-
+    is_torch_home_multi=False if os.getenv('TORCH_HOME')==None else len(os.getenv('TORCH_HOME').split(':'))>1
     # Download file and install it if not already done
-    if not os.path.isfile(completed_check_path):
+    if not os.path.isfile(completed_check_path) and not is_torch_home_multi:
         if verbose:
             print(f"Installing Classranker model ({name})...")
         os.makedirs(dest_dir, exist_ok=True)
@@ -63,8 +64,19 @@
             print(f"Model ({name}) successfully installed in {dest_dir}")
 
     # Load checkpoint file
-    checkpoint = torch.load(model_path, map_location="cpu")
-
+    checkpoint = None
+    if is_torch_home_multi:
+      for _p in os.getenv('TORCH_HOME').split(':'):
+          model_path = os.path.join(_p, "hub", "checkpoints", "relion_classranker",f"{name}.ckpt")
+          try: 
+              checkpoint = torch.load(model_path, map_location="cpu")
+          except:
+              if verbose: 
+                  print(f'Cannot load model {model_path}')
+          else:
+              break
+    else:
+        checkpoint = torch.load(model_path, map_location="cpu")
     # Dynamically include model as a module
     # Make sure to check download integrity for this, otherwise major security risk
     model_module = types.ModuleType("classranker_model")
