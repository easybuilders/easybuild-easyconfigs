commit 654179aa8a81eda82e19deb43e2d40c870a754a8
Author: Ake Sandgren <ake.sandgren@hpc2n.umu.se>
Date:   Wed Nov 2 12:44:11 2022 +0100

    Make queuename argument correct in the submit file template.
    Add timelimit and a field for any extra sbatch arguments.

diff --git a/src/gui_jobwindow.cpp b/src/gui_jobwindow.cpp
index 029b8330..2a8f374f 100644
--- a/src/gui_jobwindow.cpp
+++ b/src/gui_jobwindow.cpp
@@ -154,9 +154,11 @@ void JobWindow::setupRunTab()
 
 	queue_group->begin();
 
+	place("qsub");
 	place("queuename");
 
-	place("qsub");
+	place("timelimit");
+	place("extrasbatch");
 
 	char * extra_count_text = getenv ("RELION_QSUB_EXTRA_COUNT");
 	const char extra_count_val = (extra_count_text ? atoi(extra_count_text) : 2);
diff --git a/src/pipeline_jobs.cpp b/src/pipeline_jobs.cpp
index 97434ee7..dee33dba 100644
--- a/src/pipeline_jobs.cpp
+++ b/src/pipeline_jobs.cpp
@@ -581,7 +581,17 @@ bool RelionJob::saveJobSubmissionScript(std::string newfilename, std::string out
 		replacing["XXXnameXXX"] = outputname;
 		replacing["XXXerrfileXXX"] = outputname + "run.err";
 		replacing["XXXoutfileXXX"] = outputname + "run.out";
-		replacing["XXXqueueXXX"] = joboptions["queuename"].getString();
+                if (!joboptions["queuename"].getString().empty()) {
+                    replacing["XXXqueueXXX"] = "-p " + joboptions["queuename"].getString();
+                } else {
+                    replacing["XXXqueueXXX"] = "";
+                }
+                if (!joboptions["timelimit"].getString().empty()) {
+                    replacing["XXXtimelimitXXX"] = "-t " + joboptions["timelimit"].getString();
+                } else {
+                    replacing["XXXtimelimitXXX"] = "";
+                }
+                replacing["XXXextrasbatchXXX"] = joboptions["extrasbatch"].getString();
 		char *extra_count_text = getenv("RELION_QSUB_EXTRA_COUNT");
 		const char extra_count_val = (extra_count_text ? atoi(extra_count_text) : 2);
 		for (int i=1; i<=extra_count_val; i++)
@@ -944,6 +954,12 @@ the job will be executed locally. Note that only MPI jobs may be sent to a queue
 Note that the person who installed RELION should have made a custom script for your cluster/queue setup. Check this is the case \
 (or create your own script following the RELION Wiki) if you have trouble submitting jobs. The default command can be set through the environment variable RELION_QSUB_COMMAND.");
 
+        joboptions["timelimit"] = JobOption("Timelimit - format days-hh:mm:ss:", std::string(""), "Timelimit requested for the job.\n\n\
+Note that the person who installed RELION should have made a custom script for your cluster/queue setup. Check this is the case \
+(or create your own script following the RELION Wiki) if you have trouble submitting jobs.");
+        joboptions["extrasbatch"] = JobOption("Other sbatch arguments:", std::string(""), "Other arguments to sbatch you want to specify.\n\n\
+Note that the person who installed RELION should have made a custom script for your cluster/queue setup. Check this is the case \
+(or create your own script following the RELION Wiki) if you have trouble submitting jobs.");
 	// additional options that may be set through environment variables RELION_QSUB_EXTRAi and RELION_QSUB_EXTRAi (for more flexibility)
 	char * extra_count_text = getenv("RELION_QSUB_EXTRA_COUNT");
 	const char extra_count_val = (extra_count_text ? atoi(extra_count_text) : 2);
@@ -1003,7 +1019,7 @@ Any variables XXXextra1XXX in the template script will be replaced by the corres
 Likewise, default values for the extra entries can be set through environment variables RELION_QSUB_EXTRA1_DEFAULT, RELION_QSUB_EXTRA2_DEFAULT, etc. \
 But note that (unlike all other entries in the GUI) the extra values are not remembered from one run to the other.");
 
-	// Check for environment variable RELION_QSUB_TEMPLATE
+	// Check for environment variable RELION_MINIMUM_DEDICATED
 	char * my_minimum_dedicated = getenv ("RELION_MINIMUM_DEDICATED");
 	int minimum_nr_dedicated = (my_minimum_dedicated == NULL) ? DEFAULTMININIMUMDEDICATED : textToInteger(my_minimum_dedicated);
 	joboptions["min_dedicated"] = JobOption("Minimum dedicated cores per node:", minimum_nr_dedicated, 1, 64, 1, "Minimum number of dedicated cores that need to be requested on each node. This is useful to force the queue to fill up entire nodes of a given size. The default can be set through the environment variable RELION_MINIMUM_DEDICATED.");
