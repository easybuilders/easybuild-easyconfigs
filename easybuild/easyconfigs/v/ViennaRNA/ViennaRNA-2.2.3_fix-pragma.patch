fix #pragma statements for building with Intel compilers

author: Kenneth Hoste (HPC-UGent)

--- ViennaRNA-2.2.3/src/ViennaRNA/plex.c.orig	2017-02-28 14:02:21.733634118 +0100
+++ ViennaRNA-2.2.3/src/ViennaRNA/plex.c	2017-02-28 14:02:31.303877232 +0100
@@ -410,7 +410,7 @@
   by = (int**) vrna_alloc(sizeof(int *) * (n3+1));
   inx= (int**) vrna_alloc(sizeof(int *) * (n3+1));
   iny= (int**) vrna_alloc(sizeof(int *) * (n3+1));
-  #pragma omp
+  #pragma omp parallel for
   for (i=0; i<=n3; i++){
     c[i]  = (int *) vrna_alloc(sizeof(int) * (n4+1));
     in[i] = (int *) vrna_alloc(sizeof(int) * (n4+1));
--- ViennaRNA-2.2.3/src/Kinfold/cache.c.orig	2017-02-28 14:16:36.074432301 +0100
+++ ViennaRNA-2.2.3/src/Kinfold/cache.c	2017-02-28 14:16:38.544493318 +0100
@@ -56,7 +56,6 @@
                 61,59,53,47,43,41,37,31,29,23,17,13,11,7,3,1};
 
 /* key must not be longer than 128 */
-#pragma inline (cache_f)
 unsigned cache_f(char *x) { 
   register char *s;
   register int i;
@@ -80,6 +79,7 @@
   int cacheval;
   cache_entry *c;
 
+  #pragma inline (cache_f)
   cacheval=cache_f(x);
   if ((c=cachetab[cacheval]))
     if (strcmp(c->structure,x)==0) return c;
@@ -92,6 +92,7 @@
   int cacheval;
   cache_entry *c;
   
+  #pragma inline (cache_f)
   cacheval=cache_f(x->structure);
   if ((c=cachetab[cacheval])) {
     free(c->structure);
