see https://github.com/trilinos/Trilinos/commit/556051efdf40b6dd73f44e9b673db49d38c44bcb

From 556051efdf40b6dd73f44e9b673db49d38c44bcb Mon Sep 17 00:00:00 2001
From: Bill Spotz <wfspotz@sandia.gov>
Date: Wed, 4 Oct 2017 12:11:37 -0600
Subject: [PATCH] PyTrilinos: Update docstring scripts to work with Python 2/3

These scripts were missed in the initial push for upgrading to Python
3, because they used the shebang

    #! /usr/bin/env python

and on my system, when I tested, this used Python 2. Reported in
with Komplex and PyTrilinos enabled, there is an error processing the
Komplex doxygen comments. Once that is resolved, I can push a final
commit for this and close the issue.
---
 .../PyTrilinos/doc/Doxygen/CMakeLists.txt     | 17 ++++-
 .../{docstrings.py => docstrings.py.in}       | 21 +++---
 .../Doxygen/{doxy2swig.py => doxy2swig.py.in} | 69 ++++++++++++-------
 .../Doxygen/{makedeps.py => makedeps.py.in}   | 15 ++--
 4 files changed, 77 insertions(+), 45 deletions(-)
 rename packages/PyTrilinos/doc/Doxygen/{docstrings.py => docstrings.py.in} (84%)
 rename packages/PyTrilinos/doc/Doxygen/{doxy2swig.py => doxy2swig.py.in} (89%)
 rename packages/PyTrilinos/doc/Doxygen/{makedeps.py => makedeps.py.in} (96%)

diff --git a/packages/PyTrilinos/doc/Doxygen/CMakeLists.txt b/packages/PyTrilinos/doc/Doxygen/CMakeLists.txt
index b9a39e82fc4..37dc7c7e38e 100644
--- a/packages/PyTrilinos/doc/Doxygen/CMakeLists.txt
+++ b/packages/PyTrilinos/doc/Doxygen/CMakeLists.txt
@@ -44,6 +44,13 @@
 
 SET(ADDITIONAL_CLEAN_FILES "")
 
+CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/docstrings.py.in
+  ${CMAKE_CURRENT_BINARY_DIR}/docstrings.py)
+CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/doxy2swig.py.in
+  ${CMAKE_CURRENT_BINARY_DIR}/doxy2swig.py)
+CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/makedeps.py.in
+  ${CMAKE_CURRENT_BINARY_DIR}/makedeps.py)
+
 FOREACH(Package ${PyTrilinos_PACKAGES})
 
   IF(NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/${Package}_dox.i)
@@ -56,9 +63,15 @@ FOREACH(Package ${PyTrilinos_PACKAGES})
           ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile_${Package}
           @ONLY
           )
-        EXECUTE_PROCESS(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/docstrings.py
+        EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/docstrings.py
           --doxygen=${DOXYGEN_EXECUTABLE} ${Package}
-          WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
+          WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+          ERROR_VARIABLE Doxy_CONVERT_ERROR)
+        IF(Doxy_CONVERT_ERROR)
+          MESSAGE(FATAL_ERROR
+            "Error converting ${Package} C++ Doxygen comments to Python docstrings:\n  "
+            ${Doxy_CONVERT_ERROR})
+        ENDIF(Doxy_CONVERT_ERROR)
 
       ENDIF()
 
diff --git a/packages/PyTrilinos/doc/Doxygen/docstrings.py b/packages/PyTrilinos/doc/Doxygen/docstrings.py.in
similarity index 84%
rename from packages/PyTrilinos/doc/Doxygen/docstrings.py
rename to packages/PyTrilinos/doc/Doxygen/docstrings.py.in
index f9c0757b615..c0a537af9b2 100755
--- a/packages/PyTrilinos/doc/Doxygen/docstrings.py
+++ b/packages/PyTrilinos/doc/Doxygen/docstrings.py.in
@@ -1,6 +1,7 @@
-#! /usr/bin/env python
+#! ${PYTHON_EXECUTABLE}
 
 # System includes
+from __future__ import print_function
 import os
 import subprocess
 import sys
@@ -26,7 +27,7 @@ def create_docstrings(package,
     err_file = open(err_name, 'w')
 
     # Print message
-    print "Running doxygen on package", package, "...",
+    print("Running doxygen on package ", package, "...", end=" ")
     sys.stdout.flush()
 
     # Run and wait for completion
@@ -36,11 +37,11 @@ def create_docstrings(package,
 
     # Complete the message
     if result != 0:
-        print "ERRORS!"
-        print open(err_name).read()
+        print("ERRORS!")
+        print(open(err_name).read())
         sys.exit(result)
     else:
-        print "success"
+        print("success")
 
     ######################################################################
     # Run doxy2swig.py on the appropriate index.xml file
@@ -57,8 +58,8 @@ def create_docstrings(package,
     err_file = open(err_name, 'w')
 
     # Print message
-    print "Converting doxygen XML to SWIG docstring directives for", \
-          package, "...",
+    print("Converting doxygen XML to SWIG docstring directives for",
+          package, "...", end=" ")
     sys.stdout.flush()
 
     # Run and wait for completion
@@ -68,11 +69,11 @@ def create_docstrings(package,
 
     # Complete the message
     if result != 0:
-        print "ERRORS!"
-        print open(err_name).read()
+        print("ERRORS!", file=sys.stderr)
+        print(open(err_name).read(), file=sys.stderr)
         sys.exit(result)
     else:
-        print "success"
+        print("success")
 
     ######################################################################
     # Cleanup
diff --git a/packages/PyTrilinos/doc/Doxygen/doxy2swig.py b/packages/PyTrilinos/doc/Doxygen/doxy2swig.py.in
similarity index 89%
rename from packages/PyTrilinos/doc/Doxygen/doxy2swig.py
rename to packages/PyTrilinos/doc/Doxygen/doxy2swig.py.in
index efeb162a4a5..204083bcda4 100755
--- a/packages/PyTrilinos/doc/Doxygen/doxy2swig.py
+++ b/packages/PyTrilinos/doc/Doxygen/doxy2swig.py.in
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#! ${PYTHON_EXECUTABLE}
 """
 Doxygen XML to SWIG docstring converter.
 
@@ -29,11 +29,11 @@
 #
 ######################################################################
 
+from __future__ import print_function
 from xml.dom import minidom
 import re
 import textwrap
 import sys
-import types
 import os.path
 import optparse
 import unicodedata
@@ -50,13 +50,26 @@ def my_open_write(dest):
     else:
         return open(dest, 'w')
 
-def my_str(source):
-    try:
-        result = str(source)
-    except UnicodeEncodeError, e:
-        result = unicodedata.normalize('NFKD',source).encode('ascii','ignore')
-    return result
+###### def my_str() for PYTHON 2
+if sys.version_info[0] == 2:
+    def my_str(source):
+        if isinstance(source, unicode):
+            try:
+                result = str(source)
+            except UnicodeEncodeError:
+                result = unicodedata.normalize('NFKD',source).encode('ascii','ignore')
+        else:
+            result = source
+        return result
 
+###### def my_str() for PYTHON 3
+elif sys.version_info[0] == 3:
+    def my_str(source):
+        return source
+        # try:
+        #     return source.encode('ascii', 'ignore')
+        # except AttributeError:
+        #     return source
 
 class Doxy2SWIG:    
     """
@@ -83,11 +96,17 @@ def __init__(self, src, include_function_definition=True):
         # a CGI script.  This doesn't work in general, just for the specific
         # string that I know causes a problem.
         try:
+            f = my_str(f)
             self.xmldoc = minidom.parse(f).documentElement
         except:
             f.close()
             f = my_open_read(src)
-            data = f.read()
+            try:
+                data = f.read()
+            except UnicodeDecodeError as e:
+                print('f =', f, file=sys.stderr)
+                print(e, file=sys.stderr)
+                sys.exit(-1)
             data = data.replace('&module=nox','')
             self.xmldoc = minidom.parseString(data).documentElement
         f.close()
@@ -172,7 +191,7 @@ def add_text(self, value):
         """
         Adds text corresponding to `value` into `self.pieces`.
         """
-        if type(value) in (types.ListType, types.TupleType):
+        if isinstance(value, (list, tuple)):
             self.pieces.extend(value)
         else:
             self.pieces.append(value)
@@ -232,13 +251,13 @@ def do_compounddef(self, node):
         kind = node.attributes['kind'].value
         if kind in ('class', 'struct'):
             prot = node.attributes['prot'].value
-            if prot <> 'public':
+            if prot != 'public':
                 return
             names = ('compoundname', 'briefdescription',
                      'detaileddescription', 'includes')
             first = self.get_specific_nodes(node, names)
             for n in names:
-                if first.has_key(n):
+                if n in first:
                     self.parse(first[n])
             self.add_text(['";','\n'])
             for n in node.childNodes:
@@ -289,8 +308,7 @@ def do_memberdef(self, node):
             if name[:8] == 'operator': # Don't handle operators yet.
                 return
 
-            if not first.has_key('definition') or \
-                   kind in ['variable', 'typedef']:
+            if not 'definition' in first or kind in ['variable', 'typedef']:
                 return
 
             if self.include_function_definition:
@@ -382,7 +400,7 @@ def do_doxygenindex(self, node):
             fname = refid + '.xml'
             if not os.path.exists(fname):
                 fname = os.path.join(self.my_dir,  fname)
-            print "parsing file: %s"%fname
+            print("parsing file: %s" % fname)
             p = Doxy2SWIG(fname)
             p.generate()
             self.pieces.extend(self.clean_pieces(p.pieces))
@@ -404,32 +422,31 @@ def clean_pieces(self, pieces):
         ret = []
         count = 0
         for i in pieces:
-            if isinstance(i, unicode):
-                i = my_str(i)
+            i = my_str(i)
             if i == '\n':
                 count = count + 1
             else:
                 if i == '";':
                     if count:
-                        ret.append('\n')
+                        ret.append(my_str('\n'))
                 elif count > 2:
-                    ret.append('\n\n')
+                    ret.append(my_str('\n\n'))
                 elif count:
-                    ret.append('\n'*count)
+                    ret.append(my_str('\n')*count)
                 count = 0
                 ret.append(i)
 
-        _data = "".join(ret)
+        _data = my_str("").join(ret)
         ret = []
-        for i in _data.split('\n\n'):
+        for i in _data.split(my_str('\n\n')):
             if i == 'Parameters:':
-                ret.extend(['Parameters:\n-----------', '\n\n'])
-            elif i.find('// File:') > -1: # leave comments alone.
-                ret.extend([i, '\n'])
+                ret.extend([my_str('Parameters:\n-----------'), my_str('\n\n')])
+            elif i.find(my_str('// File:')) > -1: # leave comments alone.
+                ret.extend([i, my_str('\n')])
             else:
                 _tmp = textwrap.fill(i.strip(), break_long_words=False)
                 _tmp = self.lead_spc.sub(r'\1"\2', _tmp)
-                ret.extend([_tmp, '\n\n'])
+                ret.extend([my_str(_tmp), my_str('\n\n')])
         return ret
 
 
diff --git a/packages/PyTrilinos/doc/Doxygen/makedeps.py b/packages/PyTrilinos/doc/Doxygen/makedeps.py.in
similarity index 96%
rename from packages/PyTrilinos/doc/Doxygen/makedeps.py
rename to packages/PyTrilinos/doc/Doxygen/makedeps.py.in
index 4225d21214f..e7c18c44131 100755
--- a/packages/PyTrilinos/doc/Doxygen/makedeps.py
+++ b/packages/PyTrilinos/doc/Doxygen/makedeps.py.in
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! ${PYTHON_EXECUTABLE}
 
 """
 Create a Makefile dependency file that includes all of the names of the source
@@ -19,8 +19,9 @@
 
 ########################################################################
 
+from   __future__ import print_function
+from   glob       import glob
 import fnmatch
-from   glob import glob
 import os
 import re
 import sys
@@ -210,7 +211,7 @@ def sources(self):
     # Check the command line
     numArgs = len(sys.argv)
     if numArgs < 2 or numArgs > 3:
-        print __doc__
+        print(__doc__)
         sys.exit(-1)
 
     # Obtain the target and doxyfile names
@@ -222,10 +223,10 @@ def sources(self):
 
     # Parse the doxyfile and output the dependencies
     doxyfile = Doxyfile(filename)
-    print "%s: \\" % target
+    print("%s: \\" % target)
     sources = doxyfile.sources()
     if len(sources): lastSrc = sources[-1]
     for src in sources:
-        print "   ", src,
-        if src is not lastSrc: print "\\",
-        print
+        print("   ", src, end="")
+        if src is not lastSrc: print("\\", end="")
+        print()
