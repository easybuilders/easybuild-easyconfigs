Fix  a compilation error for CPUs with AVX512 features on GCC 13+ where an issue in Eigen leads to
> invalid 'static_cast' from type 'const Eigen::half' to type '_Float16'

See invalid 'static_cast' from type 'const Eigen::half' to type '_Float16'

Author: Alexander Grund (TU Dresden)

diff --git a/third_party/eigen3/fix-avx512-gcc13.patch b/third_party/eigen3/fix-avx512-gcc13.patch
new file mode 100644
index 00000000000..19da83f840b
--- /dev/null
+++ b/third_party/eigen3/fix-avx512-gcc13.patch
@@ -0,0 +1,41 @@
+diff --git a/Eigen/src/Core/arch/AVX512/PacketMathFP16.h b/Eigen/src/Core/arch/AVX512/PacketMathFP16.h
+index 52fee1e95..3a216753b 100644
+--- a/Eigen/src/Core/arch/AVX512/PacketMathFP16.h
++++ b/Eigen/src/Core/arch/AVX512/PacketMathFP16.h
+@@ -112,7 +112,13 @@ struct unpacket_traits<Packet8h> {
+ 
+ template <>
+ EIGEN_STRONG_INLINE Packet32h pset1<Packet32h>(const Eigen::half& from) {
+-  return _mm512_set1_ph(static_cast<_Float16>(from));
++  // half/half_raw is bit compatible
++  return _mm512_set1_ph(numext::bit_cast<_Float16>(from));
++}
++
++template <>
++EIGEN_STRONG_INLINE Packet32h pzero(const Packet32h& /*a*/) {
++  return _mm512_setzero_ph();
+ }
+ 
+ // pset1frombits
+@@ -212,10 +218,8 @@ EIGEN_STRONG_INLINE Packet32h pmax<Packet32h>(const Packet32h& a, const Packet32
+ // plset
+ template <>
+ EIGEN_STRONG_INLINE Packet32h plset<Packet32h>(const half& a) {
+-  return _mm512_add_ph(_mm512_set1_ph(a),
+-                       _mm512_set_ph(31.0f, 30.0f, 29.0f, 28.0f, 27.0f, 26.0f, 25.0f, 24.0f, 23.0f, 22.0f, 21.0f, 20.0f,
+-                                     19.0f, 18.0f, 17.0f, 16.0f, 15.0f, 14.0f, 13.0f, 12.0f, 11.0f, 10.0f, 9.0f, 8.0f,
+-                                     7.0f, 6.0f, 5.0f, 4.0f, 3.0f, 2.0f, 1.0f, 0.0f));
++  return _mm512_add_ph(pset1<Packet32h>(a), _mm512_set_ph(31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,
++                                                          16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));
+ }
+ 
+ // por
+@@ -506,7 +510,7 @@ EIGEN_STRONG_INLINE Packet8h pnmsub(const Packet8h& a, const Packet8h& b, const
+ 
+ template <>
+ EIGEN_STRONG_INLINE Packet32h pnegate<Packet32h>(const Packet32h& a) {
+-  return _mm512_sub_ph(_mm512_set1_ph(0.0), a);
++  return psub(pzero(a), a);
+ }
+ 
+ // pconj
diff --git a/third_party/eigen3/workspace.bzl b/third_party/eigen3/workspace.bzl
index da549e37432..fe7692f6321 100644
--- a/third_party/eigen3/workspace.bzl
+++ b/third_party/eigen3/workspace.bzl
@@ -14,7 +14,10 @@ def repo():
     tf_http_archive(
         name = "eigen_archive",
         build_file = "//third_party/eigen3:eigen_archive.BUILD",
-        patch_file = ["//third_party/eigen3:fix-avx512.patch"],
+        patch_file = [
+            "//third_party/eigen3:fix-avx512.patch",
+            "//third_party/eigen3:fix-avx512-gcc13.patch",
+        ],
         sha256 = EIGEN_SHA256,
         strip_prefix = "eigen-{commit}".format(commit = EIGEN_COMMIT),
         urls = tf_mirror_urls("https://gitlab.com/libeigen/eigen/-/archive/{commit}/eigen-{commit}.tar.gz".format(commit = EIGEN_COMMIT)),
