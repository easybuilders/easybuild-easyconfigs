Add functions introduced in Snappy 1.1.10 missing in our 1.1.9:
https://github.com/google/snappy/commit/9758c9dfd744f252bf3351c1a212e05c9f7fc857

Author: Alexander Grund (TU Dresden)

diff --git a/tensorflow/tsl/platform/default/port.cc b/tensorflow/tsl/platform/default/port.cc
index 0a1052aded5..92f0dbdb7d6 100644
--- a/tensorflow/tsl/platform/default/port.cc
+++ b/tensorflow/tsl/platform/default/port.cc
@@ -39,6 +39,7 @@ limitations under the License.
 #include <unistd.h>
 #ifdef TF_USE_SNAPPY
 #include "snappy.h"
+#include "snappy-sinksource.h"
 #endif
 #if (defined(__APPLE__) && defined(__MACH__)) || defined(__FreeBSD__) || \
     defined(__HAIKU__)
@@ -307,6 +308,80 @@ int NUMAGetMemAffinity(const void* addr) {
   return node;
 }
 
+namespace {
+  // Backport from Snappy 1.1.10: https://github.com/google/snappy/commit/9758c9dfd744f252bf3351c1a212e05c9f7fc857
+  static_assert(SNAPPY_VERSION == 0x010109, "Backport is only for 1.1.9");
+  // A `Source` implementation that yields the contents of an `iovec` array. Note
+  // that `total_size` is the total number of bytes to be read from the elements
+  // of `iov` (_not_ the total number of elements in `iov`).
+  class SnappyIOVecReader : public snappy::Source {
+  public:
+    SnappyIOVecReader(const struct iovec* iov, size_t total_size)
+        : curr_iov_(iov),
+          curr_pos_(total_size > 0 ? reinterpret_cast<const char*>(iov->iov_base)
+                                  : nullptr),
+          curr_size_remaining_(total_size > 0 ? iov->iov_len : 0),
+          total_size_remaining_(total_size) {
+      // Skip empty leading `iovec`s.
+      if (total_size > 0 && curr_size_remaining_ == 0) Advance();
+    }
+
+    ~SnappyIOVecReader() = default;
+
+    size_t Available() const { return total_size_remaining_; }
+
+    const char* Peek(size_t* len) {
+      *len = curr_size_remaining_;
+      return curr_pos_;
+    }
+
+    void Skip(size_t n) {
+      while (n >= curr_size_remaining_ && n > 0) {
+        n -= curr_size_remaining_;
+        Advance();
+      }
+      curr_size_remaining_ -= n;
+      total_size_remaining_ -= n;
+      curr_pos_ += n;
+    }
+
+  private:
+    // Advances to the next nonempty `iovec` and updates related variables.
+    void Advance() {
+      do {
+        assert(total_size_remaining_ >= curr_size_remaining_);
+        total_size_remaining_ -= curr_size_remaining_;
+        if (total_size_remaining_ == 0) {
+          curr_pos_ = nullptr;
+          curr_size_remaining_ = 0;
+          return;
+        }
+        ++curr_iov_;
+        curr_pos_ = reinterpret_cast<const char*>(curr_iov_->iov_base);
+        curr_size_remaining_ = curr_iov_->iov_len;
+      } while (curr_size_remaining_ == 0);
+    }
+
+    // The `iovec` currently being read.
+    const struct iovec* curr_iov_;
+    // The location in `curr_iov_` currently being read.
+    const char* curr_pos_;
+    // The amount of unread data in `curr_iov_`.
+    size_t curr_size_remaining_;
+    // The amount of unread data in the entire input array.
+    size_t total_size_remaining_;
+  };
+
+  void Snappy_RawCompressFromIOVec(const struct iovec* iov, size_t uncompressed_length,
+                                   char* compressed, size_t* compressed_length) {
+    SnappyIOVecReader reader(iov, uncompressed_length);
+    snappy::UncheckedByteArraySink writer(compressed);
+    snappy::Compress(&reader, &writer);
+
+    // Compute how many bytes were added.
+    *compressed_length = writer.CurrentDestination() - compressed;
+  }
+}
 
 bool Snappy_Compress(const char* input, size_t length, string* output) {
 #ifdef TF_USE_SNAPPY
@@ -325,8 +400,8 @@ bool Snappy_CompressFromIOVec(const struct iovec* iov,
 #ifdef TF_USE_SNAPPY
   output->resize(snappy::MaxCompressedLength(uncompressed_length));
   size_t outlen;
-  snappy::RawCompressFromIOVec(iov, uncompressed_length, &(*output)[0],
-                               &outlen);
+  Snappy_RawCompressFromIOVec(iov, uncompressed_length, &(*output)[0],
+                              &outlen);
   output->resize(outlen);
   return true;
 #else
