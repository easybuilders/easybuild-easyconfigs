TF uses invalid reinterpret_cast causing miscompilation at least on POWER
Fix by proper code

Author: Alexander Grund (TU Dresden)

diff --git a/tensorflow/core/framework/BUILD b/tensorflow/core/framework/BUILD
index d47c74a629d..8ae68b53f3b 100644
--- a/tensorflow/core/framework/BUILD
+++ b/tensorflow/core/framework/BUILD
@@ -597,6 +597,7 @@ cc_library(
         ":numeric_types",
         "//tensorflow/core/platform:byte_order",
         "//tensorflow/core/platform:types",
+        "//third_party/eigen3",
     ],
     alwayslink = 1,
 )
diff --git a/tensorflow/core/framework/bfloat16.cc b/tensorflow/core/framework/bfloat16.cc
index 6025be51704..c7fdda163b7 100644
--- a/tensorflow/core/framework/bfloat16.cc
+++ b/tensorflow/core/framework/bfloat16.cc
@@ -15,36 +15,28 @@ limitations under the License.
 
 #include "tensorflow/core/framework/bfloat16.h"
 
+#include "third_party/eigen3/Eigen/Core"
+
 namespace tensorflow {
 
 void FloatToBFloat16(const float* src, bfloat16* dst, int64 size) {
-  const uint16_t* p = reinterpret_cast<const uint16_t*>(src);
-  uint16_t* q = reinterpret_cast<uint16_t*>(dst);
+  for (; size != 0; src++, dst++, size--) {
 #if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
-  for (; size != 0; p += 2, q++, size--) {
-    *q = p[0];
-  }
+    memcpy(dst, src, sizeof(bfloat16));
 #else
-  for (; size != 0; p += 2, q++, size--) {
-    *q = p[1];
-  }
+    memcpy(
+        dst,
+        reinterpret_cast<const char*>(src) + sizeof(float) - sizeof(bfloat16),
+        sizeof(bfloat16));
 #endif
+  }
 }
 
 void BFloat16ToFloat(const bfloat16* src, float* dst, int64 size) {
-  const uint16_t* p = reinterpret_cast<const uint16_t*>(src);
-  uint16_t* q = reinterpret_cast<uint16_t*>(dst);
-#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
-  for (; size != 0; p++, q += 2, size--) {
-    q[0] = *p;
-    q[1] = 0;
-  }
-#else
-  for (; size != 0; p++, q += 2, size--) {
-    q[0] = 0;
-    q[1] = *p;
-  }
-#endif
+  Eigen::Map<const Eigen::Array<bfloat16, Eigen::Dynamic, 1>> src_eigen(src,
+                                                                        size);
+  Eigen::Map<Eigen::ArrayXf> dst_eigen(dst, size);
+  dst_eigen = src_eigen.cast<float>();
 }
 
 }  // end namespace tensorflow
diff --git a/tensorflow/core/framework/numeric_types.h b/tensorflow/core/framework/numeric_types.h
index 6d80a1c519c..916c2d302d1 100644
--- a/tensorflow/core/framework/numeric_types.h
+++ b/tensorflow/core/framework/numeric_types.h
@@ -47,13 +47,9 @@ typedef Eigen::QUInt16 quint16;
 
 
 static inline tensorflow::bfloat16 FloatToBFloat16(float float_val) {
-#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
-    return *reinterpret_cast<tensorflow::bfloat16*>(
-        reinterpret_cast<uint16_t*>(&float_val));
-#else
-    return *reinterpret_cast<tensorflow::bfloat16*>(
-        &(reinterpret_cast<uint16_t*>(&float_val)[1]));
-#endif
+    tensorflow::bfloat16 result;
+    result.value = absl::bit_cast<uint32_t>(float_val) >> 16;
+    return result;
 }
     
 namespace Eigen {
diff --git a/tensorflow/core/kernels/cast_op.h b/tensorflow/core/kernels/cast_op.h
index 84c44f6b5e7..19c73fa4975 100644
--- a/tensorflow/core/kernels/cast_op.h
+++ b/tensorflow/core/kernels/cast_op.h
@@ -285,18 +285,7 @@ struct scalar_cast_op<::tensorflow::bfloat16, float> {
   typedef float result_type;
   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float operator()(
       const ::tensorflow::bfloat16& a) const {
-    float ret;
-    uint16_t* p = reinterpret_cast<uint16_t*>(&ret);
-#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
-    p[0] = a.value;
-    p[1] = 0;
-#else
-    static_assert(::tensorflow::port::kLittleEndian,
-                  "Not a little endian system!");
-    p[0] = 0;
-    p[1] = a.value;
-#endif
-    return ret;
+    return static_cast<float>(a);
   }
 };
 
diff --git a/tensorflow/core/kernels/sparse_matmul_op.cc b/tensorflow/core/kernels/sparse_matmul_op.cc
index eb460147d71..71897681d0b 100644
--- a/tensorflow/core/kernels/sparse_matmul_op.cc
+++ b/tensorflow/core/kernels/sparse_matmul_op.cc
@@ -282,14 +282,7 @@ const int kNumOperands = (sizeof(Packet) / sizeof(float));
 #define FMA(a, b, c, d) d = Eigen::internal::pmadd<Packet>(a, b, c);
 
 ALWAYS_INLINE float ConvertBfloat16ToFloat(const bfloat16* src) {
-  float out = 0;
-  auto tmp = reinterpret_cast<bfloat16*>(&out);
-#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
-  tmp[0] = *src;
-#else
-  tmp[1] = *src;
-#endif
-  return out;
+  return static_cast<float>(*src);
 }
 
 ALWAYS_INLINE Packet ConvertFourBfloat16ToFloat(const bfloat16* src) {
diff --git a/tensorflow/core/lib/bfloat16/BUILD b/tensorflow/core/lib/bfloat16/BUILD
index 53c2059f06d..2564ac6ab37 100644
--- a/tensorflow/core/lib/bfloat16/BUILD
+++ b/tensorflow/core/lib/bfloat16/BUILD
@@ -17,6 +17,7 @@ cc_library(
     deps = [
         "//tensorflow/core/platform:byte_order",
         "//third_party/eigen3",
+        "@com_google_absl//absl/base",
     ],
 )
 
diff --git a/tensorflow/core/lib/bfloat16/bfloat16.h b/tensorflow/core/lib/bfloat16/bfloat16.h
index 54d78480066..72ea6aa911e 100644
--- a/tensorflow/core/lib/bfloat16/bfloat16.h
+++ b/tensorflow/core/lib/bfloat16/bfloat16.h
@@ -21,6 +21,7 @@ limitations under the License.
 #include <iostream>
 #include <limits>
 
+#include "absl/base/casts.h"
 #include "tensorflow/core/platform/byte_order.h"
 
 #if defined(__CUDACC__) || (defined(__HIPCC__) && defined(__HIP__))
@@ -59,12 +60,7 @@ struct bfloat16 {
       output.value = std::signbit(v) ? 0x8000 : 0;
       return output;
     }
-    const uint16_t* p = reinterpret_cast<const uint16_t*>(&v);
-#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
-    output.value = p[0];
-#else
-    output.value = p[1];
-#endif
+    output.value = absl::bit_cast<uint32_t>(v) >> 16;
     return output;
   }
 
@@ -102,16 +98,7 @@ struct bfloat16 {
       : bfloat16(static_cast<float>(val)) {}
 
   B16_DEVICE_FUNC explicit operator float() const {
-    float result = 0;
-
-    uint16_t* q = reinterpret_cast<uint16_t*>(&result);
-
-#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
-    q[0] = value;
-#else
-    q[1] = value;
-#endif
-    return result;
+    return absl::bit_cast<float>(static_cast<uint32_t>(value) << 16);
   }
 
   B16_DEVICE_FUNC explicit operator bool() const {
