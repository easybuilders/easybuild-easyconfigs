# Thomas Hoffmann, EMBL Heidelberg, structures-it@embl.de, 2024/12
# (adapted from Triton-2.1.0-use_eb_env_python_build.patch and Triton-2.1.0-disable_rocm_support.patch)
# - disable support for AMD GPUs
# - disable all downloads at build time.

diff -ru triton-5fe38ffd73c2ac6ed6323b554205186696631c6f/CMakeLists.txt triton-5fe38ffd73c2ac6ed6323b554205186696631c6f_eb_env_python_build/CMakeLists.txt
--- triton-5fe38ffd73c2ac6ed6323b554205186696631c6f/CMakeLists.txt	2024-09-10 23:44:54.000000000 +0200
+++ triton-5fe38ffd73c2ac6ed6323b554205186696631c6f_eb_env_python_build/CMakeLists.txt	2024-12-19 11:17:38.959269261 +0100
@@ -184,7 +184,7 @@
     ${triton_plugins}
 
     # mlir
-    MLIRAMDGPUDialect
+    #MLIRAMDGPUDialect
     MLIRNVVMDialect
     MLIRNVVMToLLVMIRTranslation
     MLIRGPUToNVVMTransforms
@@ -208,9 +208,9 @@
     # LLVM
     LLVMPasses
     LLVMNVPTXCodeGen
-    # LLVMNVPTXAsmPrinter
-    LLVMAMDGPUCodeGen
-    LLVMAMDGPUAsmParser
+    #LLVMNVPTXAsmPrinter
+    #LLVMAMDGPUCodeGen
+    #LLVMAMDGPUAsmParser
 
   )
   if(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64" OR # Linux arm64
diff -ru triton-5fe38ffd73c2ac6ed6323b554205186696631c6f/python/setup.py triton-5fe38ffd73c2ac6ed6323b554205186696631c6f_eb_env_python_build/python/setup.py
--- triton-5fe38ffd73c2ac6ed6323b554205186696631c6f/python/setup.py	2024-09-10 23:44:54.000000000 +0200
+++ triton-5fe38ffd73c2ac6ed6323b554205186696631c6f_eb_env_python_build/python/setup.py	2024-12-19 12:36:55.358107277 +0100
@@ -130,13 +130,15 @@
         version = pybind11_version_file.read().strip()
     name = f"pybind11-{version}"
     url = f"https://github.com/pybind/pybind11/archive/refs/tags/v{version}.tar.gz"
-    return Package("pybind11", name, url, "PYBIND11_INCLUDE_DIR", "", "PYBIND11_SYSPATH")
+    #return Package("pybind11", name, url, "PYBIND11_INCLUDE_DIR", "", "PYBIND11_SYSPATH")
+    return Package("pybind11", name, '', "PYBIND11_INCLUDE_DIR", "", "PYBIND11_SYSPATH")
 
 
 # json
 def get_json_package_info():
     url = "https://github.com/nlohmann/json/releases/download/v3.11.3/include.zip"
-    return Package("json", "", url, "JSON_INCLUDE_DIR", "", "JSON_SYSPATH")
+    #return Package("json", "", url, "JSON_INCLUDE_DIR", "", "JSON_SYSPATH")
+    return Package("json", "", '', "JSON_INCLUDE_DIR", "", "JSON_SYSPATH")
 
 
 # llvm
@@ -201,7 +203,9 @@
 
 
 def get_triton_cache_path():
-    user_home = os.getenv("HOME") or os.getenv("USERPROFILE") or os.getenv("HOMEPATH") or None
+    user_home = os.getenv("TRITON_HOME")
+    if not user_home:
+        user_home = os.getenv("HOME") or os.getenv("USERPROFILE") or os.getenv("HOMEPATH") or None
     if not user_home:
         raise RuntimeError("Could not find user home directory")
     return os.path.join(user_home, ".triton")
@@ -222,14 +226,14 @@
                 shutil.rmtree(package_root_dir)
             os.makedirs(package_root_dir, exist_ok=True)
             print(f'downloading and extracting {p.url} ...')
-            with open_url(p.url) as response:
-                if p.url.endswith(".zip"):
-                    file_bytes = BytesIO(response.read())
-                    with zipfile.ZipFile(file_bytes, "r") as file:
-                        file.extractall(path=package_root_dir)
-                else:
-                    with tarfile.open(fileobj=response, mode="r|*") as file:
-                        file.extractall(path=package_root_dir)
+            #with open_url(p.url) as response:
+            #    if p.url.endswith(".zip"):
+            #        file_bytes = BytesIO(response.read())
+            #        with zipfile.ZipFile(file_bytes, "r") as file:
+            #            file.extractall(path=package_root_dir)
+            #    else:
+            #        with tarfile.open(fileobj=response, mode="r|*") as file:
+            #            file.extractall(path=package_root_dir)
             # write version url to package_dir
             with open(os.path.join(package_dir, "version.txt"), "w") as f:
                 f.write(p.url)
@@ -363,12 +367,14 @@
             "-G", "Ninja",  # Ninja is much faster than make
             "-DCMAKE_MAKE_PROGRAM=" +
             ninja_dir,  # Pass explicit path to ninja otherwise cmake may cache a temporary path
-            "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON", "-DLLVM_ENABLE_WERROR=ON",
+            "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON",
+            # "-DLLVM_ENABLE_WERROR=ON",
             "-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=" + extdir, "-DTRITON_BUILD_TUTORIALS=OFF",
             "-DTRITON_BUILD_PYTHON_MODULE=ON", "-DPython3_EXECUTABLE:FILEPATH=" + sys.executable,
             "-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON", "-DPYTHON_INCLUDE_DIRS=" + python_include_dir,
             "-DTRITON_CODEGEN_BACKENDS=" + ';'.join([b.name for b in backends if not b.is_external]),
-            "-DTRITON_PLUGIN_DIRS=" + ';'.join([b.src_dir for b in backends if b.is_external])
+            "-DTRITON_PLUGIN_DIRS=" + ';'.join([b.src_dir for b in backends if b.is_external]),
+            "-DFETCHCONTENT_FULLY_DISCONNECTED=1",  
         ]
         if lit_dir is not None:
             cmake_args.append("-DLLVM_EXTERNAL_LIT=" + lit_dir)
@@ -432,54 +438,54 @@
 with open(nvidia_version_path, "r") as nvidia_version_file:
     NVIDIA_TOOLCHAIN_VERSION = nvidia_version_file.read().strip()
 
-download_and_copy(
-    name="ptxas",
-    src_path="bin/ptxas",
-    variable="TRITON_PTXAS_PATH",
-    version=NVIDIA_TOOLCHAIN_VERSION,
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-nvcc/{version}/download/linux-{arch}/cuda-nvcc-{version}-0.tar.bz2",
-)
-download_and_copy(
-    name="cuobjdump",
-    src_path="bin/cuobjdump",
-    variable="TRITON_CUOBJDUMP_PATH",
-    version=NVIDIA_TOOLCHAIN_VERSION,
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-cuobjdump/{version}/download/linux-{arch}/cuda-cuobjdump-{version}-0.tar.bz2",
-)
-download_and_copy(
-    name="nvdisasm",
-    src_path="bin/nvdisasm",
-    variable="TRITON_NVDISASM_PATH",
-    version=NVIDIA_TOOLCHAIN_VERSION,
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-nvdisasm/{version}/download/linux-{arch}/cuda-nvdisasm-{version}-0.tar.bz2",
-)
-download_and_copy(
-    name="cudacrt",
-    src_path="include",
-    variable="TRITON_CUDACRT_PATH",
-    version=NVIDIA_TOOLCHAIN_VERSION,
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-nvcc/{version}/download/linux-{arch}/cuda-nvcc-{version}-0.tar.bz2",
-)
-download_and_copy(
-    name="cudart",
-    src_path="include",
-    variable="TRITON_CUDART_PATH",
-    version=NVIDIA_TOOLCHAIN_VERSION,
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-cudart-dev/{version}/download/linux-{arch}/cuda-cudart-dev-{version}-0.tar.bz2",
-)
-download_and_copy(
-    name="cupti",
-    src_path="include",
-    variable="TRITON_CUPTI_PATH",
-    version=NVIDIA_TOOLCHAIN_VERSION,
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-cupti/{version}/download/linux-{arch}/cuda-cupti-{version}-0.tar.bz2",
-)
+#download_and_copy(
+#    name="ptxas",
+#    src_path="bin/ptxas",
+#    variable="TRITON_PTXAS_PATH",
+#    version=NVIDIA_TOOLCHAIN_VERSION,
+#    url_func=lambda arch, version:
+#    f"https://anaconda.org/nvidia/cuda-nvcc/{version}/download/linux-{arch}/cuda-nvcc-{version}-0.tar.bz2",
+#)
+#download_and_copy(
+#    name="cuobjdump",
+#    src_path="bin/cuobjdump",
+#    variable="TRITON_CUOBJDUMP_PATH",
+#    version=NVIDIA_TOOLCHAIN_VERSION,
+#    url_func=lambda arch, version:
+#    f"https://anaconda.org/nvidia/cuda-cuobjdump/{version}/download/linux-{arch}/cuda-cuobjdump-{version}-0.tar.bz2",
+#)
+#download_and_copy(
+#    name="nvdisasm",
+#    src_path="bin/nvdisasm",
+#    variable="TRITON_NVDISASM_PATH",
+#    version=NVIDIA_TOOLCHAIN_VERSION,
+#    url_func=lambda arch, version:
+#    f"https://anaconda.org/nvidia/cuda-nvdisasm/{version}/download/linux-{arch}/cuda-nvdisasm-{version}-0.tar.bz2",
+#)
+#download_and_copy(
+#    name="cudacrt",
+#    src_path="include",
+#    variable="TRITON_CUDACRT_PATH",
+#    version=NVIDIA_TOOLCHAIN_VERSION,
+#    url_func=lambda arch, version:
+#    f"https://anaconda.org/nvidia/cuda-nvcc/{version}/download/linux-{arch}/cuda-nvcc-{version}-0.tar.bz2",
+#)
+#download_and_copy(
+#    name="cudart",
+#    src_path="include",
+#    variable="TRITON_CUDART_PATH",
+#    version=NVIDIA_TOOLCHAIN_VERSION,
+#    url_func=lambda arch, version:
+#    f"https://anaconda.org/nvidia/cuda-cudart-dev/{version}/download/linux-{arch}/cuda-cudart-dev-{version}-0.tar.bz2",
+#)
+#download_and_copy(
+#    name="cupti",
+#    src_path="include",
+#    variable="TRITON_CUPTI_PATH",
+#    version=NVIDIA_TOOLCHAIN_VERSION,
+#    url_func=lambda arch, version:
+#    f"https://anaconda.org/nvidia/cuda-cupti/{version}/download/linux-{arch}/cuda-cupti-{version}-0.tar.bz2",
+#)
 
 backends = [*BackendInstaller.copy(["nvidia", "amd"]), *BackendInstaller.copy_externals()]
 
diff -ru triton-5fe38ffd73c2ac6ed6323b554205186696631c6f/unittest/CMakeLists.txt triton-5fe38ffd73c2ac6ed6323b554205186696631c6f_eb_env_python_build/unittest/CMakeLists.txt
--- triton-5fe38ffd73c2ac6ed6323b554205186696631c6f/unittest/CMakeLists.txt	2024-09-10 23:44:54.000000000 +0200
+++ triton-5fe38ffd73c2ac6ed6323b554205186696631c6f_eb_env_python_build/unittest/CMakeLists.txt	2024-12-19 13:43:42.815629305 +0100
@@ -1,8 +1,11 @@
-include (${CMAKE_CURRENT_SOURCE_DIR}/googletest.cmake)
+#include (${CMAKE_CURRENT_SOURCE_DIR}/googletest.cmake)
 
 include(GoogleTest)
 enable_testing()
 
+find_package(GTest REQUIRED)
+include_directories(${GTEST_INCLUDE_DIR})
+
 get_property(dialect_libs GLOBAL PROPERTY MLIR_DIALECT_LIBS)
 get_property(conversion_libs GLOBAL PROPERTY MLIR_CONVERSION_LIBS)
 get_property(triton_libs GLOBAL PROPERTY TRITON_LIBS)
