easyblock = 'PythonBundle'

name = 'aiida-core'
version = '2.5.1'

homepage = 'https://www.aiida.net/'
description = """Bundle of Python packages required to run AiiDA.
An open-source Python infrastructure to help researchers with automating, managing, persisting,
sharing and reproducing the complex workflows associated with modern computational science and all associated data.
"""

toolchain = {'name': 'gfbf', 'version': '2023a'}
toolchainopts = {'pic': True}

builddependencies = [
    ('poetry', '1.5.1'),  # Poetry, importlib-metadata
]

dependencies = [
    ('Python', '3.11.3'),
    ('Python-bundle-PyPI', '2023.06'),
    ('pydantic', '2.5.3'),  # pydantic_core, pydantic
    ('paramiko', '3.2.0'),  # paramiko
    ('SQLAlchemy', '2.0.25'),  # greenlet, alembic, SQLAlchemy
    ('Graphviz', '8.1.0'),  # graphviz
    ('jupyter-server', '2.7.2'),  # PyYAML, tornado, ipython, ipywidgets, jupyter_server
    ('jedi', '0.19.0'),  # jedi
    ('wrapt', '1.15.0'),  # wrapt, numpy, scipy
    ('aiohttp', '3.8.5'),  # multidict, yarl
    ('psycopg2', '2.9.9'),  # PostgreSQL, psycopg2
    ('plumpy', '0.21.6'),  # plumpy kiwipy aio-pika
]

# order is important!
exts_list = [
    ('async-timeout', '4.0.3', {
        'checksums': ['4640d96be84d82d02ed59ea2b7105a0f7b33abe8703703cd0ab0bf87c427522f'],
    }),
    ('disk_objectstore', '1.1.0', {
        'checksums': ['9216e973586f635b05e121a2ab90d72989b8eb64ed08f5aaae5092cabbe26e9b'],
    }),
    ('tqdm', '4.66.2', {
        'checksums': ['6cd52cdf0fef0e0f543299cfc96fec90d7b8a7e88745f411ec33eb44d5ed3531'],
    }),
    ('docstring_parser', '0.16', {
        'checksums': ['538beabd0af1e2db0146b6bd3caa526c35a34d61af9fd2887f3a8a27a739aa6e'],
    }),
    ('upf-to-json', '0.9.5', {
        'sources': ['upf_to_json-%(version)s.tar.gz'],
        'checksums': ['57614c4c8677f04f161679ce4eddb2f55b87984605b8a5253d3d288235f56e4a'],
    }),
    ('circus', '0.18.0', {
        'checksums': ['193ce8224e068ced66724cf483106fb6674b51a57583ac1a0e7ed7a7ee8c71ab'],
    }),
    ('click-spinner', '0.1.10', {
        'checksums': ['87eacf9d7298973a25d7615ef57d4782aebf913a532bba4b28a37e366e975daf'],
    }),
    ('pgsu', '0.2.4', {
        'patches': ['aiida_core-2.5.1-pgsu.patch'],
        'checksums': [
            {'pgsu-0.2.4.tar.gz': 'fb7cfa069305551d40cc104d7c5b4b6ad28bf6c5d00eedac30fb7967581ec9e3'},
            {'aiida_core-2.5.1-pgsu.patch': '4393d4df8d9cd393125c8066a725990701f30c4e7a29d466904ad5e7bd6e5b8c'},
        ],
    }),
    ('archive-path', '0.4.2', {
        'checksums': ['75279003ea986a4f6748e299ba74d95e74ad75f1bd3ae02d35c125c749633a51'],
    }),
    ('graphviz', '0.20.3', {
        'sources': ['%(namelower)s-%(version)s.zip'],
        'checksums': ['09d6bc81e6a9fa392e7ba52135a9d49f1ed62526f96499325930e87ca1b5925d'],
    }),
    (name, version, {
        'modulename': 'aiida',
        'patches': ['aiida_core-2.5.1-psycopg.patch'],
        'sources': ['aiida_core-2.5.1.tar.gz'],
        'checksums': [
            {'aiida_core-2.5.1.tar.gz': '9a5898ca355f0494d07ec4d2f714d17abef43e2e6c0b938cc2263db0115c33b4'},
            {'aiida_core-2.5.1-psycopg.patch': '8ca8799ca053d830832ffd3f0cbc8fd9e5f67cfafdf02f53f81f4de66a3b2f25'},
        ],
    }),
]

sanity_check_commands = [
    'verdi --help',
    'verdi status',
]

moduleclass = 'tools'

modluafooter = """
local shell = myShellName()

if (shell == "bash") or (shell == "sh") then
    execute{cmd="eval \\"$(_VERDI_COMPLETE=bash_source verdi)\\"", modeA={"load"}}
    execute{cmd="complete -r verdi && unset _verdi_completion_setup && unset _verdi_completion", modeA={"unload"}}
elseif (shell == "zsh") then
    execute{cmd="eval \\"$(_VERDI_COMPLETE=zsh_source verdi)\\"", modeA={"load"}}
    execute{cmd="unset '_comps[verdi]' && unset -f _verdi_completion", modeA={"unload"}}
elseif (shell == "fish") then
    execute{cmd="eval (env _VERDI_COMPLETE=fish_source verdi)", modeA={"load"}}
    execute{cmd="complete -e verdi && functions --erase _verdi_completion", modeA={"unload"}}
else
    LmodMessage("Autocompletion cannot be setup automatically for shell: " .. shell)
end
"""
