Fix incorrect use of fixed sized buffers.

Ã…ke Sandgren, 20190228
diff -ru amber16.orig/AmberTools/src/nab/nab.c amber16/AmberTools/src/nab/nab.c
--- amber16.orig/AmberTools/src/nab/nab.c	2019-02-28 10:41:07.185332187 -0600
+++ amber16/AmberTools/src/nab/nab.c	2019-02-28 19:12:13.618946740 -0600
@@ -22,7 +22,7 @@
 
 static	void	n2c( int, int, char *, int, int, int, char *[], char [], char * );
 static	void	cc( int, int, int, int, char [], int, char *[], char [] );
-static	int	split( char [], char *[], char * );
+static	int	split( char [], char ***, char * );
 static	int	execute( char **, int, int, int );
 
 int main( int argc, char *argv[] )
@@ -128,8 +128,8 @@
 	char	cpp_ofname[ 256 ];
 
 	char	cmd[ 1024 ];
-	char	*fields[ 256 ];
-	int	nfields;
+	char	**fields;
+	int	nfields, i;
 	int	cpp_ofd, n2c_ofd;
 	int	status;
     char *amberhome;
@@ -169,7 +169,7 @@
 				amberhome, cppstring, amberhome,
 				argv[ ac ] ? argv[ ac ] : "" );
 			if( cgdopt ) fprintf( stderr, "cpp cmd: %s\n", cmd );
-			nfields = split( cmd, fields, " " );
+			nfields = split( cmd, &fields, " " );
 
 #ifndef USE_MKSTEMP
 			if( (cpp_ofd =
@@ -205,7 +205,7 @@
 				nodebug ? "-nodebug" : "",
 				argv[ ac ] ? argv[ ac ] : "" );
 			if( cgdopt ) fprintf( stderr, "nab2c cmd: %s\n", cmd );
-			nfields = split( cmd, fields, " " );
+			nfields = split( cmd, &fields, " " );
 
 			status = execute( fields, cpp_ofd, n2c_ofd, 2 );
 			unlink( cpp_ofname );
@@ -213,6 +213,10 @@
 				unlink( n2c_ofname );
 				fprintf( stderr, "nab2c failed!\n" ); exit(1);
 			}
+                        for (i = 0; i < nfields; i++) {
+                            free(fields[i]);
+                        }
+                        free(fields);
 		}
 	}
 	unlink( n2c_ofname );
@@ -233,20 +237,28 @@
 {
 	int	ac;
 	char	*dotp, *amberhome;
-	char	cmd[ 1024 ], word[ 1024 ];
-	char	*fields[256];
+#define WORDSZ 1024
+	char	*cmd, word[ WORDSZ ];
+	char	**fields;
+	int     cmd_sz;
 	int 	status;
-	int 	nfields;
+	int 	nfields, i;
 
     amberhome = (char *) getenv("AMBERHOME");
     if( amberhome == NULL ){
        fprintf( stderr, "AMBERHOME is not set!\n" );
        exit(1);
     }
+	cmd_sz = WORDSZ;
+	cmd = malloc(cmd_sz);
 	sprintf( cmd, "%s -I%s/include", CC, amberhome );
 	if( aopt ){
 #ifdef AVSDIR
 		sprintf( word, " -I%s/include", AVSDIR );
+		if (strlen(cmd) + strlen(word) + 1 > cmd_sz) {
+			cmd_sz += WORDSZ;
+			cmd = realloc(cmd, cmd_sz);
+		}
 		strcat( cmd, word );
 #else
 		fprintf( stderr, "-avs not supported.\n" );
@@ -257,9 +269,17 @@
 			dotp = strrchr( argv[ ac ], '.' );
 			strcpy( &dotp[ 1 ], "c" );
 			sprintf( word, " %s", argv[ ac ] );
+			if (strlen(cmd) + strlen(word) + 1 > cmd_sz) {
+				cmd_sz += WORDSZ;
+				cmd = realloc(cmd, cmd_sz);
+			}
 			strcat( cmd, word );
 		}else if( argv[ ac ] ){
 			sprintf( word, " %s", argv[ ac ] );
+			if (strlen(cmd) + strlen(word) + 1 > cmd_sz) {
+				cmd_sz += WORDSZ;
+				cmd = realloc(cmd, cmd_sz);
+			}
 			strcat( cmd, word );
 		}
 	}
@@ -268,71 +288,100 @@
 		if( aopt ){
 			sprintf( word, " -L%s/lib -lflow_c -lgeom -lutil",
 				AVSDIR );
+			if (strlen(cmd) + strlen(word) + 1 > cmd_sz) {
+				cmd_sz += WORDSZ;
+				cmd = realloc(cmd, cmd_sz);
+			}
 			strcat( cmd, word );
 		}
 #endif
 		sprintf( word, " -L%s/lib -lnab -lcifparse", amberhome );
+		if (strlen(cmd) + strlen(word) + 1 > cmd_sz) {
+			cmd_sz += WORDSZ;
+			cmd = realloc(cmd, cmd_sz);
+		}
 		strcat( cmd, word );
-		sprintf( word, " %s ", FLIBS );
-		strcat( cmd, word );
+                /* FLIBS can be very big and there is no need to copy it into word first. */
+		/* Make sure there is space enough for the " -lm" too */
+		if (strlen(cmd) + strlen(FLIBS) + 6 > cmd_sz) {
+			cmd_sz += strlen(FLIBS) + 6;
+			cmd = realloc(cmd, cmd_sz);
+		}
+		strcat( cmd, " " );
+		strcat( cmd, FLIBS );
 		strcat( cmd, " -lm" );
 	}
 	if( cgdopt ) fprintf( stderr, "cc cmd: %s\n", cmd );
-	nfields = split(cmd,fields," ");
+	nfields = split(cmd, &fields, " ");
 	status = execute(fields, 0, 1, 2); 
 	if (status != 0) {
 		fprintf(stderr,"cc failed!\n"); exit (1);
 	}
+        for (i = 0; i < nfields; i++) {
+            free(fields[i]);
+        }
+        free(fields);
+	free(cmd);
 }
 
-static	int	split( char str[], char *fields[], char *fsep )
+static	int	split( char str[], char ***fields, char *fsep )
 {
-	int	nf, flen;
+	int	nf, flen, maxnf;
 	char	*sp, *fp, *efp, *nfp;
 
 	if( !str )
 		return( 0 );
 
+        maxnf = 10;
+        *fields = (char **) malloc(sizeof(char *) * maxnf);
 	/* Use fsep of white space is special */ 
 	if( strspn( fsep, " \t\n" ) ){
 		for( nf = 0, sp = str; ; ){
 			fp = sp + strspn( sp, fsep );
 			if( !*fp )
 				return( nf );
+                        if (nf + 1 > maxnf) {
+                            maxnf += 10;
+                            *fields = (char **) realloc(*fields, sizeof(char *) * maxnf);
+                        }
 			if( (efp = strpbrk( fp, fsep )) ){
 				if( !( flen = efp - fp ) )
 					return( nf );
 				nfp = (char *)malloc( (flen + 1) * sizeof(char) );
 				strncpy( nfp, fp, flen );
 				nfp[ flen ] = '\0';
-				fields[ nf ] = nfp;
+				(*fields)[ nf ] = nfp;
 				sp = efp;
-				fields[++nf] = NULL;
+				(*fields)[++nf] = NULL;
 			}else{
 				flen = strlen( fp );
 				nfp = (char *)malloc( (flen + 1) * sizeof(char) );
 				strcpy( nfp, fp );
-				fields[ nf ] = nfp;
-				fields[++nf]=NULL;
+				(*fields)[ nf ] = nfp;
+				(*fields)[++nf]=NULL;
 				return( nf );
 			}
 		}
 	}else{
 		for( nf = 0, sp = str; ; ){
+                        if (nf + 1 > maxnf) {
+                            maxnf += 10;
+                            *fields = (char **) realloc(*fields, sizeof(char *) * maxnf);
+                        }
 			if( (fp = strchr( sp, *fsep )) ){
 				flen = fp - sp;
 				nfp = (char *)malloc( (flen + 1) * sizeof(char) );
 				strncpy( nfp, sp, flen );
 				nfp[ flen ] = '\0';
-				fields[ nf ] = nfp;
-				fields[++nf]=NULL;
+				(*fields)[ nf ] = nfp;
+				(*fields)[++nf]=NULL;
 				sp = fp + 1;
 			}else{
 				flen = strlen( sp );
 				nfp = (char *)malloc( (flen + 1) * sizeof(char) );
 				strcpy( nfp, sp );
-				fields[ nf ] = nfp;
-				fields[++nf] = NULL;
+				(*fields)[ nf ] = nfp;
+				(*fields)[++nf] = NULL;
 				return( nf );
 			}
 		}
