easyblock = 'Binary'

name = 'AOMP'
version = '11.12-0'

homepage = 'https://github.com/ROCm-Developer-Tools/aomp'
description = "AMD fork of LLVM, setup for OpenMP offloading to Accelerators"

toolchain = {'name': 'gcccuda', 'version': '2019b'}

source_urls = ['https://github.com/ROCm-Developer-Tools/aomp/releases/download/rel_%(version)s/']
sources = ['aomp-%(version)s.tar.gz']
patches = ['build_aomp-%(version)s.patch']
checksums = [
    'b01bbed55c4851cfebc69d5be42bafdfb8b43b82e0b6715fe5e1e86db47272e2',  # aomp-11.12-0.tar.gz
    'c5ccdd00e270731a353461a8f158cdec556689742d501163c8059e739d0588b7',  # build_aomp-11.12-0.patch
]

builddependencies = [
    ('CMake', '3.15.3'),
    ('Python', '3.7.4'),
]

dependencies = [
    ('binutils', '2.32'),
    ('libffi', '3.2.1'),
    ('numactl', '2.0.12'),
]

extract_sources = True
dontcreateinstalldir = True

preinstallopts = 'AOMP=%(installdir)s '
preinstallopts += 'AOMP_REPOS="%(builddir)s/aomp%(version_major)s" '
preinstallopts += 'AOMP_CHECK_GIT_BRANCH=0 '
preinstallopts += 'AOMP_APPLY_ROCM_PATCHES=0 '
preinstallopts += 'AOMP_STANDALONE_BUILD=1 '
preinstallopts += 'NUM_THREADS=%(parallel)s'
# 'NVPTXGPUS' should be set to the NVPTX architecture you would like to
# support, e.g. '50,75'.
preinstallopts += ' AOMP_BUILD_CUDA=1 '
preinstallopts += 'CUDA="$CUDA_ROOT" '
preinstallopts += 'NVPTXGPUS="70"'

# Core components that must be built for the compiler to work
local_comps = ['roct', 'rocr', 'project', 'libdevice', 'extras', 'openmp',
               'pgmath', 'flang', 'flang_runtime', 'comgr', 'rocminfo']
# Debug components, (optional)
# The debugging compoentes require additonal build dependences:
#  texinfo, bison, flex, ncurses, expat, xz, libbabeltrace
# local_comps += ['rocdbgapi', 'rocgdb']
# Profiling components, (optional)
# local_comps += ['roctracer', 'rocprofiler']
install_cmd = "./aomp/bin/build_aomp.sh select %s" % ' '.join(local_comps)

sanity_check_paths = {
    'files': ['bin/clang', 'bin/ld.lld', 'include/omp.h'],
    'dirs': ['amdgcn', 'bin', 'include', 'lib'],
}

moduleclass = 'compiler'
