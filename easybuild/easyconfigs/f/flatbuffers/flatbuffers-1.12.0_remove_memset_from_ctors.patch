GCC 10 is more picky about bad use of memset in ctors.
Ref: https://github.com/google/flatbuffers/pull/5938

From 70744b61669082d0aa5b568ea8c2e0f3c35994de Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Fri, 29 May 2020 16:01:13 +0300
Subject: [PATCH 01/13] [C++] removed array's memsets from struct parametrized
 constructor

now POD-typed arrays are zero-initialized
and class-typed arrays are default-initialized
---
 src/idl_gen_cpp.cpp           | 60 +++++++++++++++--------------------
 tests/arrays_test_generated.h | 21 ++++++------
 2 files changed, 35 insertions(+), 46 deletions(-)

diff --git a/src/idl_gen_cpp.cpp b/src/idl_gen_cpp.cpp
index 3b798aeaa3..048e42b7da 100644
--- a/src/idl_gen_cpp.cpp
+++ b/src/idl_gen_cpp.cpp
@@ -2858,31 +2858,42 @@ class CppGenerator : public BaseGenerator {
     std::string arg_list;
     std::string init_list;
     int padding_id = 0;
-    auto first = struct_def.fields.vec.begin();
+    bool first_arg = true;
+    bool first_init = true;
     for (auto it = struct_def.fields.vec.begin();
          it != struct_def.fields.vec.end(); ++it) {
       const auto &field = **it;
       const auto &field_type = field.value.type;
-      if (IsArray(field_type)) {
-        first++;
-        continue;
-      }
       const auto member_name = Name(field) + "_";
       const auto arg_name = "_" + Name(field);
       const auto arg_type = GenTypeGet(field_type, " ", "const ", " &", true);
 
-      if (it != first) { arg_list += ", "; }
-      arg_list += arg_type;
-      arg_list += arg_name;
       if (!IsArray(field_type)) {
-        if (it != first && init_list != "") { init_list += ",\n        "; }
-        init_list += member_name;
-        if (IsScalar(field_type.base_type)) {
-          auto type = GenUnderlyingCast(field, false, arg_name);
-          init_list += "(flatbuffers::EndianScalar(" + type + "))";
+        if (!first_arg) {
+          arg_list += ", ";
         } else {
-          init_list += "(" + arg_name + ")";
+          first_arg = false;
         }
+        arg_list += arg_type;
+        arg_list += arg_name;
+      }
+      if (!first_init) {
+        init_list += ",\n        ";
+      } else {
+        first_init = false;
+      }
+      init_list += member_name;
+      if (IsScalar(field_type.base_type)) {
+        auto type = GenUnderlyingCast(field, false, arg_name);
+        init_list += "(flatbuffers::EndianScalar(" + type + "))";
+      } else if (IsArray(field_type)) {
+        // implicit initialization of array
+        // for each object in array it:
+        // * sets it as zeros for POD types (integral, floating point, etc)
+        // * calls default constructor for classes/structs
+        init_list += "()";
+      } else {
+        init_list += "(" + arg_name + ")";
       }
       if (field.padding) {
         GenPadding(field, &init_list, &padding_id, PaddingInitializer);
@@ -2898,27 +2909,6 @@ class CppGenerator : public BaseGenerator {
       } else {
         code_ += "  {{STRUCT_NAME}}({{ARG_LIST}}) {";
       }
-      padding_id = 0;
-      for (auto it = struct_def.fields.vec.begin();
-           it != struct_def.fields.vec.end(); ++it) {
-        const auto &field = **it;
-        const auto &field_type = field.value.type;
-        if (IsArray(field_type)) {
-          const auto &elem_type = field_type.VectorType();
-          (void)elem_type;
-          FLATBUFFERS_ASSERT(
-              (IsScalar(elem_type.base_type) || IsStruct(elem_type)) &&
-              "invalid declaration");
-          const auto &member = Name(field) + "_";
-          code_ +=
-              "    std::memset(" + member + ", 0, sizeof(" + member + "));";
-        }
-        if (field.padding) {
-          std::string padding;
-          GenPadding(field, &padding, &padding_id, PaddingNoop);
-          code_ += padding;
-        }
-      }
       code_ += "  }";
     }
   }
diff --git a/tests/arrays_test_generated.h b/tests/arrays_test_generated.h
index 66599d1806..8bfa701896 100644
--- a/tests/arrays_test_generated.h
+++ b/tests/arrays_test_generated.h
@@ -79,11 +79,12 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NestedStruct FLATBUFFERS_FINAL_CLASS {
     memset(static_cast<void *>(this), 0, sizeof(NestedStruct));
   }
   NestedStruct(MyGame::Example::TestEnum _b)
-      : b_(flatbuffers::EndianScalar(static_cast<int8_t>(_b))) {
-    std::memset(a_, 0, sizeof(a_));
-    std::memset(c_, 0, sizeof(c_));
-    (void)padding0__;    (void)padding1__;
-    std::memset(d_, 0, sizeof(d_));
+      : a_(),
+        b_(flatbuffers::EndianScalar(static_cast<int8_t>(_b))),
+        c_(),
+        padding0__(0),
+        padding1__(0),
+        d_() {
   }
   const flatbuffers::Array<int32_t, 2> *a() const {
     return reinterpret_cast<const flatbuffers::Array<int32_t, 2> *>(a_);
@@ -145,17 +146,15 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) ArrayStruct FLATBUFFERS_FINAL_CLASS {
   }
   ArrayStruct(float _a, int8_t _c, int32_t _e)
       : a_(flatbuffers::EndianScalar(_a)),
+        b_(),
         c_(flatbuffers::EndianScalar(_c)),
         padding0__(0),
         padding1__(0),
         padding2__(0),
+        d_(),
         e_(flatbuffers::EndianScalar(_e)),
-        padding3__(0) {
-    std::memset(b_, 0, sizeof(b_));
-    (void)padding0__;    (void)padding1__;    (void)padding2__;
-    std::memset(d_, 0, sizeof(d_));
-    (void)padding3__;
-    std::memset(f_, 0, sizeof(f_));
+        padding3__(0),
+        f_() {
   }
   float a() const {
     return flatbuffers::EndianScalar(a_);

From e6607a58770584b68b71768fbebd58a448e12c4d Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Fri, 29 May 2020 16:07:19 +0300
Subject: [PATCH 02/13] [C++] memset -> zero/default initialization in default
 constructor

---
 src/idl_gen_cpp.cpp           | 51 +++++++++++++++++++++++++++++++----
 tests/arrays_test_generated.h | 30 ++++++++++++++++++---
 2 files changed, 72 insertions(+), 9 deletions(-)

diff --git a/src/idl_gen_cpp.cpp b/src/idl_gen_cpp.cpp
index 048e42b7da..ee4a56c3ae 100644
--- a/src/idl_gen_cpp.cpp
+++ b/src/idl_gen_cpp.cpp
@@ -2851,7 +2851,51 @@ class CppGenerator : public BaseGenerator {
 
   static void PaddingNoop(int bits, std::string *code_ptr, int *id) {
     (void)bits;
-    *code_ptr += "    (void)padding" + NumToString((*id)++) + "__;";
+    *code_ptr += "    (void)padding" + NumToString((*id)++) + "__;\n";
+  }
+
+  void GenStructDefaultConstructor(const StructDef &struct_def) {
+    std::string init_list;
+    std::string body;
+    bool first_in_init_list = true;
+    int padding_initializer_id = 0;
+    int padding_body_id = 0;
+    for (const auto field : struct_def.fields.vec) {
+      const auto field_name = field->name + "_";
+
+      if (!first_in_init_list) {
+        init_list += ",\n        ";
+      } else {
+        first_in_init_list = false;
+      }
+
+      if (IsArray(field->value.type)) {
+        // implicit initialization of array
+        // for each object in array it:
+        // * sets it as zeros for POD types (integral, floating point, etc)
+        // * calls default constructor for classes/structs
+        init_list += field_name + "()";
+      } else {
+        init_list += field_name + "(0)";
+      }
+      if (field->padding) {
+        GenPadding(*field, &init_list, &padding_initializer_id,
+                   PaddingInitializer);
+        GenPadding(*field, &body, &padding_body_id, PaddingNoop);
+      }
+    }
+
+    if (init_list.empty()) {
+      code_ += "  {{STRUCT_NAME}}()";
+      code_ += "  {}";
+    } else {
+      code_.SetValue("INIT_LIST", init_list);
+      code_.SetValue("DEFAULT_CONSTRUCTOR_BODY", body);
+      code_ += "  {{STRUCT_NAME}}()";
+      code_ += "      : {{INIT_LIST}}";
+      code_ += "  {";
+      code_ += "{{DEFAULT_CONSTRUCTOR_BODY}}  }";
+    }
   }
 
   void GenStructConstructor(const StructDef &struct_def) {
@@ -2964,10 +3008,7 @@ class CppGenerator : public BaseGenerator {
     GenFullyQualifiedNameGetter(struct_def, Name(struct_def));
 
     // Generate a default constructor.
-    code_ += "  {{STRUCT_NAME}}() {";
-    code_ +=
-        "    memset(static_cast<void *>(this), 0, sizeof({{STRUCT_NAME}}));";
-    code_ += "  }";
+    GenStructDefaultConstructor(struct_def);
 
     // Generate a constructor that takes all fields as arguments,
     // excluding arrays
diff --git a/tests/arrays_test_generated.h b/tests/arrays_test_generated.h
index 8bfa701896..9baacfb636 100644
--- a/tests/arrays_test_generated.h
+++ b/tests/arrays_test_generated.h
@@ -75,8 +75,16 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NestedStruct FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return NestedStructTypeTable();
   }
-  NestedStruct() {
-    memset(static_cast<void *>(this), 0, sizeof(NestedStruct));
+  NestedStruct()
+      : a_(),
+        b_(0),
+        c_(),
+        padding0__(0),
+        padding1__(0),
+        d_()
+  {
+    (void)padding0__;
+    (void)padding1__;
   }
   NestedStruct(MyGame::Example::TestEnum _b)
       : a_(),
@@ -141,8 +149,22 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) ArrayStruct FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return ArrayStructTypeTable();
   }
-  ArrayStruct() {
-    memset(static_cast<void *>(this), 0, sizeof(ArrayStruct));
+  ArrayStruct()
+      : a_(0),
+        b_(),
+        c_(0),
+        padding0__(0),
+        padding1__(0),
+        padding2__(0),
+        d_(),
+        e_(0),
+        padding3__(0),
+        f_()
+  {
+    (void)padding0__;
+    (void)padding1__;
+    (void)padding2__;
+    (void)padding3__;
   }
   ArrayStruct(float _a, int8_t _c, int32_t _e)
       : a_(flatbuffers::EndianScalar(_a)),

From 7d865174fe0c4146b4b8e07474c8fe5559339e0f Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Fri, 29 May 2020 16:44:20 +0300
Subject: [PATCH 03/13] [C++] Struct-type and array default initialization

---
 src/idl_gen_cpp.cpp | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/idl_gen_cpp.cpp b/src/idl_gen_cpp.cpp
index ee4a56c3ae..8e26ab0935 100644
--- a/src/idl_gen_cpp.cpp
+++ b/src/idl_gen_cpp.cpp
@@ -2869,7 +2869,9 @@ class CppGenerator : public BaseGenerator {
         first_in_init_list = false;
       }
 
-      if (IsArray(field->value.type)) {
+      if (IsStruct(field->value.type) || IsArray(field->value.type)) {
+        // this is either default initialization of struct
+        // or
         // implicit initialization of array
         // for each object in array it:
         // * sets it as zeros for POD types (integral, floating point, etc)

From b9dc0c6a51efddfa960bb723b1c371a68e8d29db Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Fri, 29 May 2020 16:45:45 +0300
Subject: [PATCH 04/13] [C++] Newly generated tests

---
 samples/monster_generated.h                   |  7 ++--
 .../generated_cpp17/monster_test_generated.h  | 34 +++++++++++++------
 tests/monster_test_generated.h                | 34 +++++++++++++------
 .../namespace_test1_generated.h               |  6 ++--
 tests/union_vector/union_vector_generated.h   | 10 +++---
 5 files changed, 63 insertions(+), 28 deletions(-)

diff --git a/samples/monster_generated.h b/samples/monster_generated.h
index 00aa70b02a..ab88a767eb 100644
--- a/samples/monster_generated.h
+++ b/samples/monster_generated.h
@@ -179,8 +179,11 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return Vec3TypeTable();
   }
-  Vec3() {
-    memset(static_cast<void *>(this), 0, sizeof(Vec3));
+  Vec3()
+      : x_(0),
+        y_(0),
+        z_(0)
+  {
   }
   Vec3(float _x, float _y, float _z)
       : x_(flatbuffers::EndianScalar(_x)),
diff --git a/tests/cpp17/generated_cpp17/monster_test_generated.h b/tests/cpp17/generated_cpp17/monster_test_generated.h
index 043c21e894..81f2118905 100644
--- a/tests/cpp17/generated_cpp17/monster_test_generated.h
+++ b/tests/cpp17/generated_cpp17/monster_test_generated.h
@@ -477,14 +477,17 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) Test FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return TestTypeTable();
   }
-  Test() {
-    memset(static_cast<void *>(this), 0, sizeof(Test));
+  Test()
+      : a_(0),
+        b_(0),
+        padding0__(0)
+  {
+    (void)padding0__;
   }
   Test(int16_t _a, int8_t _b)
       : a_(flatbuffers::EndianScalar(_a)),
         b_(flatbuffers::EndianScalar(_b)),
         padding0__(0) {
-    (void)padding0__;
   }
   int16_t a() const {
     return flatbuffers::EndianScalar(a_);
@@ -517,8 +520,20 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vec3 FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return Vec3TypeTable();
   }
-  Vec3() {
-    memset(static_cast<void *>(this), 0, sizeof(Vec3));
+  Vec3()
+      : x_(0),
+        y_(0),
+        z_(0),
+        padding0__(0),
+        test1_(0),
+        test2_(0),
+        padding1__(0),
+        test3_(),
+        padding2__(0)
+  {
+    (void)padding0__;
+    (void)padding1__;
+    (void)padding2__;
   }
   Vec3(float _x, float _y, float _z, double _test1, MyGame::Example::Color _test2, const MyGame::Example::Test &_test3)
       : x_(flatbuffers::EndianScalar(_x)),
@@ -530,9 +545,6 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vec3 FLATBUFFERS_FINAL_CLASS {
         padding1__(0),
         test3_(_test3),
         padding2__(0) {
-    (void)padding0__;
-    (void)padding1__;
-    (void)padding2__;
   }
   float x() const {
     return flatbuffers::EndianScalar(x_);
@@ -582,8 +594,10 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Ability FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return AbilityTypeTable();
   }
-  Ability() {
-    memset(static_cast<void *>(this), 0, sizeof(Ability));
+  Ability()
+      : id_(0),
+        distance_(0)
+  {
   }
   Ability(uint32_t _id, uint32_t _distance)
       : id_(flatbuffers::EndianScalar(_id)),
diff --git a/tests/monster_test_generated.h b/tests/monster_test_generated.h
index 219e83576e..d06bb8a704 100644
--- a/tests/monster_test_generated.h
+++ b/tests/monster_test_generated.h
@@ -592,14 +592,17 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) Test FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return TestTypeTable();
   }
-  Test() {
-    memset(static_cast<void *>(this), 0, sizeof(Test));
+  Test()
+      : a_(0),
+        b_(0),
+        padding0__(0)
+  {
+    (void)padding0__;
   }
   Test(int16_t _a, int8_t _b)
       : a_(flatbuffers::EndianScalar(_a)),
         b_(flatbuffers::EndianScalar(_b)),
         padding0__(0) {
-    (void)padding0__;
   }
   int16_t a() const {
     return flatbuffers::EndianScalar(a_);
@@ -643,8 +646,20 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vec3 FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return Vec3TypeTable();
   }
-  Vec3() {
-    memset(static_cast<void *>(this), 0, sizeof(Vec3));
+  Vec3()
+      : x_(0),
+        y_(0),
+        z_(0),
+        padding0__(0),
+        test1_(0),
+        test2_(0),
+        padding1__(0),
+        test3_(),
+        padding2__(0)
+  {
+    (void)padding0__;
+    (void)padding1__;
+    (void)padding2__;
   }
   Vec3(float _x, float _y, float _z, double _test1, MyGame::Example::Color _test2, const MyGame::Example::Test &_test3)
       : x_(flatbuffers::EndianScalar(_x)),
@@ -656,9 +671,6 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vec3 FLATBUFFERS_FINAL_CLASS {
         padding1__(0),
         test3_(_test3),
         padding2__(0) {
-    (void)padding0__;
-    (void)padding1__;
-    (void)padding2__;
   }
   float x() const {
     return flatbuffers::EndianScalar(x_);
@@ -723,8 +735,10 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Ability FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return AbilityTypeTable();
   }
-  Ability() {
-    memset(static_cast<void *>(this), 0, sizeof(Ability));
+  Ability()
+      : id_(0),
+        distance_(0)
+  {
   }
   Ability(uint32_t _id, uint32_t _distance)
       : id_(flatbuffers::EndianScalar(_id)),
diff --git a/tests/namespace_test/namespace_test1_generated.h b/tests/namespace_test/namespace_test1_generated.h
index 7212276805..6fc00f4b2b 100644
--- a/tests/namespace_test/namespace_test1_generated.h
+++ b/tests/namespace_test/namespace_test1_generated.h
@@ -66,8 +66,10 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) StructInNestedNS FLATBUFFERS_FINAL_CLASS
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return StructInNestedNSTypeTable();
   }
-  StructInNestedNS() {
-    memset(static_cast<void *>(this), 0, sizeof(StructInNestedNS));
+  StructInNestedNS()
+      : a_(0),
+        b_(0)
+  {
   }
   StructInNestedNS(int32_t _a, int32_t _b)
       : a_(flatbuffers::EndianScalar(_a)),
diff --git a/tests/union_vector/union_vector_generated.h b/tests/union_vector/union_vector_generated.h
index f93dbf025b..51e0f139c1 100644
--- a/tests/union_vector/union_vector_generated.h
+++ b/tests/union_vector/union_vector_generated.h
@@ -202,8 +202,9 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Rapunzel FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return RapunzelTypeTable();
   }
-  Rapunzel() {
-    memset(static_cast<void *>(this), 0, sizeof(Rapunzel));
+  Rapunzel()
+      : hair_length_(0)
+  {
   }
   Rapunzel(int32_t _hair_length)
       : hair_length_(flatbuffers::EndianScalar(_hair_length)) {
@@ -235,8 +236,9 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) BookReader FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return BookReaderTypeTable();
   }
-  BookReader() {
-    memset(static_cast<void *>(this), 0, sizeof(BookReader));
+  BookReader()
+      : books_read_(0)
+  {
   }
   BookReader(int32_t _books_read)
       : books_read_(flatbuffers::EndianScalar(_books_read)) {

From d23de8ed216ab7332d457413c86a40b0b6014b69 Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Fri, 29 May 2020 18:51:29 +0300
Subject: [PATCH 05/13] [C++] forgotten test

---
 tests/native_type_test_generated.h | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/tests/native_type_test_generated.h b/tests/native_type_test_generated.h
index d591a4e939..7b96977291 100644
--- a/tests/native_type_test_generated.h
+++ b/tests/native_type_test_generated.h
@@ -30,8 +30,11 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector3D FLATBUFFERS_FINAL_CLASS {
   static const flatbuffers::TypeTable *MiniReflectTypeTable() {
     return Vector3DTypeTable();
   }
-  Vector3D() {
-    memset(static_cast<void *>(this), 0, sizeof(Vector3D));
+  Vector3D()
+      : x_(0),
+        y_(0),
+        z_(0)
+  {
   }
   Vector3D(float _x, float _y, float _z)
       : x_(flatbuffers::EndianScalar(_x)),

From 63e3723eeea093d37ec05f893cb5bd23f9495341 Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Fri, 29 May 2020 20:04:43 +0300
Subject: [PATCH 06/13] [C++] curly brace by code style

---
 samples/monster_generated.h                          | 3 +--
 src/idl_gen_cpp.cpp                                  | 3 +--
 tests/arrays_test_generated.h                        | 6 ++----
 tests/cpp17/generated_cpp17/monster_test_generated.h | 9 +++------
 tests/monster_test_generated.h                       | 9 +++------
 tests/namespace_test/namespace_test1_generated.h     | 3 +--
 tests/native_type_test_generated.h                   | 3 +--
 tests/union_vector/union_vector_generated.h          | 6 ++----
 8 files changed, 14 insertions(+), 28 deletions(-)

diff --git a/samples/monster_generated.h b/samples/monster_generated.h
index ab88a767eb..42482f6ed4 100644
--- a/samples/monster_generated.h
+++ b/samples/monster_generated.h
@@ -182,8 +182,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
   Vec3()
       : x_(0),
         y_(0),
-        z_(0)
-  {
+        z_(0) {
   }
   Vec3(float _x, float _y, float _z)
       : x_(flatbuffers::EndianScalar(_x)),
diff --git a/src/idl_gen_cpp.cpp b/src/idl_gen_cpp.cpp
index 8e26ab0935..5c69a369ed 100644
--- a/src/idl_gen_cpp.cpp
+++ b/src/idl_gen_cpp.cpp
@@ -2894,8 +2894,7 @@ class CppGenerator : public BaseGenerator {
       code_.SetValue("INIT_LIST", init_list);
       code_.SetValue("DEFAULT_CONSTRUCTOR_BODY", body);
       code_ += "  {{STRUCT_NAME}}()";
-      code_ += "      : {{INIT_LIST}}";
-      code_ += "  {";
+      code_ += "      : {{INIT_LIST}} {";
       code_ += "{{DEFAULT_CONSTRUCTOR_BODY}}  }";
     }
   }
diff --git a/tests/arrays_test_generated.h b/tests/arrays_test_generated.h
index 9baacfb636..b7aae3b1ea 100644
--- a/tests/arrays_test_generated.h
+++ b/tests/arrays_test_generated.h
@@ -81,8 +81,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NestedStruct FLATBUFFERS_FINAL_CLASS {
         c_(),
         padding0__(0),
         padding1__(0),
-        d_()
-  {
+        d_() {
     (void)padding0__;
     (void)padding1__;
   }
@@ -159,8 +158,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) ArrayStruct FLATBUFFERS_FINAL_CLASS {
         d_(),
         e_(0),
         padding3__(0),
-        f_()
-  {
+        f_() {
     (void)padding0__;
     (void)padding1__;
     (void)padding2__;
diff --git a/tests/cpp17/generated_cpp17/monster_test_generated.h b/tests/cpp17/generated_cpp17/monster_test_generated.h
index 81f2118905..c8fbb25495 100644
--- a/tests/cpp17/generated_cpp17/monster_test_generated.h
+++ b/tests/cpp17/generated_cpp17/monster_test_generated.h
@@ -480,8 +480,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) Test FLATBUFFERS_FINAL_CLASS {
   Test()
       : a_(0),
         b_(0),
-        padding0__(0)
-  {
+        padding0__(0) {
     (void)padding0__;
   }
   Test(int16_t _a, int8_t _b)
@@ -529,8 +528,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vec3 FLATBUFFERS_FINAL_CLASS {
         test2_(0),
         padding1__(0),
         test3_(),
-        padding2__(0)
-  {
+        padding2__(0) {
     (void)padding0__;
     (void)padding1__;
     (void)padding2__;
@@ -596,8 +594,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Ability FLATBUFFERS_FINAL_CLASS {
   }
   Ability()
       : id_(0),
-        distance_(0)
-  {
+        distance_(0) {
   }
   Ability(uint32_t _id, uint32_t _distance)
       : id_(flatbuffers::EndianScalar(_id)),
diff --git a/tests/monster_test_generated.h b/tests/monster_test_generated.h
index d06bb8a704..38f33eb4ce 100644
--- a/tests/monster_test_generated.h
+++ b/tests/monster_test_generated.h
@@ -595,8 +595,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) Test FLATBUFFERS_FINAL_CLASS {
   Test()
       : a_(0),
         b_(0),
-        padding0__(0)
-  {
+        padding0__(0) {
     (void)padding0__;
   }
   Test(int16_t _a, int8_t _b)
@@ -655,8 +654,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vec3 FLATBUFFERS_FINAL_CLASS {
         test2_(0),
         padding1__(0),
         test3_(),
-        padding2__(0)
-  {
+        padding2__(0) {
     (void)padding0__;
     (void)padding1__;
     (void)padding2__;
@@ -737,8 +735,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Ability FLATBUFFERS_FINAL_CLASS {
   }
   Ability()
       : id_(0),
-        distance_(0)
-  {
+        distance_(0) {
   }
   Ability(uint32_t _id, uint32_t _distance)
       : id_(flatbuffers::EndianScalar(_id)),
diff --git a/tests/namespace_test/namespace_test1_generated.h b/tests/namespace_test/namespace_test1_generated.h
index 6fc00f4b2b..f711b14e18 100644
--- a/tests/namespace_test/namespace_test1_generated.h
+++ b/tests/namespace_test/namespace_test1_generated.h
@@ -68,8 +68,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) StructInNestedNS FLATBUFFERS_FINAL_CLASS
   }
   StructInNestedNS()
       : a_(0),
-        b_(0)
-  {
+        b_(0) {
   }
   StructInNestedNS(int32_t _a, int32_t _b)
       : a_(flatbuffers::EndianScalar(_a)),
diff --git a/tests/native_type_test_generated.h b/tests/native_type_test_generated.h
index 7b96977291..1b38724ff3 100644
--- a/tests/native_type_test_generated.h
+++ b/tests/native_type_test_generated.h
@@ -33,8 +33,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector3D FLATBUFFERS_FINAL_CLASS {
   Vector3D()
       : x_(0),
         y_(0),
-        z_(0)
-  {
+        z_(0) {
   }
   Vector3D(float _x, float _y, float _z)
       : x_(flatbuffers::EndianScalar(_x)),
diff --git a/tests/union_vector/union_vector_generated.h b/tests/union_vector/union_vector_generated.h
index 51e0f139c1..8ff683fcca 100644
--- a/tests/union_vector/union_vector_generated.h
+++ b/tests/union_vector/union_vector_generated.h
@@ -203,8 +203,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Rapunzel FLATBUFFERS_FINAL_CLASS {
     return RapunzelTypeTable();
   }
   Rapunzel()
-      : hair_length_(0)
-  {
+      : hair_length_(0) {
   }
   Rapunzel(int32_t _hair_length)
       : hair_length_(flatbuffers::EndianScalar(_hair_length)) {
@@ -237,8 +236,7 @@ FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) BookReader FLATBUFFERS_FINAL_CLASS {
     return BookReaderTypeTable();
   }
   BookReader()
-      : books_read_(0)
-  {
+      : books_read_(0) {
   }
   BookReader(int32_t _books_read)
       : books_read_(flatbuffers::EndianScalar(_books_read)) {

From 88cdd6ffcbd67d3db2e7fb2090e5bd9b6665eed6 Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Fri, 29 May 2020 21:58:53 +0300
Subject: [PATCH 07/13] [C++] test if memory is 0's after placement new

---
 tests/test.cpp | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/tests/test.cpp b/tests/test.cpp
index 1b00b4d153..073123c135 100644
--- a/tests/test.cpp
+++ b/tests/test.cpp
@@ -3222,6 +3222,22 @@ void FixedLengthArrayTest() {
   // Check alignment
   TEST_EQ(0, reinterpret_cast<uintptr_t>(mArStruct->d()) % 8);
   TEST_EQ(0, reinterpret_cast<uintptr_t>(mArStruct->f()) % 8);
+
+  // Check if default constructor set all memory zero
+  const size_t arr_size = sizeof(MyGame::Example::ArrayStruct);
+  char *non_zero_memory = new char[arr_size];
+  // set memory chunk of size ArrayStruct to 1's
+  std::memset(static_cast<void *>(non_zero_memory), 1, arr_size);
+  // after placement-new it should be all 0's
+  new (non_zero_memory) MyGame::Example::ArrayStruct;
+  bool have_non_zeroes = false;
+  for (size_t i = 0; i < arr_size; ++i) {
+    if (non_zero_memory[i] != 0) {
+      have_non_zeroes = true;
+      break;
+    }
+  }
+  TEST_EQ(have_non_zeroes, false);
 #endif
 }
 

From 228a1571d6df6e11e5dc3de470893215eafae6ef Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Fri, 29 May 2020 22:20:38 +0300
Subject: [PATCH 08/13] [C++] memory leak fix

---
 tests/test.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/tests/test.cpp b/tests/test.cpp
index 073123c135..5fc63cd424 100644
--- a/tests/test.cpp
+++ b/tests/test.cpp
@@ -3238,6 +3238,7 @@ void FixedLengthArrayTest() {
     }
   }
   TEST_EQ(have_non_zeroes, false);
+  delete[] non_zero_memory;
 #endif
 }
 

From 90d7534676bbb621f05bb89fa31b4be15e9e9ab5 Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Fri, 29 May 2020 22:31:54 +0300
Subject: [PATCH 09/13] [C++] simplifying and non-dynamic memory in test

---
 tests/test.cpp | 10 ++--------
 1 file changed, 2 insertions(+), 8 deletions(-)

diff --git a/tests/test.cpp b/tests/test.cpp
index 5fc63cd424..291fde5d18 100644
--- a/tests/test.cpp
+++ b/tests/test.cpp
@@ -3225,20 +3225,14 @@ void FixedLengthArrayTest() {
 
   // Check if default constructor set all memory zero
   const size_t arr_size = sizeof(MyGame::Example::ArrayStruct);
-  char *non_zero_memory = new char[arr_size];
+  char non_zero_memory[arr_size];
   // set memory chunk of size ArrayStruct to 1's
   std::memset(static_cast<void *>(non_zero_memory), 1, arr_size);
   // after placement-new it should be all 0's
   new (non_zero_memory) MyGame::Example::ArrayStruct;
-  bool have_non_zeroes = false;
   for (size_t i = 0; i < arr_size; ++i) {
-    if (non_zero_memory[i] != 0) {
-      have_non_zeroes = true;
-      break;
-    }
+    TEST_EQ(non_zero_memory[i], 0);
   }
-  TEST_EQ(have_non_zeroes, false);
-  delete[] non_zero_memory;
 #endif
 }
 

From e51f2adde7d0c7ba64841e273dbd042bda097ae1 Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Sat, 30 May 2020 13:04:48 +0300
Subject: [PATCH 10/13] [C++] code cleanup

---
 src/idl_gen_cpp.cpp | 30 ++++++++++++++++++------------
 tests/test.cpp      |  3 ++-
 2 files changed, 20 insertions(+), 13 deletions(-)

diff --git a/src/idl_gen_cpp.cpp b/src/idl_gen_cpp.cpp
index 5c69a369ed..57010f5309 100644
--- a/src/idl_gen_cpp.cpp
+++ b/src/idl_gen_cpp.cpp
@@ -2860,15 +2860,20 @@ class CppGenerator : public BaseGenerator {
     bool first_in_init_list = true;
     int padding_initializer_id = 0;
     int padding_body_id = 0;
-    for (const auto field : struct_def.fields.vec) {
+    for (auto it = struct_def.fields.vec.begin();
+         it != struct_def.fields.vec.end();
+         ++it) {
+      const auto field = *it;
       const auto field_name = field->name + "_";
 
-      if (!first_in_init_list) {
-        init_list += ",\n        ";
-      } else {
+      if (first_in_init_list) {
         first_in_init_list = false;
+      } else {
+        init_list += ",";
+        init_list += "\n        ";
       }
 
+      init_list += field_name;
       if (IsStruct(field->value.type) || IsArray(field->value.type)) {
         // this is either default initialization of struct
         // or
@@ -2876,9 +2881,9 @@ class CppGenerator : public BaseGenerator {
         // for each object in array it:
         // * sets it as zeros for POD types (integral, floating point, etc)
         // * calls default constructor for classes/structs
-        init_list += field_name + "()";
+        init_list += "()";
       } else {
-        init_list += field_name + "(0)";
+        init_list += "(0)";
       }
       if (field->padding) {
         GenPadding(*field, &init_list, &padding_initializer_id,
@@ -2914,18 +2919,19 @@ class CppGenerator : public BaseGenerator {
       const auto arg_type = GenTypeGet(field_type, " ", "const ", " &", true);
 
       if (!IsArray(field_type)) {
-        if (!first_arg) {
-          arg_list += ", ";
-        } else {
+        if (first_arg) {
           first_arg = false;
+        } else {
+          arg_list += ", ";
         }
         arg_list += arg_type;
         arg_list += arg_name;
       }
-      if (!first_init) {
-        init_list += ",\n        ";
-      } else {
+      if (first_init) {
         first_init = false;
+      } else {
+        init_list += ",";
+        init_list += "\n        ";
       }
       init_list += member_name;
       if (IsScalar(field_type.base_type)) {
diff --git a/tests/test.cpp b/tests/test.cpp
index 291fde5d18..6edee74877 100644
--- a/tests/test.cpp
+++ b/tests/test.cpp
@@ -3229,7 +3229,8 @@ void FixedLengthArrayTest() {
   // set memory chunk of size ArrayStruct to 1's
   std::memset(static_cast<void *>(non_zero_memory), 1, arr_size);
   // after placement-new it should be all 0's
-  new (non_zero_memory) MyGame::Example::ArrayStruct;
+  MyGame::Example::ArrayStruct *ap = new (non_zero_memory) MyGame::Example::ArrayStruct;
+  (void)ap;
   for (size_t i = 0; i < arr_size; ++i) {
     TEST_EQ(non_zero_memory[i], 0);
   }

From 491c778a23aa0c8796df8beabc4440443e555219 Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Mon, 1 Jun 2020 20:13:50 +0300
Subject: [PATCH 11/13] [C++] disable old-compiler warning

---
 include/flatbuffers/base.h | 1 +
 1 file changed, 1 insertion(+)

diff --git a/include/flatbuffers/base.h b/include/flatbuffers/base.h
index 9557380672..3d7aeb4ace 100644
--- a/include/flatbuffers/base.h
+++ b/include/flatbuffers/base.h
@@ -309,6 +309,7 @@ typedef uintmax_t largest_scalar_t;
 #define FLATBUFFERS_MAX_ALIGNMENT 16
 
 #if defined(_MSC_VER)
+  #pragma warning(disable: 4351) // C4351: new behavior: elements of array ... will be default initialized
   #pragma warning(push)
   #pragma warning(disable: 4127) // C4127: conditional expression is constant
 #endif

From 407fd19600d6ec2e25f4fd45a86cebd9bcbd6fd4 Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Mon, 1 Jun 2020 21:18:00 +0300
Subject: [PATCH 12/13] [C++] windows build fix (try)

---
 tests/test.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/tests/test.cpp b/tests/test.cpp
index 6edee74877..5d15621d7f 100644
--- a/tests/test.cpp
+++ b/tests/test.cpp
@@ -14,6 +14,7 @@
  * limitations under the License.
  */
 #include <cmath>
+#include <new>
 
 #include "flatbuffers/flatbuffers.h"
 #include "flatbuffers/idl.h"

From bc682ad5f9d352d01027dac2931370207f5b5725 Mon Sep 17 00:00:00 2001
From: bakinovsky-m <makbak@ya.ru>
Date: Mon, 1 Jun 2020 23:05:46 +0300
Subject: [PATCH 13/13] [C++] debug-new win build fix

---
 tests/test.cpp | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/tests/test.cpp b/tests/test.cpp
index 5d15621d7f..56883cf963 100644
--- a/tests/test.cpp
+++ b/tests/test.cpp
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 #include <cmath>
-#include <new>
 
 #include "flatbuffers/flatbuffers.h"
 #include "flatbuffers/idl.h"
@@ -3230,7 +3229,13 @@ void FixedLengthArrayTest() {
   // set memory chunk of size ArrayStruct to 1's
   std::memset(static_cast<void *>(non_zero_memory), 1, arr_size);
   // after placement-new it should be all 0's
+#if defined (_MSC_VER) && defined (_DEBUG)
+  #undef new
+#endif
   MyGame::Example::ArrayStruct *ap = new (non_zero_memory) MyGame::Example::ArrayStruct;
+#if defined (_MSC_VER) && defined (_DEBUG)
+  #define new DEBUG_NEW
+#endif
   (void)ap;
   for (size_t i = 0; i < arr_size; ++i) {
     TEST_EQ(non_zero_memory[i], 0);
