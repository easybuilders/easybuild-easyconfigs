# The scrips that generate the MPI F03 interface was broken in 3.3.6-pl1
# The scripts were using fftw3.h from /usr/include, not ../api, and were
# failing silently if fftw3.h was not installed.  This bug led to a
# fftw-3.3.6pl1 release with incomplete mpi/f03 header files.
#
# See commit
# https://github.com/FFTW/fftw3/commit/83092f8efbf872aefe7cfc6ee8fa43412f8e167a
# in FFTW upstream git.
#
# This patch is the result of applying that commit and running the
# maintainer mode scripts.
#
# Ã…ke Sandgren, 2017-03-07
diff -ru fftw-3.3.6-pl1.orig/mpi/f03api.sh fftw-3.3.6-pl1/mpi/f03api.sh
--- fftw-3.3.6-pl1.orig/mpi/f03api.sh	2017-01-15 13:03:24.000000002 +0100
+++ fftw-3.3.6-pl1/mpi/f03api.sh	2017-03-08 15:46:56.000000002 +0100
@@ -37,7 +37,7 @@
 
     echo
     echo "  interface"
-    grep -v 'mpi.h' fftw3-mpi.h | gcc -D__GNUC__=5 -D__i386__ -E - |grep "fftw${p}_mpi_init" |tr ';' '\n' | perl ../api/genf03.pl
+    grep -v 'mpi.h' fftw3-mpi.h | gcc -I../api -D__GNUC__=5 -D__i386__ -E - |grep "fftw${p}_mpi_init" |tr ';' '\n' | perl ../api/genf03.pl
     echo "  end interface"
 
 done
diff -ru fftw-3.3.6-pl1.orig/mpi/f03-wrap.c fftw-3.3.6-pl1/mpi/f03-wrap.c
--- fftw-3.3.6-pl1.orig/mpi/f03-wrap.c	2017-01-16 15:12:37.000000002 +0100
+++ fftw-3.3.6-pl1/mpi/f03-wrap.c	2017-03-08 16:20:11.000000002 +0100
@@ -3,3 +3,282 @@
 #include "fftw3-mpi.h"
 #include "ifftw-mpi.h"
 
+FFTW_EXTERN ptrdiff_t XM(local_size_many_transposed_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t block0, ptrdiff_t block1, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start, ptrdiff_t * local_n1, ptrdiff_t * local_1_start);
+FFTW_EXTERN ptrdiff_t XM(local_size_many_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t block0, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start);
+FFTW_EXTERN ptrdiff_t XM(local_size_transposed_f03)(int rnk, const ptrdiff_t * n, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start, ptrdiff_t * local_n1, ptrdiff_t * local_1_start);
+FFTW_EXTERN ptrdiff_t XM(local_size_f03)(int rnk, const ptrdiff_t * n, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start);
+FFTW_EXTERN ptrdiff_t XM(local_size_many_1d_f03)(ptrdiff_t n0, ptrdiff_t howmany, MPI_Fint f_comm, int sign, unsigned flags, ptrdiff_t * local_ni, ptrdiff_t * local_i_start, ptrdiff_t * local_no, ptrdiff_t * local_o_start);
+FFTW_EXTERN ptrdiff_t XM(local_size_1d_f03)(ptrdiff_t n0, MPI_Fint f_comm, int sign, unsigned flags, ptrdiff_t * local_ni, ptrdiff_t * local_i_start, ptrdiff_t * local_no, ptrdiff_t * local_o_start);
+FFTW_EXTERN ptrdiff_t XM(local_size_2d_f03)(ptrdiff_t n0, ptrdiff_t n1, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start);
+FFTW_EXTERN ptrdiff_t XM(local_size_2d_transposed_f03)(ptrdiff_t n0, ptrdiff_t n1, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start, ptrdiff_t * local_n1, ptrdiff_t * local_1_start);
+FFTW_EXTERN ptrdiff_t XM(local_size_3d_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start);
+FFTW_EXTERN ptrdiff_t XM(local_size_3d_transposed_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start, ptrdiff_t * local_n1, ptrdiff_t * local_1_start);
+FFTW_EXTERN X(plan) XM(plan_many_transpose_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t howmany, ptrdiff_t block0, ptrdiff_t block1, R * in, R * out, MPI_Fint f_comm, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_transpose_f03)(ptrdiff_t n0, ptrdiff_t n1, R * in, R * out, MPI_Fint f_comm, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_many_dft_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t block, ptrdiff_t tblock, X(complex) * in, X(complex) * out, MPI_Fint f_comm, int sign, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_dft_f03)(int rnk, const ptrdiff_t * n, X(complex) * in, X(complex) * out, MPI_Fint f_comm, int sign, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_dft_1d_f03)(ptrdiff_t n0, X(complex) * in, X(complex) * out, MPI_Fint f_comm, int sign, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_dft_2d_f03)(ptrdiff_t n0, ptrdiff_t n1, X(complex) * in, X(complex) * out, MPI_Fint f_comm, int sign, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_dft_3d_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, X(complex) * in, X(complex) * out, MPI_Fint f_comm, int sign, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_many_r2r_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, R * in, R * out, MPI_Fint f_comm, const X(r2r_kind) * kind, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_r2r_f03)(int rnk, const ptrdiff_t * n, R * in, R * out, MPI_Fint f_comm, const X(r2r_kind) * kind, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_r2r_2d_f03)(ptrdiff_t n0, ptrdiff_t n1, R * in, R * out, MPI_Fint f_comm, X(r2r_kind) kind0, X(r2r_kind) kind1, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_r2r_3d_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, R * in, R * out, MPI_Fint f_comm, X(r2r_kind) kind0, X(r2r_kind) kind1, X(r2r_kind) kind2, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_many_dft_r2c_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, R * in, X(complex) * out, MPI_Fint f_comm, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_dft_r2c_f03)(int rnk, const ptrdiff_t * n, R * in, X(complex) * out, MPI_Fint f_comm, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_dft_r2c_2d_f03)(ptrdiff_t n0, ptrdiff_t n1, R * in, X(complex) * out, MPI_Fint f_comm, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_dft_r2c_3d_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, R * in, X(complex) * out, MPI_Fint f_comm, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_many_dft_c2r_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, X(complex) * in, R * out, MPI_Fint f_comm, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_dft_c2r_f03)(int rnk, const ptrdiff_t * n, X(complex) * in, R * out, MPI_Fint f_comm, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_dft_c2r_2d_f03)(ptrdiff_t n0, ptrdiff_t n1, X(complex) * in, R * out, MPI_Fint f_comm, unsigned flags);
+FFTW_EXTERN X(plan) XM(plan_dft_c2r_3d_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, X(complex) * in, R * out, MPI_Fint f_comm, unsigned flags);
+FFTW_EXTERN void XM(gather_wisdom_f03)(MPI_Fint f_comm_);
+FFTW_EXTERN void XM(broadcast_wisdom_f03)(MPI_Fint f_comm_);
+
+ptrdiff_t XM(local_size_many_transposed_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t block0, ptrdiff_t block1, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start, ptrdiff_t * local_n1, ptrdiff_t * local_1_start)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(local_size_many_transposed)(rnk,n,howmany,block0,block1,comm,local_n0,local_0_start,local_n1,local_1_start);
+}
+
+ptrdiff_t XM(local_size_many_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t block0, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(local_size_many)(rnk,n,howmany,block0,comm,local_n0,local_0_start);
+}
+
+ptrdiff_t XM(local_size_transposed_f03)(int rnk, const ptrdiff_t * n, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start, ptrdiff_t * local_n1, ptrdiff_t * local_1_start)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(local_size_transposed)(rnk,n,comm,local_n0,local_0_start,local_n1,local_1_start);
+}
+
+ptrdiff_t XM(local_size_f03)(int rnk, const ptrdiff_t * n, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(local_size)(rnk,n,comm,local_n0,local_0_start);
+}
+
+ptrdiff_t XM(local_size_many_1d_f03)(ptrdiff_t n0, ptrdiff_t howmany, MPI_Fint f_comm, int sign, unsigned flags, ptrdiff_t * local_ni, ptrdiff_t * local_i_start, ptrdiff_t * local_no, ptrdiff_t * local_o_start)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(local_size_many_1d)(n0,howmany,comm,sign,flags,local_ni,local_i_start,local_no,local_o_start);
+}
+
+ptrdiff_t XM(local_size_1d_f03)(ptrdiff_t n0, MPI_Fint f_comm, int sign, unsigned flags, ptrdiff_t * local_ni, ptrdiff_t * local_i_start, ptrdiff_t * local_no, ptrdiff_t * local_o_start)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(local_size_1d)(n0,comm,sign,flags,local_ni,local_i_start,local_no,local_o_start);
+}
+
+ptrdiff_t XM(local_size_2d_f03)(ptrdiff_t n0, ptrdiff_t n1, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(local_size_2d)(n0,n1,comm,local_n0,local_0_start);
+}
+
+ptrdiff_t XM(local_size_2d_transposed_f03)(ptrdiff_t n0, ptrdiff_t n1, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start, ptrdiff_t * local_n1, ptrdiff_t * local_1_start)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(local_size_2d_transposed)(n0,n1,comm,local_n0,local_0_start,local_n1,local_1_start);
+}
+
+ptrdiff_t XM(local_size_3d_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(local_size_3d)(n0,n1,n2,comm,local_n0,local_0_start);
+}
+
+ptrdiff_t XM(local_size_3d_transposed_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, MPI_Fint f_comm, ptrdiff_t * local_n0, ptrdiff_t * local_0_start, ptrdiff_t * local_n1, ptrdiff_t * local_1_start)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(local_size_3d_transposed)(n0,n1,n2,comm,local_n0,local_0_start,local_n1,local_1_start);
+}
+
+X(plan) XM(plan_many_transpose_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t howmany, ptrdiff_t block0, ptrdiff_t block1, R * in, R * out, MPI_Fint f_comm, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_many_transpose)(n0,n1,howmany,block0,block1,in,out,comm,flags);
+}
+
+X(plan) XM(plan_transpose_f03)(ptrdiff_t n0, ptrdiff_t n1, R * in, R * out, MPI_Fint f_comm, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_transpose)(n0,n1,in,out,comm,flags);
+}
+
+X(plan) XM(plan_many_dft_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t block, ptrdiff_t tblock, X(complex) * in, X(complex) * out, MPI_Fint f_comm, int sign, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_many_dft)(rnk,n,howmany,block,tblock,in,out,comm,sign,flags);
+}
+
+X(plan) XM(plan_dft_f03)(int rnk, const ptrdiff_t * n, X(complex) * in, X(complex) * out, MPI_Fint f_comm, int sign, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_dft)(rnk,n,in,out,comm,sign,flags);
+}
+
+X(plan) XM(plan_dft_1d_f03)(ptrdiff_t n0, X(complex) * in, X(complex) * out, MPI_Fint f_comm, int sign, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_dft_1d)(n0,in,out,comm,sign,flags);
+}
+
+X(plan) XM(plan_dft_2d_f03)(ptrdiff_t n0, ptrdiff_t n1, X(complex) * in, X(complex) * out, MPI_Fint f_comm, int sign, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_dft_2d)(n0,n1,in,out,comm,sign,flags);
+}
+
+X(plan) XM(plan_dft_3d_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, X(complex) * in, X(complex) * out, MPI_Fint f_comm, int sign, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_dft_3d)(n0,n1,n2,in,out,comm,sign,flags);
+}
+
+X(plan) XM(plan_many_r2r_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, R * in, R * out, MPI_Fint f_comm, const X(r2r_kind) * kind, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_many_r2r)(rnk,n,howmany,iblock,oblock,in,out,comm,kind,flags);
+}
+
+X(plan) XM(plan_r2r_f03)(int rnk, const ptrdiff_t * n, R * in, R * out, MPI_Fint f_comm, const X(r2r_kind) * kind, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_r2r)(rnk,n,in,out,comm,kind,flags);
+}
+
+X(plan) XM(plan_r2r_2d_f03)(ptrdiff_t n0, ptrdiff_t n1, R * in, R * out, MPI_Fint f_comm, X(r2r_kind) kind0, X(r2r_kind) kind1, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_r2r_2d)(n0,n1,in,out,comm,kind0,kind1,flags);
+}
+
+X(plan) XM(plan_r2r_3d_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, R * in, R * out, MPI_Fint f_comm, X(r2r_kind) kind0, X(r2r_kind) kind1, X(r2r_kind) kind2, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_r2r_3d)(n0,n1,n2,in,out,comm,kind0,kind1,kind2,flags);
+}
+
+X(plan) XM(plan_many_dft_r2c_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, R * in, X(complex) * out, MPI_Fint f_comm, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_many_dft_r2c)(rnk,n,howmany,iblock,oblock,in,out,comm,flags);
+}
+
+X(plan) XM(plan_dft_r2c_f03)(int rnk, const ptrdiff_t * n, R * in, X(complex) * out, MPI_Fint f_comm, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_dft_r2c)(rnk,n,in,out,comm,flags);
+}
+
+X(plan) XM(plan_dft_r2c_2d_f03)(ptrdiff_t n0, ptrdiff_t n1, R * in, X(complex) * out, MPI_Fint f_comm, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_dft_r2c_2d)(n0,n1,in,out,comm,flags);
+}
+
+X(plan) XM(plan_dft_r2c_3d_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, R * in, X(complex) * out, MPI_Fint f_comm, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_dft_r2c_3d)(n0,n1,n2,in,out,comm,flags);
+}
+
+X(plan) XM(plan_many_dft_c2r_f03)(int rnk, const ptrdiff_t * n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, X(complex) * in, R * out, MPI_Fint f_comm, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_many_dft_c2r)(rnk,n,howmany,iblock,oblock,in,out,comm,flags);
+}
+
+X(plan) XM(plan_dft_c2r_f03)(int rnk, const ptrdiff_t * n, X(complex) * in, R * out, MPI_Fint f_comm, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_dft_c2r)(rnk,n,in,out,comm,flags);
+}
+
+X(plan) XM(plan_dft_c2r_2d_f03)(ptrdiff_t n0, ptrdiff_t n1, X(complex) * in, R * out, MPI_Fint f_comm, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_dft_c2r_2d)(n0,n1,in,out,comm,flags);
+}
+
+X(plan) XM(plan_dft_c2r_3d_f03)(ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, X(complex) * in, R * out, MPI_Fint f_comm, unsigned flags)
+{
+     MPI_Comm comm;
+
+     comm = MPI_Comm_f2c(f_comm);
+     return XM(plan_dft_c2r_3d)(n0,n1,n2,in,out,comm,flags);
+}
+
+void XM(gather_wisdom_f03)(MPI_Fint f_comm_)
+{
+     MPI_Comm comm_;
+
+     comm_ = MPI_Comm_f2c(f_comm_);
+     XM(gather_wisdom)(comm_);
+}
+
+void XM(broadcast_wisdom_f03)(MPI_Fint f_comm_)
+{
+     MPI_Comm comm_;
+
+     comm_ = MPI_Comm_f2c(f_comm_);
+     XM(broadcast_wisdom)(comm_);
+}
diff -ru fftw-3.3.6-pl1.orig/mpi/f03-wrap.sh fftw-3.3.6-pl1/mpi/f03-wrap.sh
--- fftw-3.3.6-pl1.orig/mpi/f03-wrap.sh	2017-01-15 13:03:24.000000002 +0100
+++ fftw-3.3.6-pl1/mpi/f03-wrap.sh	2017-03-08 15:46:56.000000002 +0100
@@ -15,8 +15,8 @@
 echo
 
 # Declare prototypes using FFTW_EXTERN, important for Windows DLLs
-grep -v 'mpi.h' fftw3-mpi.h | gcc -E - |grep "fftw_mpi_init" |tr ';' '\n' | grep "MPI_Comm" | perl genf03-wrap.pl | grep "MPI_Fint" | sed 's/^/FFTW_EXTERN /;s/$/;/'
+grep -v 'mpi.h' fftw3-mpi.h | gcc -E -I../api - |grep "fftw_mpi_init" |tr ';' '\n' | grep "MPI_Comm" | perl genf03-wrap.pl | grep "MPI_Fint" | sed 's/^/FFTW_EXTERN /;s/$/;/'
 
-grep -v 'mpi.h' fftw3-mpi.h | gcc -E - |grep "fftw_mpi_init" |tr ';' '\n' | grep "MPI_Comm" | perl genf03-wrap.pl
+grep -v 'mpi.h' fftw3-mpi.h | gcc -E -I../api - |grep "fftw_mpi_init" |tr ';' '\n' | grep "MPI_Comm" | perl genf03-wrap.pl
 
 
diff -ru fftw-3.3.6-pl1.orig/mpi/fftw3l-mpi.f03.in fftw-3.3.6-pl1/mpi/fftw3l-mpi.f03.in
--- fftw-3.3.6-pl1.orig/mpi/fftw3l-mpi.f03.in	2017-01-16 15:12:37.000000002 +0100
+++ fftw-3.3.6-pl1/mpi/fftw3l-mpi.f03.in	2017-03-08 16:20:11.000000002 +0100
@@ -8,4 +8,398 @@
   end type fftwl_mpi_ddim
 
   interface
+    subroutine fftwl_mpi_init() bind(C, name='fftwl_mpi_init')
+      import
+    end subroutine fftwl_mpi_init
+    
+    subroutine fftwl_mpi_cleanup() bind(C, name='fftwl_mpi_cleanup')
+      import
+    end subroutine fftwl_mpi_cleanup
+    
+    integer(C_INTPTR_T) function fftwl_mpi_local_size_many_transposed(rnk,n,howmany,block0,block1,comm,local_n0,local_0_start, &
+                                                                      local_n1,local_1_start) &
+                                 bind(C, name='fftwl_mpi_local_size_many_transposed_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block0
+      integer(C_INTPTR_T), value :: block1
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftwl_mpi_local_size_many_transposed
+    
+    integer(C_INTPTR_T) function fftwl_mpi_local_size_many(rnk,n,howmany,block0,comm,local_n0,local_0_start) &
+                                 bind(C, name='fftwl_mpi_local_size_many_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block0
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftwl_mpi_local_size_many
+    
+    integer(C_INTPTR_T) function fftwl_mpi_local_size_transposed(rnk,n,comm,local_n0,local_0_start,local_n1,local_1_start) &
+                                 bind(C, name='fftwl_mpi_local_size_transposed_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftwl_mpi_local_size_transposed
+    
+    integer(C_INTPTR_T) function fftwl_mpi_local_size(rnk,n,comm,local_n0,local_0_start) bind(C, name='fftwl_mpi_local_size_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftwl_mpi_local_size
+    
+    integer(C_INTPTR_T) function fftwl_mpi_local_size_many_1d(n0,howmany,comm,sign,flags,local_ni,local_i_start,local_no, &
+                                                              local_o_start) bind(C, name='fftwl_mpi_local_size_many_1d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+      integer(C_INTPTR_T), intent(out) :: local_ni
+      integer(C_INTPTR_T), intent(out) :: local_i_start
+      integer(C_INTPTR_T), intent(out) :: local_no
+      integer(C_INTPTR_T), intent(out) :: local_o_start
+    end function fftwl_mpi_local_size_many_1d
+    
+    integer(C_INTPTR_T) function fftwl_mpi_local_size_1d(n0,comm,sign,flags,local_ni,local_i_start,local_no,local_o_start) &
+                                 bind(C, name='fftwl_mpi_local_size_1d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+      integer(C_INTPTR_T), intent(out) :: local_ni
+      integer(C_INTPTR_T), intent(out) :: local_i_start
+      integer(C_INTPTR_T), intent(out) :: local_no
+      integer(C_INTPTR_T), intent(out) :: local_o_start
+    end function fftwl_mpi_local_size_1d
+    
+    integer(C_INTPTR_T) function fftwl_mpi_local_size_2d(n0,n1,comm,local_n0,local_0_start) &
+                                 bind(C, name='fftwl_mpi_local_size_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftwl_mpi_local_size_2d
+    
+    integer(C_INTPTR_T) function fftwl_mpi_local_size_2d_transposed(n0,n1,comm,local_n0,local_0_start,local_n1,local_1_start) &
+                                 bind(C, name='fftwl_mpi_local_size_2d_transposed_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftwl_mpi_local_size_2d_transposed
+    
+    integer(C_INTPTR_T) function fftwl_mpi_local_size_3d(n0,n1,n2,comm,local_n0,local_0_start) &
+                                 bind(C, name='fftwl_mpi_local_size_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftwl_mpi_local_size_3d
+    
+    integer(C_INTPTR_T) function fftwl_mpi_local_size_3d_transposed(n0,n1,n2,comm,local_n0,local_0_start,local_n1,local_1_start) &
+                                 bind(C, name='fftwl_mpi_local_size_3d_transposed_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftwl_mpi_local_size_3d_transposed
+    
+    type(C_PTR) function fftwl_mpi_plan_many_transpose(n0,n1,howmany,block0,block1,in,out,comm,flags) &
+                         bind(C, name='fftwl_mpi_plan_many_transpose_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block0
+      integer(C_INTPTR_T), value :: block1
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_many_transpose
+    
+    type(C_PTR) function fftwl_mpi_plan_transpose(n0,n1,in,out,comm,flags) bind(C, name='fftwl_mpi_plan_transpose_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_transpose
+    
+    type(C_PTR) function fftwl_mpi_plan_many_dft(rnk,n,howmany,block,tblock,in,out,comm,sign,flags) &
+                         bind(C, name='fftwl_mpi_plan_many_dft_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block
+      integer(C_INTPTR_T), value :: tblock
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_many_dft
+    
+    type(C_PTR) function fftwl_mpi_plan_dft(rnk,n,in,out,comm,sign,flags) bind(C, name='fftwl_mpi_plan_dft_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_dft
+    
+    type(C_PTR) function fftwl_mpi_plan_dft_1d(n0,in,out,comm,sign,flags) bind(C, name='fftwl_mpi_plan_dft_1d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_dft_1d
+    
+    type(C_PTR) function fftwl_mpi_plan_dft_2d(n0,n1,in,out,comm,sign,flags) bind(C, name='fftwl_mpi_plan_dft_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_dft_2d
+    
+    type(C_PTR) function fftwl_mpi_plan_dft_3d(n0,n1,n2,in,out,comm,sign,flags) bind(C, name='fftwl_mpi_plan_dft_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_dft_3d
+    
+    type(C_PTR) function fftwl_mpi_plan_many_r2r(rnk,n,howmany,iblock,oblock,in,out,comm,kind,flags) &
+                         bind(C, name='fftwl_mpi_plan_many_r2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: iblock
+      integer(C_INTPTR_T), value :: oblock
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), dimension(*), intent(in) :: kind
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_many_r2r
+    
+    type(C_PTR) function fftwl_mpi_plan_r2r(rnk,n,in,out,comm,kind,flags) bind(C, name='fftwl_mpi_plan_r2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), dimension(*), intent(in) :: kind
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_r2r
+    
+    type(C_PTR) function fftwl_mpi_plan_r2r_2d(n0,n1,in,out,comm,kind0,kind1,flags) bind(C, name='fftwl_mpi_plan_r2r_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), value :: kind0
+      integer(C_FFTW_R2R_KIND), value :: kind1
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_r2r_2d
+    
+    type(C_PTR) function fftwl_mpi_plan_r2r_3d(n0,n1,n2,in,out,comm,kind0,kind1,kind2,flags) &
+                         bind(C, name='fftwl_mpi_plan_r2r_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), value :: kind0
+      integer(C_FFTW_R2R_KIND), value :: kind1
+      integer(C_FFTW_R2R_KIND), value :: kind2
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_r2r_3d
+    
+    type(C_PTR) function fftwl_mpi_plan_many_dft_r2c(rnk,n,howmany,iblock,oblock,in,out,comm,flags) &
+                         bind(C, name='fftwl_mpi_plan_many_dft_r2c_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: iblock
+      integer(C_INTPTR_T), value :: oblock
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: in
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_many_dft_r2c
+    
+    type(C_PTR) function fftwl_mpi_plan_dft_r2c(rnk,n,in,out,comm,flags) bind(C, name='fftwl_mpi_plan_dft_r2c_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: in
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_dft_r2c
+    
+    type(C_PTR) function fftwl_mpi_plan_dft_r2c_2d(n0,n1,in,out,comm,flags) bind(C, name='fftwl_mpi_plan_dft_r2c_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: in
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_dft_r2c_2d
+    
+    type(C_PTR) function fftwl_mpi_plan_dft_r2c_3d(n0,n1,n2,in,out,comm,flags) bind(C, name='fftwl_mpi_plan_dft_r2c_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: in
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_dft_r2c_3d
+    
+    type(C_PTR) function fftwl_mpi_plan_many_dft_c2r(rnk,n,howmany,iblock,oblock,in,out,comm,flags) &
+                         bind(C, name='fftwl_mpi_plan_many_dft_c2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: iblock
+      integer(C_INTPTR_T), value :: oblock
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_many_dft_c2r
+    
+    type(C_PTR) function fftwl_mpi_plan_dft_c2r(rnk,n,in,out,comm,flags) bind(C, name='fftwl_mpi_plan_dft_c2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_dft_c2r
+    
+    type(C_PTR) function fftwl_mpi_plan_dft_c2r_2d(n0,n1,in,out,comm,flags) bind(C, name='fftwl_mpi_plan_dft_c2r_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_dft_c2r_2d
+    
+    type(C_PTR) function fftwl_mpi_plan_dft_c2r_3d(n0,n1,n2,in,out,comm,flags) bind(C, name='fftwl_mpi_plan_dft_c2r_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwl_mpi_plan_dft_c2r_3d
+    
+    subroutine fftwl_mpi_gather_wisdom(comm_) bind(C, name='fftwl_mpi_gather_wisdom_f03')
+      import
+      integer(C_MPI_FINT), value :: comm_
+    end subroutine fftwl_mpi_gather_wisdom
+    
+    subroutine fftwl_mpi_broadcast_wisdom(comm_) bind(C, name='fftwl_mpi_broadcast_wisdom_f03')
+      import
+      integer(C_MPI_FINT), value :: comm_
+    end subroutine fftwl_mpi_broadcast_wisdom
+    
+    subroutine fftwl_mpi_execute_dft(p,in,out) bind(C, name='fftwl_mpi_execute_dft')
+      import
+      type(C_PTR), value :: p
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(inout) :: in
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+    end subroutine fftwl_mpi_execute_dft
+    
+    subroutine fftwl_mpi_execute_dft_r2c(p,in,out) bind(C, name='fftwl_mpi_execute_dft_r2c')
+      import
+      type(C_PTR), value :: p
+      real(C_LONG_DOUBLE), dimension(*), intent(inout) :: in
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+    end subroutine fftwl_mpi_execute_dft_r2c
+    
+    subroutine fftwl_mpi_execute_dft_c2r(p,in,out) bind(C, name='fftwl_mpi_execute_dft_c2r')
+      import
+      type(C_PTR), value :: p
+      complex(C_LONG_DOUBLE_COMPLEX), dimension(*), intent(inout) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+    end subroutine fftwl_mpi_execute_dft_c2r
+    
+    subroutine fftwl_mpi_execute_r2r(p,in,out) bind(C, name='fftwl_mpi_execute_r2r')
+      import
+      type(C_PTR), value :: p
+      real(C_LONG_DOUBLE), dimension(*), intent(inout) :: in
+      real(C_LONG_DOUBLE), dimension(*), intent(out) :: out
+    end subroutine fftwl_mpi_execute_r2r
+    
   end interface
diff -ru fftw-3.3.6-pl1.orig/mpi/fftw3-mpi.f03.in fftw-3.3.6-pl1/mpi/fftw3-mpi.f03.in
--- fftw-3.3.6-pl1.orig/mpi/fftw3-mpi.f03.in	2017-01-16 15:12:37.000000002 +0100
+++ fftw-3.3.6-pl1/mpi/fftw3-mpi.f03.in	2017-03-08 16:20:11.000000002 +0100
@@ -13,6 +13,399 @@
   end type fftw_mpi_ddim
 
   interface
+    subroutine fftw_mpi_init() bind(C, name='fftw_mpi_init')
+      import
+    end subroutine fftw_mpi_init
+    
+    subroutine fftw_mpi_cleanup() bind(C, name='fftw_mpi_cleanup')
+      import
+    end subroutine fftw_mpi_cleanup
+    
+    integer(C_INTPTR_T) function fftw_mpi_local_size_many_transposed(rnk,n,howmany,block0,block1,comm,local_n0,local_0_start, &
+                                                                     local_n1,local_1_start) &
+                                 bind(C, name='fftw_mpi_local_size_many_transposed_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block0
+      integer(C_INTPTR_T), value :: block1
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftw_mpi_local_size_many_transposed
+    
+    integer(C_INTPTR_T) function fftw_mpi_local_size_many(rnk,n,howmany,block0,comm,local_n0,local_0_start) &
+                                 bind(C, name='fftw_mpi_local_size_many_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block0
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftw_mpi_local_size_many
+    
+    integer(C_INTPTR_T) function fftw_mpi_local_size_transposed(rnk,n,comm,local_n0,local_0_start,local_n1,local_1_start) &
+                                 bind(C, name='fftw_mpi_local_size_transposed_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftw_mpi_local_size_transposed
+    
+    integer(C_INTPTR_T) function fftw_mpi_local_size(rnk,n,comm,local_n0,local_0_start) bind(C, name='fftw_mpi_local_size_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftw_mpi_local_size
+    
+    integer(C_INTPTR_T) function fftw_mpi_local_size_many_1d(n0,howmany,comm,sign,flags,local_ni,local_i_start,local_no, &
+                                                             local_o_start) bind(C, name='fftw_mpi_local_size_many_1d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+      integer(C_INTPTR_T), intent(out) :: local_ni
+      integer(C_INTPTR_T), intent(out) :: local_i_start
+      integer(C_INTPTR_T), intent(out) :: local_no
+      integer(C_INTPTR_T), intent(out) :: local_o_start
+    end function fftw_mpi_local_size_many_1d
+    
+    integer(C_INTPTR_T) function fftw_mpi_local_size_1d(n0,comm,sign,flags,local_ni,local_i_start,local_no,local_o_start) &
+                                 bind(C, name='fftw_mpi_local_size_1d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+      integer(C_INTPTR_T), intent(out) :: local_ni
+      integer(C_INTPTR_T), intent(out) :: local_i_start
+      integer(C_INTPTR_T), intent(out) :: local_no
+      integer(C_INTPTR_T), intent(out) :: local_o_start
+    end function fftw_mpi_local_size_1d
+    
+    integer(C_INTPTR_T) function fftw_mpi_local_size_2d(n0,n1,comm,local_n0,local_0_start) &
+                                 bind(C, name='fftw_mpi_local_size_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftw_mpi_local_size_2d
+    
+    integer(C_INTPTR_T) function fftw_mpi_local_size_2d_transposed(n0,n1,comm,local_n0,local_0_start,local_n1,local_1_start) &
+                                 bind(C, name='fftw_mpi_local_size_2d_transposed_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftw_mpi_local_size_2d_transposed
+    
+    integer(C_INTPTR_T) function fftw_mpi_local_size_3d(n0,n1,n2,comm,local_n0,local_0_start) &
+                                 bind(C, name='fftw_mpi_local_size_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftw_mpi_local_size_3d
+    
+    integer(C_INTPTR_T) function fftw_mpi_local_size_3d_transposed(n0,n1,n2,comm,local_n0,local_0_start,local_n1,local_1_start) &
+                                 bind(C, name='fftw_mpi_local_size_3d_transposed_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftw_mpi_local_size_3d_transposed
+    
+    type(C_PTR) function fftw_mpi_plan_many_transpose(n0,n1,howmany,block0,block1,in,out,comm,flags) &
+                         bind(C, name='fftw_mpi_plan_many_transpose_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block0
+      integer(C_INTPTR_T), value :: block1
+      real(C_DOUBLE), dimension(*), intent(out) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_many_transpose
+    
+    type(C_PTR) function fftw_mpi_plan_transpose(n0,n1,in,out,comm,flags) bind(C, name='fftw_mpi_plan_transpose_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      real(C_DOUBLE), dimension(*), intent(out) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_transpose
+    
+    type(C_PTR) function fftw_mpi_plan_many_dft(rnk,n,howmany,block,tblock,in,out,comm,sign,flags) &
+                         bind(C, name='fftw_mpi_plan_many_dft_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block
+      integer(C_INTPTR_T), value :: tblock
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_many_dft
+    
+    type(C_PTR) function fftw_mpi_plan_dft(rnk,n,in,out,comm,sign,flags) bind(C, name='fftw_mpi_plan_dft_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_dft
+    
+    type(C_PTR) function fftw_mpi_plan_dft_1d(n0,in,out,comm,sign,flags) bind(C, name='fftw_mpi_plan_dft_1d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_dft_1d
+    
+    type(C_PTR) function fftw_mpi_plan_dft_2d(n0,n1,in,out,comm,sign,flags) bind(C, name='fftw_mpi_plan_dft_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_dft_2d
+    
+    type(C_PTR) function fftw_mpi_plan_dft_3d(n0,n1,n2,in,out,comm,sign,flags) bind(C, name='fftw_mpi_plan_dft_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_dft_3d
+    
+    type(C_PTR) function fftw_mpi_plan_many_r2r(rnk,n,howmany,iblock,oblock,in,out,comm,kind,flags) &
+                         bind(C, name='fftw_mpi_plan_many_r2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: iblock
+      integer(C_INTPTR_T), value :: oblock
+      real(C_DOUBLE), dimension(*), intent(out) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), dimension(*), intent(in) :: kind
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_many_r2r
+    
+    type(C_PTR) function fftw_mpi_plan_r2r(rnk,n,in,out,comm,kind,flags) bind(C, name='fftw_mpi_plan_r2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      real(C_DOUBLE), dimension(*), intent(out) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), dimension(*), intent(in) :: kind
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_r2r
+    
+    type(C_PTR) function fftw_mpi_plan_r2r_2d(n0,n1,in,out,comm,kind0,kind1,flags) bind(C, name='fftw_mpi_plan_r2r_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      real(C_DOUBLE), dimension(*), intent(out) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), value :: kind0
+      integer(C_FFTW_R2R_KIND), value :: kind1
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_r2r_2d
+    
+    type(C_PTR) function fftw_mpi_plan_r2r_3d(n0,n1,n2,in,out,comm,kind0,kind1,kind2,flags) bind(C, name='fftw_mpi_plan_r2r_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      real(C_DOUBLE), dimension(*), intent(out) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), value :: kind0
+      integer(C_FFTW_R2R_KIND), value :: kind1
+      integer(C_FFTW_R2R_KIND), value :: kind2
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_r2r_3d
+    
+    type(C_PTR) function fftw_mpi_plan_many_dft_r2c(rnk,n,howmany,iblock,oblock,in,out,comm,flags) &
+                         bind(C, name='fftw_mpi_plan_many_dft_r2c_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: iblock
+      integer(C_INTPTR_T), value :: oblock
+      real(C_DOUBLE), dimension(*), intent(out) :: in
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_many_dft_r2c
+    
+    type(C_PTR) function fftw_mpi_plan_dft_r2c(rnk,n,in,out,comm,flags) bind(C, name='fftw_mpi_plan_dft_r2c_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      real(C_DOUBLE), dimension(*), intent(out) :: in
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_dft_r2c
+    
+    type(C_PTR) function fftw_mpi_plan_dft_r2c_2d(n0,n1,in,out,comm,flags) bind(C, name='fftw_mpi_plan_dft_r2c_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      real(C_DOUBLE), dimension(*), intent(out) :: in
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_dft_r2c_2d
+    
+    type(C_PTR) function fftw_mpi_plan_dft_r2c_3d(n0,n1,n2,in,out,comm,flags) bind(C, name='fftw_mpi_plan_dft_r2c_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      real(C_DOUBLE), dimension(*), intent(out) :: in
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_dft_r2c_3d
+    
+    type(C_PTR) function fftw_mpi_plan_many_dft_c2r(rnk,n,howmany,iblock,oblock,in,out,comm,flags) &
+                         bind(C, name='fftw_mpi_plan_many_dft_c2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: iblock
+      integer(C_INTPTR_T), value :: oblock
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_many_dft_c2r
+    
+    type(C_PTR) function fftw_mpi_plan_dft_c2r(rnk,n,in,out,comm,flags) bind(C, name='fftw_mpi_plan_dft_c2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_dft_c2r
+    
+    type(C_PTR) function fftw_mpi_plan_dft_c2r_2d(n0,n1,in,out,comm,flags) bind(C, name='fftw_mpi_plan_dft_c2r_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_dft_c2r_2d
+    
+    type(C_PTR) function fftw_mpi_plan_dft_c2r_3d(n0,n1,n2,in,out,comm,flags) bind(C, name='fftw_mpi_plan_dft_c2r_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftw_mpi_plan_dft_c2r_3d
+    
+    subroutine fftw_mpi_gather_wisdom(comm_) bind(C, name='fftw_mpi_gather_wisdom_f03')
+      import
+      integer(C_MPI_FINT), value :: comm_
+    end subroutine fftw_mpi_gather_wisdom
+    
+    subroutine fftw_mpi_broadcast_wisdom(comm_) bind(C, name='fftw_mpi_broadcast_wisdom_f03')
+      import
+      integer(C_MPI_FINT), value :: comm_
+    end subroutine fftw_mpi_broadcast_wisdom
+    
+    subroutine fftw_mpi_execute_dft(p,in,out) bind(C, name='fftw_mpi_execute_dft')
+      import
+      type(C_PTR), value :: p
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(inout) :: in
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+    end subroutine fftw_mpi_execute_dft
+    
+    subroutine fftw_mpi_execute_dft_r2c(p,in,out) bind(C, name='fftw_mpi_execute_dft_r2c')
+      import
+      type(C_PTR), value :: p
+      real(C_DOUBLE), dimension(*), intent(inout) :: in
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(out) :: out
+    end subroutine fftw_mpi_execute_dft_r2c
+    
+    subroutine fftw_mpi_execute_dft_c2r(p,in,out) bind(C, name='fftw_mpi_execute_dft_c2r')
+      import
+      type(C_PTR), value :: p
+      complex(C_DOUBLE_COMPLEX), dimension(*), intent(inout) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+    end subroutine fftw_mpi_execute_dft_c2r
+    
+    subroutine fftw_mpi_execute_r2r(p,in,out) bind(C, name='fftw_mpi_execute_r2r')
+      import
+      type(C_PTR), value :: p
+      real(C_DOUBLE), dimension(*), intent(inout) :: in
+      real(C_DOUBLE), dimension(*), intent(out) :: out
+    end subroutine fftw_mpi_execute_r2r
+    
   end interface
 
   type, bind(C) :: fftwf_mpi_ddim
@@ -20,4 +413,398 @@
   end type fftwf_mpi_ddim
 
   interface
+    subroutine fftwf_mpi_init() bind(C, name='fftwf_mpi_init')
+      import
+    end subroutine fftwf_mpi_init
+    
+    subroutine fftwf_mpi_cleanup() bind(C, name='fftwf_mpi_cleanup')
+      import
+    end subroutine fftwf_mpi_cleanup
+    
+    integer(C_INTPTR_T) function fftwf_mpi_local_size_many_transposed(rnk,n,howmany,block0,block1,comm,local_n0,local_0_start, &
+                                                                      local_n1,local_1_start) &
+                                 bind(C, name='fftwf_mpi_local_size_many_transposed_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block0
+      integer(C_INTPTR_T), value :: block1
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftwf_mpi_local_size_many_transposed
+    
+    integer(C_INTPTR_T) function fftwf_mpi_local_size_many(rnk,n,howmany,block0,comm,local_n0,local_0_start) &
+                                 bind(C, name='fftwf_mpi_local_size_many_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block0
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftwf_mpi_local_size_many
+    
+    integer(C_INTPTR_T) function fftwf_mpi_local_size_transposed(rnk,n,comm,local_n0,local_0_start,local_n1,local_1_start) &
+                                 bind(C, name='fftwf_mpi_local_size_transposed_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftwf_mpi_local_size_transposed
+    
+    integer(C_INTPTR_T) function fftwf_mpi_local_size(rnk,n,comm,local_n0,local_0_start) bind(C, name='fftwf_mpi_local_size_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftwf_mpi_local_size
+    
+    integer(C_INTPTR_T) function fftwf_mpi_local_size_many_1d(n0,howmany,comm,sign,flags,local_ni,local_i_start,local_no, &
+                                                              local_o_start) bind(C, name='fftwf_mpi_local_size_many_1d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+      integer(C_INTPTR_T), intent(out) :: local_ni
+      integer(C_INTPTR_T), intent(out) :: local_i_start
+      integer(C_INTPTR_T), intent(out) :: local_no
+      integer(C_INTPTR_T), intent(out) :: local_o_start
+    end function fftwf_mpi_local_size_many_1d
+    
+    integer(C_INTPTR_T) function fftwf_mpi_local_size_1d(n0,comm,sign,flags,local_ni,local_i_start,local_no,local_o_start) &
+                                 bind(C, name='fftwf_mpi_local_size_1d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+      integer(C_INTPTR_T), intent(out) :: local_ni
+      integer(C_INTPTR_T), intent(out) :: local_i_start
+      integer(C_INTPTR_T), intent(out) :: local_no
+      integer(C_INTPTR_T), intent(out) :: local_o_start
+    end function fftwf_mpi_local_size_1d
+    
+    integer(C_INTPTR_T) function fftwf_mpi_local_size_2d(n0,n1,comm,local_n0,local_0_start) &
+                                 bind(C, name='fftwf_mpi_local_size_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftwf_mpi_local_size_2d
+    
+    integer(C_INTPTR_T) function fftwf_mpi_local_size_2d_transposed(n0,n1,comm,local_n0,local_0_start,local_n1,local_1_start) &
+                                 bind(C, name='fftwf_mpi_local_size_2d_transposed_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftwf_mpi_local_size_2d_transposed
+    
+    integer(C_INTPTR_T) function fftwf_mpi_local_size_3d(n0,n1,n2,comm,local_n0,local_0_start) &
+                                 bind(C, name='fftwf_mpi_local_size_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+    end function fftwf_mpi_local_size_3d
+    
+    integer(C_INTPTR_T) function fftwf_mpi_local_size_3d_transposed(n0,n1,n2,comm,local_n0,local_0_start,local_n1,local_1_start) &
+                                 bind(C, name='fftwf_mpi_local_size_3d_transposed_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INTPTR_T), intent(out) :: local_n0
+      integer(C_INTPTR_T), intent(out) :: local_0_start
+      integer(C_INTPTR_T), intent(out) :: local_n1
+      integer(C_INTPTR_T), intent(out) :: local_1_start
+    end function fftwf_mpi_local_size_3d_transposed
+    
+    type(C_PTR) function fftwf_mpi_plan_many_transpose(n0,n1,howmany,block0,block1,in,out,comm,flags) &
+                         bind(C, name='fftwf_mpi_plan_many_transpose_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block0
+      integer(C_INTPTR_T), value :: block1
+      real(C_FLOAT), dimension(*), intent(out) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_many_transpose
+    
+    type(C_PTR) function fftwf_mpi_plan_transpose(n0,n1,in,out,comm,flags) bind(C, name='fftwf_mpi_plan_transpose_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      real(C_FLOAT), dimension(*), intent(out) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_transpose
+    
+    type(C_PTR) function fftwf_mpi_plan_many_dft(rnk,n,howmany,block,tblock,in,out,comm,sign,flags) &
+                         bind(C, name='fftwf_mpi_plan_many_dft_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: block
+      integer(C_INTPTR_T), value :: tblock
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_many_dft
+    
+    type(C_PTR) function fftwf_mpi_plan_dft(rnk,n,in,out,comm,sign,flags) bind(C, name='fftwf_mpi_plan_dft_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_dft
+    
+    type(C_PTR) function fftwf_mpi_plan_dft_1d(n0,in,out,comm,sign,flags) bind(C, name='fftwf_mpi_plan_dft_1d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_dft_1d
+    
+    type(C_PTR) function fftwf_mpi_plan_dft_2d(n0,n1,in,out,comm,sign,flags) bind(C, name='fftwf_mpi_plan_dft_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_dft_2d
+    
+    type(C_PTR) function fftwf_mpi_plan_dft_3d(n0,n1,n2,in,out,comm,sign,flags) bind(C, name='fftwf_mpi_plan_dft_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: in
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: sign
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_dft_3d
+    
+    type(C_PTR) function fftwf_mpi_plan_many_r2r(rnk,n,howmany,iblock,oblock,in,out,comm,kind,flags) &
+                         bind(C, name='fftwf_mpi_plan_many_r2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: iblock
+      integer(C_INTPTR_T), value :: oblock
+      real(C_FLOAT), dimension(*), intent(out) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), dimension(*), intent(in) :: kind
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_many_r2r
+    
+    type(C_PTR) function fftwf_mpi_plan_r2r(rnk,n,in,out,comm,kind,flags) bind(C, name='fftwf_mpi_plan_r2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      real(C_FLOAT), dimension(*), intent(out) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), dimension(*), intent(in) :: kind
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_r2r
+    
+    type(C_PTR) function fftwf_mpi_plan_r2r_2d(n0,n1,in,out,comm,kind0,kind1,flags) bind(C, name='fftwf_mpi_plan_r2r_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      real(C_FLOAT), dimension(*), intent(out) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), value :: kind0
+      integer(C_FFTW_R2R_KIND), value :: kind1
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_r2r_2d
+    
+    type(C_PTR) function fftwf_mpi_plan_r2r_3d(n0,n1,n2,in,out,comm,kind0,kind1,kind2,flags) &
+                         bind(C, name='fftwf_mpi_plan_r2r_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      real(C_FLOAT), dimension(*), intent(out) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_FFTW_R2R_KIND), value :: kind0
+      integer(C_FFTW_R2R_KIND), value :: kind1
+      integer(C_FFTW_R2R_KIND), value :: kind2
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_r2r_3d
+    
+    type(C_PTR) function fftwf_mpi_plan_many_dft_r2c(rnk,n,howmany,iblock,oblock,in,out,comm,flags) &
+                         bind(C, name='fftwf_mpi_plan_many_dft_r2c_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: iblock
+      integer(C_INTPTR_T), value :: oblock
+      real(C_FLOAT), dimension(*), intent(out) :: in
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_many_dft_r2c
+    
+    type(C_PTR) function fftwf_mpi_plan_dft_r2c(rnk,n,in,out,comm,flags) bind(C, name='fftwf_mpi_plan_dft_r2c_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      real(C_FLOAT), dimension(*), intent(out) :: in
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_dft_r2c
+    
+    type(C_PTR) function fftwf_mpi_plan_dft_r2c_2d(n0,n1,in,out,comm,flags) bind(C, name='fftwf_mpi_plan_dft_r2c_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      real(C_FLOAT), dimension(*), intent(out) :: in
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_dft_r2c_2d
+    
+    type(C_PTR) function fftwf_mpi_plan_dft_r2c_3d(n0,n1,n2,in,out,comm,flags) bind(C, name='fftwf_mpi_plan_dft_r2c_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      real(C_FLOAT), dimension(*), intent(out) :: in
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_dft_r2c_3d
+    
+    type(C_PTR) function fftwf_mpi_plan_many_dft_c2r(rnk,n,howmany,iblock,oblock,in,out,comm,flags) &
+                         bind(C, name='fftwf_mpi_plan_many_dft_c2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      integer(C_INTPTR_T), value :: howmany
+      integer(C_INTPTR_T), value :: iblock
+      integer(C_INTPTR_T), value :: oblock
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_many_dft_c2r
+    
+    type(C_PTR) function fftwf_mpi_plan_dft_c2r(rnk,n,in,out,comm,flags) bind(C, name='fftwf_mpi_plan_dft_c2r_f03')
+      import
+      integer(C_INT), value :: rnk
+      integer(C_INTPTR_T), dimension(*), intent(in) :: n
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_dft_c2r
+    
+    type(C_PTR) function fftwf_mpi_plan_dft_c2r_2d(n0,n1,in,out,comm,flags) bind(C, name='fftwf_mpi_plan_dft_c2r_2d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_dft_c2r_2d
+    
+    type(C_PTR) function fftwf_mpi_plan_dft_c2r_3d(n0,n1,n2,in,out,comm,flags) bind(C, name='fftwf_mpi_plan_dft_c2r_3d_f03')
+      import
+      integer(C_INTPTR_T), value :: n0
+      integer(C_INTPTR_T), value :: n1
+      integer(C_INTPTR_T), value :: n2
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+      integer(C_MPI_FINT), value :: comm
+      integer(C_INT), value :: flags
+    end function fftwf_mpi_plan_dft_c2r_3d
+    
+    subroutine fftwf_mpi_gather_wisdom(comm_) bind(C, name='fftwf_mpi_gather_wisdom_f03')
+      import
+      integer(C_MPI_FINT), value :: comm_
+    end subroutine fftwf_mpi_gather_wisdom
+    
+    subroutine fftwf_mpi_broadcast_wisdom(comm_) bind(C, name='fftwf_mpi_broadcast_wisdom_f03')
+      import
+      integer(C_MPI_FINT), value :: comm_
+    end subroutine fftwf_mpi_broadcast_wisdom
+    
+    subroutine fftwf_mpi_execute_dft(p,in,out) bind(C, name='fftwf_mpi_execute_dft')
+      import
+      type(C_PTR), value :: p
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(inout) :: in
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: out
+    end subroutine fftwf_mpi_execute_dft
+    
+    subroutine fftwf_mpi_execute_dft_r2c(p,in,out) bind(C, name='fftwf_mpi_execute_dft_r2c')
+      import
+      type(C_PTR), value :: p
+      real(C_FLOAT), dimension(*), intent(inout) :: in
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(out) :: out
+    end subroutine fftwf_mpi_execute_dft_r2c
+    
+    subroutine fftwf_mpi_execute_dft_c2r(p,in,out) bind(C, name='fftwf_mpi_execute_dft_c2r')
+      import
+      type(C_PTR), value :: p
+      complex(C_FLOAT_COMPLEX), dimension(*), intent(inout) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+    end subroutine fftwf_mpi_execute_dft_c2r
+    
+    subroutine fftwf_mpi_execute_r2r(p,in,out) bind(C, name='fftwf_mpi_execute_r2r')
+      import
+      type(C_PTR), value :: p
+      real(C_FLOAT), dimension(*), intent(inout) :: in
+      real(C_FLOAT), dimension(*), intent(out) :: out
+    end subroutine fftwf_mpi_execute_r2r
+    
   end interface
