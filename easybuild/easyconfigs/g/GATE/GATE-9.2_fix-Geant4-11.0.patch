see https://github.com/OpenGATE/Gate/pull/507 + https://github.com/OpenGATE/Gate/pull/508

From 1a4e09504359feb06ae68b331b7c54fb080e008d Mon Sep 17 00:00:00 2001
From: Christian Pommranz <christian@pommranz.de>
Date: Mon, 4 Apr 2022 21:53:37 +0200
Subject: [PATCH] Fix gjs compilation against Geant4 v11.0

closes #507
---
 cluster_tools/jobsplitter/gjs.cc              |   2 +-
 .../jobsplitter/src/GateMacfileParser.cc      | 125 +++++++++---------
 .../jobsplitter/src/GateToPlatform.cc         |   4 +-
 3 files changed, 66 insertions(+), 65 deletions(-)

diff --git a/cluster_tools/jobsplitter/gjs.cc b/cluster_tools/jobsplitter/gjs.cc
index 6f786a958..5f6be6a43 100644
--- a/cluster_tools/jobsplitter/gjs.cc
+++ b/cluster_tools/jobsplitter/gjs.cc
@@ -140,7 +140,7 @@ int main(int argc,char** argv)
 		if (size>4 && indicator==0)
 		{
 			G4String ss(argv[nextArg]);
-			if (ss.contains(".mac"))
+			if (G4StrUtil::contains(ss, ".mac"))
 			{
 				indicator=1;
 				macfile=argv[nextArg];
diff --git a/cluster_tools/jobsplitter/src/GateMacfileParser.cc b/cluster_tools/jobsplitter/src/GateMacfileParser.cc
index e01c97d74..bc45838f8 100644
--- a/cluster_tools/jobsplitter/src/GateMacfileParser.cc
+++ b/cluster_tools/jobsplitter/src/GateMacfileParser.cc
@@ -122,7 +122,7 @@ G4int GateMacfileParser::GenerateResolvedMacros(G4String directory)
 void GateMacfileParser::CleanAbort(ofstream& output, ofstream& splitfile)
 {
 	//erase created files and the directory before error exit
-	if( outputDir.contains(".Gate/") )
+	if( G4StrUtil::contains(outputDir, ".Gate/"))
 	{ //just in case to avoid a catastrophe
 		if (output) output.close();
 		if (splitfile) splitfile.close();
@@ -226,7 +226,7 @@ void GateMacfileParser::InsertAliases()
 	nAliases = (G4int)(listOfAliases.size());
 	for (G4int i=1;i<nAliases;i+=2)
 	{
-		while (macline.contains("{"+listOfAliases[i]+"}"))
+		while (G4StrUtil::contains(macline, G4String("{"+listOfAliases[i]+"}")))
 		{
 			insert=listOfAliases[i-1];
 			G4int position=macline.find("{"+listOfAliases[i]+"}",0);
@@ -239,7 +239,7 @@ void GateMacfileParser::InsertAliases()
 
 void GateMacfileParser::AddAliases()
 {
-	if (macline.contains("/control/alias"))
+	if (G4StrUtil::contains(macline, "/control/alias"))
 	{
 		G4String tmpStr = macline.substr(15,256);
 		int position = tmpStr.find(" ");
@@ -260,11 +260,11 @@ void GateMacfileParser::AddAliases()
 
 void GateMacfileParser::InsertSubMacros(ofstream& output,G4int splitNumber,ofstream& splitfile)
 {
-	if (macline.contains("/control/execute"))
+	if (G4StrUtil::contains(macline, "/control/execute"))
 	{
 		char buffer[256];
 		G4String extMacfileName=macline.substr(17,256);
-		if (extMacfileName.contains("/")) ExtractLocalDirectory(extMacfileName);
+		if (G4StrUtil::contains(extMacfileName, "/")) ExtractLocalDirectory(extMacfileName);
 		ifstream extMacfile;
 		extMacfile.open(extMacfileName);
 		if (!extMacfile)
@@ -313,7 +313,7 @@ void GateMacfileParser::DealWithTimeCommands(ofstream& output,G4int splitNumber,
 		lambda=-1.;
 		oldSplitNumber=splitNumber;
 	}
-	if (macline.contains("/gate/cluster/setTimeSplitHalflife"))
+	if (G4StrUtil::contains(macline, "/gate/cluster/setTimeSplitHalflife"))
 	{
 		if (lambda!=-1.)
 		{
@@ -332,14 +332,14 @@ void GateMacfileParser::DealWithTimeCommands(ofstream& output,G4int splitNumber,
                         CleanAbort(output,splitfile);
                         exit(1);
 		}
-		G4String temp=lambda_str(position-1);
-		if (!strcmp(temp,".")) lambda_str=lambda_str+"0";
+		char temp=lambda_str[position-1];
+		if (temp != '.') lambda_str=lambda_str+"0";
 		stringstream lambda_ss(lambda_str);
 		lambda_ss>>lambda;
 		lambda=log(2.0)/lambda;
 		macline="";
 	}
-	else if (macline.contains("/gate/application/setTimeStop"))
+	else if (G4StrUtil::contains(macline, "/gate/application/setTimeStop"))
 	{
 		// We first check if we already encountered the addSlice command
 		if (addSlice!=-1.)
@@ -366,13 +366,13 @@ void GateMacfileParser::DealWithTimeCommands(ofstream& output,G4int splitNumber,
                         CleanAbort(output,splitfile);
                         exit(1);
                 }
-		G4String temp=timeStop_str(position-1);
-		if (!strcmp(temp,".")) timeStop_str=timeStop_str+"0";
+		char temp=timeStop_str[position-1];
+		if (temp != '.') timeStop_str=timeStop_str+"0";
 		stringstream timeStop_ss(timeStop_str);
 		timeStop_ss>>timeStop;
 		splitfile<<"Stop time is: "<<macline.substr(30,256)<<endl;
 	}
-	else if (macline.contains("/gate/application/setTimeStart"))
+	else if (G4StrUtil::contains(macline, "/gate/application/setTimeStart"))
 	{
 		if (timeStart!=-1.)
 		{
@@ -392,13 +392,13 @@ void GateMacfileParser::DealWithTimeCommands(ofstream& output,G4int splitNumber,
                         CleanAbort(output,splitfile);
                         exit(1);
                 }
-		G4String temp=timeStart_str(position-1);
-		if (!strcmp(temp,".")) timeStart_str=timeStart_str+"0";
+		char temp=timeStart_str[position-1];
+		if (temp != '.') timeStart_str=timeStart_str+"0";
 		stringstream timeStart_ss(timeStart_str);
 		timeStart_ss>>timeStart;
 		splitfile<<"Start time is: "<<macline.substr(31,256)<<endl;
 	}
-	else if (macline.contains("/gate/application/setTimeSlice"))
+	else if (G4StrUtil::contains(macline, "/gate/application/setTimeSlice"))
 	{
 		if (addSlice!=-1.)
 		{
@@ -423,13 +423,13 @@ void GateMacfileParser::DealWithTimeCommands(ofstream& output,G4int splitNumber,
                         CleanAbort(output,splitfile);
                         exit(1);
                 }
-                G4String temp=timeSlice_str(position-1);
-                if (!strcmp(temp,".")) timeSlice_str=timeSlice_str+"0";
+                char temp=timeSlice_str[position-1];
+                if (temp != '.') timeSlice_str=timeSlice_str+"0";
                 stringstream timeSlice_ss(timeSlice_str);
                 timeSlice_ss>>timeSlice;
 		splitfile<<"Timeslice is: "<<macline.substr(31,256)<<endl;  
 	}
-	else if (macline.contains("/gate/application/addSlice"))
+	else if (G4StrUtil::contains(macline, "/gate/application/addSlice"))
         {
 		if (readSliceBool)
 		{
@@ -461,8 +461,8 @@ void GateMacfileParser::DealWithTimeCommands(ofstream& output,G4int splitNumber,
                         CleanAbort(output,splitfile);
                         exit(1);
                 }
-                G4String temp=addSlice_str(position-1);
-                if (!strcmp(temp,".")) addSlice_str=addSlice_str+"0";
+                char temp=addSlice_str[position-1];
+                if (temp != '.') addSlice_str=addSlice_str+"0";
                 stringstream addSlice_ss(addSlice_str);
 		G4double newAddSlice;
                 addSlice_ss>>newAddSlice;
@@ -471,7 +471,7 @@ void GateMacfileParser::DealWithTimeCommands(ofstream& output,G4int splitNumber,
                 splitfile<<"New add slice: "<<macline.substr(31,256)<<endl;
 		addSliceBool=true;
         }
-	else if (macline.contains("/gate/application/readTimeSlicesIn"))
+	else if (G4StrUtil::contains(macline, "/gate/application/readTimeSlicesIn"))
 	{
                 if (addSliceBool)
                 {
@@ -533,7 +533,7 @@ void GateMacfileParser::DealWithTimeCommands(ofstream& output,G4int splitNumber,
 		splitfile<<"Global slice read in file: "<<lastTime-firstTime<<" "<<timeUnit<<endl;
 		readSliceBool = true;
 	}
-	else if (macline.contains("gate/application/startDAQ") || macline.contains("gate/application/start"))
+	else if (G4StrUtil::contains(macline, "gate/application/startDAQ") || G4StrUtil::contains(macline, "gate/application/start"))
 	{
 		// to check if there is a DAQ command at all
 		enable[DAQ]=1;
@@ -637,7 +637,7 @@ void GateMacfileParser::DealWithTimeCommands(ofstream& output,G4int splitNumber,
 
 void GateMacfileParser::IgnoreRandomEngineCommand()
 {
-	if (macline.contains("/gate/random/setEngineSeed")) macline="";
+	if (G4StrUtil::contains(macline, "/gate/random/setEngineSeed")) macline="";
 }
 
 void GateMacfileParser::CalculateTimeSplit(G4int splitNumber)
@@ -667,7 +667,7 @@ void GateMacfileParser::ExtractLocalDirectory(G4String macfileName)
 	G4int size=macfileName.length();
 	subString=macfileName.substr(size-1,256);
 	G4int i=size;
-	while (!subString.contains("/"))
+	while (!G4StrUtil::contains(subString, "/"))
 	{
 		i--;
 		subString=macfileName.substr(i,256);
@@ -680,26 +680,26 @@ void GateMacfileParser::LookForEnableOutput()
 {
 	// {ROOT=0,ASCII=1,ARF=2,PROJ=3,ECAT=4,SINO=5,ACCEL=6,LMF=7,CT=8,DAQ=9,MDB=10,SIZE=11,
 	//GPUSPECT=12}
-	if      (macline.contains("/gate/output/root/disable"))            {enable[ROOT]=0;macline="";}
-	else if (macline.contains("/gate/output/root/enable"))             {enable[ROOT]=1;macline="";}
-	else if (macline.contains("/gate/output/ascii/disable"))           {enable[ASCII]=0;macline="";}
-	else if (macline.contains("/gate/output/ascii/enable"))            {enable[ASCII]=1;macline="";}
-        else if (macline.contains("/gate/output/arf/disable"))             {enable[ARF]=0;macline="";}
-        else if (macline.contains("/gate/output/arf/enable"))              {enable[ARF]=1;macline="";}
-	else if (macline.contains("/gate/output/projection/disable"))      {enable[PROJ]=0;macline="";}
-	else if (macline.contains("/gate/output/projection/enable"))       {enable[PROJ]=1;macline="";}
-        else if (macline.contains("/gate/output/ecat7/disable"))           {enable[ECAT]=0;macline="";}
-        else if (macline.contains("/gate/output/ecat7/enable"))            {enable[ECAT]=1;macline="";}
-        else if (macline.contains("/gate/output/sinogram/disable"))        {enable[SINO]=0;macline="";}
-        else if (macline.contains("/gate/output/sinogram/enable"))         {enable[SINO]=1;macline="";}
-        else if (macline.contains("/gate/output/sinoAccel/disable"))       {enable[ACCEL]=0;macline="";}
-        else if (macline.contains("/gate/output/sinoAccel/enable"))        {enable[ACCEL]=1;macline="";}
-	else if (macline.contains("/gate/output/lmf/disable"))             {enable[LMF]=0;macline="";}
-	else if (macline.contains("/gate/output/lmf/enable"))              {enable[LMF]=1;macline="";}
-	else if (macline.contains("/gate/output/imageCT/disable"))         {enable[CT]=0;macline="";}
-	else if (macline.contains("/gate/output/imageCT/enable"))          {enable[CT]=1;macline="";}
-	else if (macline.contains("/gate/output/spectGPU/disable"))         {enable[GPUSPECT]=0;macline="";}
-	else if (macline.contains("/gate/output/spectGPU/enable"))          {enable[GPUSPECT]=1;macline="";}
+	if      (G4StrUtil::contains(macline, "/gate/output/root/disable"))            {enable[ROOT]=0;macline="";}
+	else if (G4StrUtil::contains(macline, "/gate/output/root/enable"))             {enable[ROOT]=1;macline="";}
+	else if (G4StrUtil::contains(macline, "/gate/output/ascii/disable"))           {enable[ASCII]=0;macline="";}
+	else if (G4StrUtil::contains(macline, "/gate/output/ascii/enable"))            {enable[ASCII]=1;macline="";}
+    else if (G4StrUtil::contains(macline, "/gate/output/arf/disable"))             {enable[ARF]=0;macline="";}
+    else if (G4StrUtil::contains(macline, "/gate/output/arf/enable"))              {enable[ARF]=1;macline="";}
+	else if (G4StrUtil::contains(macline, "/gate/output/projection/disable"))      {enable[PROJ]=0;macline="";}
+	else if (G4StrUtil::contains(macline, "/gate/output/projection/enable"))       {enable[PROJ]=1;macline="";}
+    else if (G4StrUtil::contains(macline, "/gate/output/ecat7/disable"))           {enable[ECAT]=0;macline="";}
+    else if (G4StrUtil::contains(macline, "/gate/output/ecat7/enable"))            {enable[ECAT]=1;macline="";}
+    else if (G4StrUtil::contains(macline, "/gate/output/sinogram/disable"))        {enable[SINO]=0;macline="";}
+    else if (G4StrUtil::contains(macline, "/gate/output/sinogram/enable"))         {enable[SINO]=1;macline="";}
+    else if (G4StrUtil::contains(macline, "/gate/output/sinoAccel/disable"))       {enable[ACCEL]=0;macline="";}
+    else if (G4StrUtil::contains(macline, "/gate/output/sinoAccel/enable"))        {enable[ACCEL]=1;macline="";}
+	else if (G4StrUtil::contains(macline, "/gate/output/lmf/disable"))             {enable[LMF]=0;macline="";}
+	else if (G4StrUtil::contains(macline, "/gate/output/lmf/enable"))              {enable[LMF]=1;macline="";}
+	else if (G4StrUtil::contains(macline, "/gate/output/imageCT/disable"))         {enable[CT]=0;macline="";}
+	else if (G4StrUtil::contains(macline, "/gate/output/imageCT/enable"))          {enable[CT]=1;macline="";}
+	else if (G4StrUtil::contains(macline, "/gate/output/spectGPU/disable"))         {enable[GPUSPECT]=0;macline="";}
+	else if (G4StrUtil::contains(macline, "/gate/output/spectGPU/enable"))          {enable[GPUSPECT]=1;macline="";}
 }
 
 void GateMacfileParser::CheckOutputPrint()
@@ -882,7 +882,7 @@ void GateMacfileParser::InsertOutputFileNames(G4int splitNumber,ofstream& splitf
                 AddPWD("/gate/output/spectGPU/setFileName");
                 filenames[GPUSPECT]=1;
         }
-	else if( macline.contains("/gate/geometry/setMaterialDatabase") )
+	else if( G4StrUtil::contains(macline, "/gate/geometry/setMaterialDatabase") )
 	{
 		AddPWD("/gate/geometry/setMaterialDatabase");
 		enable[MDB]=1;
@@ -891,7 +891,7 @@ void GateMacfileParser::InsertOutputFileNames(G4int splitNumber,ofstream& splitf
 
 void GateMacfileParser::SearchForActors(G4int splitNumber,ofstream& output, ofstream& splitfile)
 {
-  if (macline.contains("/gate/actor/addActor"))
+  if (G4StrUtil::contains(macline, "/gate/actor/addActor"))
   {
     G4int pos = macline.find_first_of(" ");
     G4String tmp = macline.substr(pos+1);
@@ -901,7 +901,7 @@ void GateMacfileParser::SearchForActors(G4int splitNumber,ofstream& output, ofst
     listOfActorType.push_back(actorType);
     listOfActorName.push_back(actorName);
   }
-  else if (macline.contains("/gate/actor") && (macline.contains("/save ") || macline.contains("/save\t")))
+  else if (G4StrUtil::contains(macline, "/gate/actor") && (G4StrUtil::contains(macline, "/save ") || G4StrUtil::contains(macline, "/save\t")))
   {
     // We get first the name of the actor in the macro command
     G4String tmp = macline;
@@ -951,14 +951,14 @@ void GateMacfileParser::AddSplitNumberWithExtension(G4int splitNumber)
 
 bool GateMacfileParser::IsComment(G4String line)
 {
-	G4String subString=line(0);
+	char singleChar=line[0];
 	G4int i=0;
-	while (subString.contains(" "))
+	while (singleChar == ' ')
 	{
 		i++;
-		subString=line(i);
+        singleChar=line[i];
 	}
-	if (subString.contains("#") || line.empty()) return true;
+	if (singleChar == '#' || line.empty()) return true;
 	else return false;
 }
 
@@ -966,9 +966,10 @@ void GateMacfileParser::FormatMacline()
 {
 	G4int size=0;
 	G4String subString;
+    char singleChar;
 	G4int position=0;
 	//remove any trailing comments
-	if (macline.contains("#"))
+	if (G4StrUtil::contains(macline, "#"))
 	{
 		position=macline.find("#");
 		G4String temp=macline.substr(0,position);
@@ -976,7 +977,7 @@ void GateMacfileParser::FormatMacline()
 	}
 
 	//remove "\t"
-        while (macline.contains("\t"))
+        while (G4StrUtil::contains(macline, "\t"))
         {
                position = macline.find("\t");
                macline.replace(position,1," ");
@@ -984,11 +985,11 @@ void GateMacfileParser::FormatMacline()
 	
 	//remove trailing spaces
 	size=macline.length();
-	subString=macline(size-1);
-	while (subString.contains(" "))
+    singleChar = macline[size-1];
+	while (singleChar == ' ')
 	{
 		size--;
-		subString=macline(size);
+        singleChar=macline[size];
 	}
 	if (size<(int)macline.length())
 	{
@@ -997,22 +998,22 @@ void GateMacfileParser::FormatMacline()
 	}
 
 	//remove starting spaces
-	subString=macline(0);
+    singleChar=macline[0];
 	size=0;
-	while (subString.contains(" "))
+	while (singleChar == ' ')
 	{
 		size++;
-		subString=macline(size);
+        singleChar=macline[size];
 	}
 	if (size>0)
 	{
 		subString=macline.substr(size,macline.length());
 		macline=subString;
-	} 
+	}
 
 	//remove intermediate spaces >1
 	subString=macline;
-	while (macline.contains("  "))
+	while (G4StrUtil::contains(macline, "  "))
 	{
 		position=macline.find("  ");
 		subString=macline.substr(position+1,macline.length());
@@ -1049,7 +1050,7 @@ const G4String GateMacfileParser::ExtractFileName(G4String key)
 
 bool GateMacfileParser::TreatOutputStream(G4String key, G4String def, G4String& origFile, char* SplitNumberAsString)
 {
-	if (!macline.contains(key)) return false; // nothing to do
+	if (!G4StrUtil::contains(macline, key)) return false; // nothing to do
 	origFile = ExtractFileName(key); // token after key
 	// look for possible unresolved aliases and replace them with default name
 	if( Braced(origFile) )
diff --git a/cluster_tools/jobsplitter/src/GateToPlatform.cc b/cluster_tools/jobsplitter/src/GateToPlatform.cc
index 5b789b1e0..15462d6c9 100644
--- a/cluster_tools/jobsplitter/src/GateToPlatform.cc
+++ b/cluster_tools/jobsplitter/src/GateToPlatform.cc
@@ -330,10 +330,10 @@ int GateToPlatform::GenerateCondorSubmitfile()
 	{
 		scriptFile.getline(buffer,256);
 		scriptline=buffer;
-		if (scriptline.contains("#GJS PART => DO NOT REMOVE")!=0) noCopy=1;
+		if (G4StrUtil::contains(scriptline, "#GJS PART => DO NOT REMOVE")!=0) noCopy=1;
 		if (noCopy==0) 
 		{
-			if (scriptline.contains("Executable")!=0 && scriptline.contains("$GC_EXEC")!=0) 
+			if (G4StrUtil::contains(scriptline, "Executable")!=0 && G4StrUtil::contains(scriptline, "$GC_EXEC")!=0)
 				submitFile<<"Executable     = "<<dir+"Gate"<<endl;
 			else submitFile<<scriptline<<endl;
 			
