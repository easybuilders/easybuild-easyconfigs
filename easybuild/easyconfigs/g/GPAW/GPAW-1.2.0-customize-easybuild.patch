--- gpaw.old/customize.py	2017-05-30 11:03:16.697336085 +0200
+++ gpaw.new/customize.py	2017-05-30 12:38:08.553332357 +0200
@@ -32,33 +32,51 @@
 # mpicompiler = 'mpicc'  # use None if you don't want to build a gpaw-python
 # mpilinker = 'mpicc'
 # platform_id = ''
-# scalapack = False
+scalapack = True
+
+
+# EasyBuild dynamically links to Python libraries
+path = os.environ['EBROOTPYTHON']
+extra_link_args += ['-Wl,-rpath=%s/lib' % path]
+
+
+# EasyBuild uses OpenBLAS with the foss toolchain
+path = os.environ['EBROOTOPENBLAS']
+extra_link_args += ['-Wl,-rpath=%s/lib' % path]
+library_dirs = [os.path.join(path, 'lib')]
+libraries = ['openblas']
+
 
 # Use ScaLAPACK:
 # Warning! At least scalapack 2.0.1 is required!
 # See https://trac.fysik.dtu.dk/projects/gpaw/ticket/230
 if scalapack:
-    libraries += ['scalapack-openmpi',
-                  'blacsCinit-openmpi',
-                  'blacs-openmpi']
+    path = os.environ['EBROOTSCALAPACK']
+    extra_link_args += ['-Wl,-rpath=%s/lib' % path]
+    library_dirs += [os.path.join(path, 'lib')]
+    libraries = ['scalapack'] + libraries
     define_macros += [('GPAW_NO_UNDERSCORE_CBLACS', '1')]
     define_macros += [('GPAW_NO_UNDERSCORE_CSCALAPACK', '1')]
 
+
 # LibXC:
 # In order to link libxc installed in a non-standard location
 # (e.g.: configure --prefix=/home/user/libxc-2.0.1-1), use:
 
 # - static linking:
 if 0:
-    include_dirs += ['/home/user/libxc-2.0.1-1/include']
-    extra_link_args += ['/home/user/libxc-2.0.1-1/lib/libxc.a']
+    path = os.environ['EBROOTLIBXC']
+    include_dirs += [os.path.join(path, 'include')]
+    extra_link_args += [os.path.join(path, 'lib', 'libxc.a')]
     if 'xc' in libraries:
         libraries.remove('xc')
 
 # - dynamic linking (requires rpath or setting LD_LIBRARY_PATH at runtime):
-if 0:
-    include_dirs += ['/home/user/libxc-2.0.1-1/include']
-    library_dirs += ['/home/user/libxc-2.0.1-1/lib']
+if 1:
+    path = os.environ['EBROOTLIBXC']
+    extra_link_args += ['-Wl,-rpath=%s/lib' % path]
+    include_dirs += [os.path.join(path, 'include')]
+    library_dirs += [os.path.join(path, 'lib')]
     # You can use rpath to avoid changing LD_LIBRARY_PATH:
     # extra_link_args += ['-Wl,-rpath=/home/user/libxc-2.0.1-1/lib']
     if 'xc' not in libraries:
@@ -68,15 +86,15 @@
 # libvdwxc:
 if 0:
     libvdwxc = True
-    path = '/home/user/libvdwxc'
+    path = os.environ['EBROOTLIBVDWXC']
     extra_link_args += ['-Wl,-rpath=%s/lib' % path]
-    library_dirs += ['%s/lib' % path]
-    include_dirs += ['%s/include' % path]
+    include_dirs += [os.path.join(path, 'include')]
+    library_dirs += [os.path.join(path, 'lib')]
     libraries += ['vdwxc']
 
 
 # Build MPI-interface into _gpaw.so:
-if 0:
+if 1:
     compiler = 'mpicc'
     define_macros += [('PARALLEL', '1')]
     mpicompiler = None
