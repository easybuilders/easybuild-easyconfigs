This patch creates a configuration file for GPAW for building under
EasyBuild with the Intel toolchain.  The default configuration file
gets the libraries from EasyBuild environment variables, but
unfortunately the FFTW variables are not correct for a shared library
to be loaded into Python (the FFTW library built without -fPIC would
be chosen, and libmkl_rt is not linked).

Author: Jakob Schiotz <schiotz@fysik.dtu.dk>
Date: August 2019.

--- /dev/null	2019-08-01 21:28:47.844000266 +0200
+++ eb_customize.py	2019-08-13 12:38:59.534770064 +0200
@@ -0,0 +1,93 @@
+"""User provided customizations.
+
+Here one changes the default arguments for compiling _gpaw.so (serial)
+and gpaw-python (parallel).
+
+Here are all the lists that can be modified:
+
+* libraries
+* library_dirs
+* include_dirs
+* extra_link_args
+* extra_compile_args
+* runtime_library_dirs
+* extra_objects
+* define_macros
+* mpi_libraries
+* mpi_library_dirs
+* mpi_include_dirs
+* mpi_runtime_library_dirs
+* mpi_define_macros
+
+To override use the form:
+
+    libraries = ['somelib', 'otherlib']
+
+To append use the form
+
+    libraries += ['somelib', 'otherlib']
+"""
+
+# Convert static library specs from EasyBuild to GPAW
+def static_eblibs_to_gpawlibs(lib_specs):
+    return [libfile[3:-2] for libfile in os.getenv(lib_specs).split(',')]
+
+# Clean out any autodetected things, we only want the EasyBuild
+# definitions to be used.
+libraries = []
+mpi_libraries = []
+include_dirs = []
+
+# FFTW should be configured from environment variables, but they do
+# not report the correct names for a dynamically loaded library.
+fftw = True
+# Use Intel MKL
+libraries += ['mkl_sequential','mkl_core', 'fftw3xc_intel_pic', 'mkl_rt', ]
+
+
+# # Use EasyBuild fftw from the active toolchain
+# fftw = os.getenv('FFT_STATIC_LIBS')
+# if fftw:
+#     # Ugly hack: EasyBuild only knows of the versions of the FFTW libs built without -fPIC
+#     for thislib in static_eblibs_to_gpawlibs('FFT_STATIC_LIBS'):
+#         if thislib.startswith('fftw') and thislib.endswith('_intel'):
+#             thislib = thislib + '_pic'
+#     libraries.append(thislib)
+
+# Use ScaLAPACK:
+# Warning! At least scalapack 2.0.1 is required!
+# See https://trac.fysik.dtu.dk/projects/gpaw/ticket/230
+# Use EasyBuild scalapack from the active toolchain
+scalapack = os.getenv('SCALAPACK_STATIC_LIBS')
+if scalapack:
+    mpi_libraries += static_eblibs_to_gpawlibs('SCALAPACK_STATIC_LIBS')
+    mpi_define_macros += [('GPAW_NO_UNDERSCORE_CBLACS', '1')]
+    mpi_define_macros += [('GPAW_NO_UNDERSCORE_CSCALAPACK', '1')]
+
+# Add EasyBuild LAPACK/BLAS libs
+libraries += static_eblibs_to_gpawlibs('LAPACK_STATIC_LIBS')
+libraries += static_eblibs_to_gpawlibs('BLAS_STATIC_LIBS')
+
+# LibXC:
+# Use EasyBuild libxc
+libxc = os.getenv('EBROOTLIBXC')
+if libxc:
+    include_dirs.append(os.path.join(libxc, 'include'))
+    if 'xc' not in libraries:
+        libraries.append('xc')
+
+# libvdwxc:
+# Use EasyBuild libvdwxc
+libvdwxc = os.getenv('EBROOTLIBVDWXC')
+if libvdwxc:
+    include_dirs.append(os.path.join(libvdwxc, 'include'))
+    libraries.append('vdwxc')
+
+# Now add a EasyBuild "cover-all-bases" library_dirs
+library_dirs = os.getenv('LD_LIBRARY_PATH').split(':')
+
+# Build separate gpaw-python
+if 'MPICC' in os.environ:
+    mpicompiler = os.getenv('MPICC')
+    mpilinker = mpicompiler
+
