# qt addWidget and others do not require float, but int
# Thomas Hoffmann, EMBL Heidelberg, structures-it@embl.de, 2023/08
diff -ur eman2-2.99.47/sphire/sphire/bin/sp_gui.py eman2-2.99.47_sphire_qt_cast_int/sphire/sphire/bin/sp_gui.py
--- eman2-2.99.47/sphire/sphire/bin/sp_gui.py	2023-08-24 09:43:43.000000000 +0200
+++ eman2-2.99.47_sphire_qt_cast_int/sphire/sphire/bin/sp_gui.py	2023-08-24 16:03:09.039580421 +0200
@@ -410,8 +410,8 @@
 		# SXLookFeelConst.sxmain_window_height = SXLookFeelConst.screen_height / 2
 		# SXLookFeelConst.sxmain_window_width =SXLookFeelConst.sxmain_window_min_width
 
-		SXLookFeelConst.sxmenu_item_btn_width = SXLookFeelConst.sxmain_window_height * 0.125
-		SXLookFeelConst.grid_distance = SXLookFeelConst.sxmenu_item_btn_width / 10
+		SXLookFeelConst.sxmenu_item_btn_width = int(SXLookFeelConst.sxmain_window_height * 0.125)
+		SXLookFeelConst.grid_distance = int(SXLookFeelConst.sxmenu_item_btn_width / 10)
 
 		SXLookFeelConst.sxmenu_btn_area_min_width = 2 * SXLookFeelConst.sxmenu_item_btn_width + SXLookFeelConst.grid_distance + 18
 		SXLookFeelConst.sxcmd_btn_area_min_width = 240
@@ -483,7 +483,7 @@
 		logo_width = SXLookFeelConst.sxmenu_item_btn_width * 2 + SXLookFeelConst.grid_distance
 
 		# Style of widget
-		self.setFixedSize(logo_width, 0.434 * logo_width)
+		self.setFixedSize(logo_width, int(0.434 * logo_width))
 		self.customButtonStyle = """
 			SXLogoButton {{background-color: rgba(0, 0, 0, 0); border: 0px solid black; border-radius: 0px; image: url("{0}");}}
 			SXLogoButton:focus {{background-color: rgba(0, 0, 0, 0); border: 0px solid grey; border-radius: 0px; image: url("{0}");}}
@@ -1952,24 +1952,24 @@
 		title_layout = QGridLayout()
 		title_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		title_layout.setSpacing(SXLookFeelConst.grid_spacing)
-#		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span, token_widget_min_width)
-#		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_min_width)
-#		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_min_width)
-#		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_min_width)
+#		title_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span0, token_widget_min_width)
+#		title_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span + token_widget_col_span), token_widget_min_width)
+#		title_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span + token_widget_col_span * 2), token_widget_min_width)
+#		title_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span + token_widget_col_span * 3), token_widget_min_width)
 		grid_layout = QGridLayout()
 		grid_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		grid_layout.setSpacing(SXLookFeelConst.grid_spacing)
-		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span, token_widget_min_width)
-		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_min_width)
-		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_min_width)
-		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_min_width)
+		grid_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span), token_widget_min_width)
+		grid_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span + token_widget_col_span), token_widget_min_width)
+		grid_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span + token_widget_col_span * 2), token_widget_min_width)
+		grid_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span + token_widget_col_span * 3), token_widget_min_width)
 		submit_layout = QGridLayout()
 		submit_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		submit_layout.setSpacing(SXLookFeelConst.grid_spacing)
-		submit_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span, token_widget_min_width)
-		submit_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_min_width)
-		submit_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_min_width)
-		submit_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_min_width)
+		submit_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span), token_widget_min_width)
+		submit_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span + token_widget_col_span), token_widget_min_width)
+		submit_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span + token_widget_col_span * 2), token_widget_min_width)
+		submit_layout.setColumnMinimumWidth(int(grid_col_origin + token_label_col_span + token_widget_col_span * 3), token_widget_min_width)
 		title_hbox.addLayout(title_layout)
 #		title_hbox.addStretch(1)
 		title_layout.setColumnStretch(grid_row_origin + token_label_col_span, title_layout.columnStretch(grid_row_origin+token_label_col_span) + 1)
@@ -1983,7 +1983,7 @@
 
 		# Define the tab frame within the tab layout
 		# tab_frame = QFrame()
-		# grid_layout.addWidget(tab_frame, grid_row_origin, grid_col_origin, cmd_frame_row_span, cmd_frame_col_span)
+		# grid_layout.addWidget(tab_frame,int( grid_row_origin),int( grid_col_origin),int( cmd_frame_row_span),1)
 
 		# Start add command token widgets to the grid layout
 		grid_row = grid_row_origin
@@ -1996,7 +1996,7 @@
 			temp_label.setMinimumHeight(title_label_min_height)
 #			temp_label.setFixedWidth(title_label_min_width)
 #			temp_label.setFixedHeight(title_label_min_height)
-			title_layout.addWidget(temp_label, grid_row, grid_col_origin, title_row_span, title_col_span)
+			title_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( title_row_span),1)
 
 			#
 			# NOTE: 2015/11/17 Toshio Moriya
@@ -2008,7 +2008,7 @@
 			temp_label.setMinimumWidth(short_info_min_width)
 			temp_label.setMinimumHeight(short_info_min_height)
 #			temp_label.setFixedHeight(short_info_min_height)
-			title_layout.addWidget(temp_label, grid_row, grid_col_origin + title_col_span, short_info_row_span, short_info_col_span)
+			title_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin + title_col_span),int( short_info_row_span),1)
 
 			grid_row += short_info_row_span
 
@@ -2019,14 +2019,14 @@
 			temp_label.setMinimumHeight(title_label_min_height)
 #			temp_label.setFixedWidth(title_label_min_width)
 #			temp_label.setFixedHeight(title_label_min_height)
-			title_layout.addWidget(temp_label, grid_row, grid_col_origin, title_row_span, title_col_span)
+			title_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( title_row_span),1)
 
 			temp_label = QLabel("Set advanced parameters", self)
 			temp_label.setWordWrap(True)
 			temp_label.setMinimumWidth(short_info_min_width)
 			temp_label.setMinimumHeight(short_info_min_height)
 #			temp_label.setFixedHeight(short_info_min_height)
-			title_layout.addWidget(temp_label, grid_row, grid_col_origin + title_col_span, short_info_row_span, short_info_col_span)
+			title_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin + title_col_span),int( short_info_row_span),1)
 
 		# Add space
 		grid_row += 2
@@ -2062,7 +2062,7 @@
 					widget_index = 0
 					temp_label = QLabel(cmd_token.label[widget_index])
 					temp_label.setMinimumWidth(token_label_min_width)
-					grid_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+					grid_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 
 					assert(cmd_token.is_required == False)
 					restores = cmd_token.restore[widget_index][helical]
@@ -2070,7 +2070,7 @@
 						cmd_token_restore_widget[widget_index] = QPushButton("%s" % restores[0])
 						cmd_token_restore_widget[widget_index].setStyleSheet(custom_style)
 						cmd_token_restore_widget[widget_index].setToolTip('<FONT>'+default_cmd_token_restore_tooltip+'</FONT>')
-						grid_layout.addWidget(cmd_token_restore_widget[widget_index], grid_row, grid_col_origin + token_label_col_span, token_widget_row_span, token_widget_col_span)
+						grid_layout.addWidget(cmd_token_restore_widget[widget_index],int( grid_row),int( grid_col_origin + token_label_col_span),int( token_widget_row_span),1)
 
 						cmd_token_restore_widget[widget_index].clicked.connect(partial(self.handle_restore_widget_event, cmd_token, widget_index))
 					else:
@@ -2081,45 +2081,45 @@
 						cmd_token_restore_widget[widget_index].lineEdit().setAlignment(QtCore.Qt.AlignCenter)
 						cmd_token_restore_widget[widget_index].setStyleSheet(custom_style)
 						cmd_token_restore_widget[widget_index].setToolTip('<FONT>'+default_cmd_token_restore_tooltip+'</FONT>')
-						grid_layout.addWidget(cmd_token_restore_widget[widget_index], grid_row, grid_col_origin + token_label_col_span, token_widget_row_span, token_widget_col_span)
+						grid_layout.addWidget(cmd_token_restore_widget[widget_index],int( grid_row),int( grid_col_origin + token_label_col_span),int( token_widget_row_span),1)
 						cmd_token_restore_widget[widget_index].activated.connect(partial(self.handle_restore_widget_event, cmd_token, widget_index))
 
 					# cmd_token_widget[widget_index] = SXLineEdit(self)
 					cmd_token_widget[widget_index] = SXLineEdit(cmd_token.key_base)
 					cmd_token_widget[widget_index].setText(cmd_token.restore[widget_index][helical][0])
 					cmd_token_widget[widget_index].setToolTip('<FONT>'+cmd_token.help[widget_index]+'</FONT>')
-					grid_layout.addWidget(cmd_token_widget[widget_index], grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
+					grid_layout.addWidget(cmd_token_widget[widget_index],int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span),int( token_widget_row_span),1)
 
 					grid_row +=  1
 
 					# Create widgets for external file path containing above user function
 					widget_index = 1
 					temp_label = QLabel(cmd_token.label[widget_index])
-					grid_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+					grid_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 
 					assert(cmd_token.is_required == False)
 					cmd_token_restore_widget[widget_index] = QPushButton("%s" % cmd_token.restore[widget_index][helical][0])
 					cmd_token_restore_widget[widget_index].setStyleSheet(custom_style)
 					cmd_token_restore_widget[widget_index].setToolTip('<FONT>'+default_cmd_token_restore_tooltip+'</FONT>')
-					grid_layout.addWidget(cmd_token_restore_widget[widget_index], grid_row, grid_col_origin + token_label_col_span, token_widget_row_span, token_widget_col_span)
+					grid_layout.addWidget(cmd_token_restore_widget[widget_index],int( grid_row),int( grid_col_origin + token_label_col_span),int( token_widget_row_span),1)
 
 					cmd_token_widget[widget_index] = SXLineEdit(cmd_token.key_base)
 					cmd_token_widget[widget_index].setText(cmd_token.restore[widget_index][helical][0]) # Because default user functions is internal
 					cmd_token_widget[widget_index].setToolTip('<FONT>'+cmd_token.help[widget_index]+'</FONT>')
-					grid_layout.addWidget(cmd_token_widget[widget_index], grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
+					grid_layout.addWidget(cmd_token_widget[widget_index],int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span),int( token_widget_row_span),1)
 
 					cmd_token_restore_widget[widget_index].clicked.connect(partial(self.handle_restore_widget_event, cmd_token, widget_index))
 
 					file_format = "py"
 					temp_btn = QPushButton("Select Python script")
 					temp_btn.setToolTip('<FONT>'+"Display open file dialog to select .%s python script file</FONT>" % file_format)
-					grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+					grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 					temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget[widget_index], file_format))
 
 					grid_row +=  1
 
 #					temp_label = QLabel(cmd_token.help[widget_index])
-#					grid_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+#					grid_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 #
 #					grid_row +=  1
 
@@ -2128,7 +2128,7 @@
 					# Create label widget
 					temp_label = QLabel(cmd_token.label)
 					temp_label.setMinimumWidth(token_label_min_width)
-					grid_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+					grid_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 
 					# Create widget and associate it to this cmd_token
 					cmd_token_restore_widget = None
@@ -2166,10 +2166,10 @@
 							cmd_token_restore_widget.setEnabled(is_btn_enable)
 							grid_layout.addWidget(
 								cmd_token_restore_widget,
-								grid_row,
-								grid_col_origin + token_label_col_span,
-								token_widget_row_span,
-								token_widget_col_span
+								int(grid_row),
+								int(grid_col_origin + token_label_col_span),
+								int(token_widget_row_span),
+								int(token_widget_col_span)
 								)
 							cmd_token_restore_widget.clicked.connect(partial(self.handle_restore_widget_event, cmd_token))
 						else:
@@ -2213,7 +2213,7 @@
 						else:
 							cmd_token_widget.setCheckState(Qt.Unchecked)
 						cmd_token_widget.setEnabled(not cmd_token.is_locked)
-						grid_layout.addWidget(cmd_token_widget, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
+						grid_layout.addWidget(cmd_token_widget,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span),int( token_widget_row_span),1)
 
 
 					else:
@@ -2241,10 +2241,10 @@
 							cmd_token_restore_widget.setEnabled(is_btn_enable)
 							grid_layout.addWidget(
 								cmd_token_restore_widget,
-								grid_row,
-								grid_col_origin + token_label_col_span,
-								token_widget_row_span,
-								token_widget_col_span
+								int(grid_row),
+								int(grid_col_origin + token_label_col_span),
+								int(token_widget_row_span),
+								int(token_widget_col_span)
 								)
 							cmd_token_restore_widget.clicked.connect(partial(self.handle_restore_widget_event, cmd_token))
 						else:
@@ -2274,17 +2274,17 @@
 							cmd_token_restore_widget.setEnabled(is_btn_enable)
 							grid_layout.addWidget(
 								cmd_token_restore_widget,
-								grid_row,
-								grid_col_origin + token_label_col_span,
-								token_widget_row_span,
-								token_widget_col_span
+								int(grid_row),
+								int(grid_col_origin + token_label_col_span),
+								int(token_widget_row_span),
+								int(token_widget_col_span)
 								)
 							cmd_token_restore_widget.activated.connect(partial(self.handle_restore_widget_event, cmd_token))
 
 						cmd_token_widget = SXLineEdit(cmd_token.key_base)
 						cmd_token_widget.setText(str(restores[0]))
 						cmd_token_widget.setEnabled(not cmd_token.is_locked)
-						grid_layout.addWidget(cmd_token_widget, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
+						grid_layout.addWidget(cmd_token_widget,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span),int( token_widget_row_span),1)
 
 
 						if cmd_token.type == "displayable_list":
@@ -2292,7 +2292,7 @@
 							temp_btn = QPushButton("Select any displayables")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select displayable data files of any supported formats</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2300,13 +2300,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "data2d3d_both":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select any image/volume")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select an image/volume file of any supported format</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2314,78 +2314,78 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "mic_both":
 							file_format = "mrc2d_mic_both"
 							temp_btn = QPushButton("Select MRC mic/movie")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a MRC format micrograph or movie file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select any mic/movie")
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a micrograph or movie file of any supported format</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "mic_one":
 							file_format = "mrc2d_mic_one"
 							temp_btn = QPushButton("Select MRC micrograph")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a MRC format micrograph file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select any micrograph")
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a micrograph file of any supported format</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "mic_one_list":
 							file_format = "mrc2d_mic_one_list"
 							temp_btn = QPushButton("Select MRC micrographs")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select MRC format micrograph files</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select any micrographs")
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select micrograph files of any supported formats</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "mic_stack":
 							file_format = "mrc2d_mic_stack"
 							temp_btn = QPushButton("Select MRC movie")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a MRC format movie file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select any movie")
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a movie file of any supported format</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "data2d_one":
 							file_format = "hdf2d_one"
 							temp_btn = QPushButton("Select HDF image")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a HDF format image file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select any image")
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a image file of any supported format</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "bdb2d_stack" or cmd_token.type == "output_bdb2d_stack":
 							file_format = "bdb2d_stack"
 							temp_btn = QPushButton("Select BDB image stack")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a BDB format image stack file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2393,52 +2393,52 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "data2d_stack":
 							file_format = "bdb2d_stack"
 							temp_btn = QPushButton("Select BDB image stack")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a BDB format image stack file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select any image stack")
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a image stack file of any supported format</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "data3d_one":
 							file_format = "hdf3d_one"
 							temp_btn = QPushButton("Select HDF volume")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a HDF format volume file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select any volume")
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a volume file of any supported format</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "data3d_stack":
 							file_format = "hdf3d_stack"
 							temp_btn = QPushButton("Select HDF volume stack")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a HDF format volume stack file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select any volume stack")
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a volume stack file of any supported format</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "select_mic_both":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select mic/movie list")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a micrograph/movie selection file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2446,13 +2446,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "select_mic_one":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select micrograph list")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a micrograph selection file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2460,26 +2460,26 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "select_mic_one_ext":
 							file_format = "select_mic_one"
 							temp_btn = QPushButton("Select micrograph list")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a micrograph selection file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "mic_one"
 							temp_btn = QPushButton("Select any micrograph")
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a micrograph file of any supported format</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "select_mic_stack":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select movie list")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a micrograph movie selection file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2487,13 +2487,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "select_data2d_stack":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select image list")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a image selection file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2501,13 +2501,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "select_drift_params":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select drift params list")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a drift shift parameters selection file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2515,13 +2515,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "params_any_txt":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select parameters text")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a parameters text file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2529,13 +2529,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "params_proj_txt":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select projection params")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a projection parameters file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2543,26 +2543,26 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "params_coords_any":
 							file_format = "params_coords_box"
 							temp_btn = QPushButton("Select BOX coordinates")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a EMAN BOX coordinates file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select any coordinates")
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a coordinates file of any supported format</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "params_cter_txt":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select CTER partres")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a CTER partres parameters file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2570,13 +2570,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "params_rebox_rbx":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select SPHIRE rebox")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a SPHIRE rebox file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2584,13 +2584,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "params_drift_txt":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select drift shift params")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a drift shift parameters file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2598,13 +2598,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "rot_matrix":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select matrix file")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a rotational matrix file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2612,13 +2612,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "params_relion_star":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select RELION STAR file")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a RELION STAR file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2626,14 +2626,14 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "params_star":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select STAR file")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>' + "Display open file dialog to select a STAR file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row,grid_col_origin + token_label_col_span + token_widget_col_span * 2,
-												  token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn, int(grid_row), int(grid_col_origin + token_label_col_span + token_widget_col_span * 2),
+												  int(token_widget_row_span), int(token_widget_col_span))
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file,
 															 cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
@@ -2643,9 +2643,9 @@
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0);'
 												   ' border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row,
-												  grid_col_origin + token_label_col_span + token_widget_col_span * 3,
-												  token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn, int(grid_row),
+												  int(grid_col_origin + token_label_col_span + token_widget_col_span * 3),
+												  int(token_widget_row_span), int(token_widget_col_span))
 						elif cmd_token.type == "submission_temp":
 							file_format = cmd_token.type
 							file_format = "sh"
@@ -2653,9 +2653,9 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip(
 								'<FONT>' + "Display open file dialog to select a parameters text file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row,
-												  grid_col_origin + token_label_col_span + token_widget_col_span * 2,
-												  token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn, int(grid_row),
+												  int(int(grid_col_origin + token_label_col_span + token_widget_col_span * 2)),
+												  int(token_widget_row_span), int(token_widget_col_span))
 							temp_btn.clicked.connect(
 								partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
@@ -2665,15 +2665,15 @@
 							temp_btn.setStyleSheet(
 								'background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row,
-												  grid_col_origin + token_label_col_span + token_widget_col_span * 3,
-												  token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn, int(grid_row),
+												  int(grid_col_origin + token_label_col_span + token_widget_col_span * 3),
+												  int(token_widget_row_span), int(token_widget_col_span))
 						elif cmd_token.type == "params_any_json":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select JSON file")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select a JSON file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2681,13 +2681,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "params_any_h5":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select h5 file")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select a h5 file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2695,13 +2695,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "spectrum1d":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select power spectrum")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a 1D power spectrum file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2709,13 +2709,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "mtf":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select MTF data")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a MTF data file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2723,13 +2723,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "pdb":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select PDB data")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a PDB data file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2737,13 +2737,13 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "exe":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select executable")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select an executable file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2751,16 +2751,16 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "py":
 							file_format = cmd_token.type
 							temp_btn = QPushButton("Select python file")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip(
 								'<FONT>' + "Display open file dialog to select an executable file</FONT>")
-							grid_layout.addWidget(temp_btn, grid_row,
-												  grid_col_origin + token_label_col_span + token_widget_col_span * 2,
-												  token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn, int(grid_row),
+												  int(grid_col_origin + token_label_col_span + token_widget_col_span * 2),
+												  int(token_widget_row_span), int(token_widget_col_span))
 							temp_btn.clicked.connect(
 								partial(self.sxcmdwidget.select_file, cmd_token_widget,
 										file_format))
@@ -2771,14 +2771,14 @@
 							temp_btn.setStyleSheet(
 								'background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row,
-												  grid_col_origin + token_label_col_span + token_widget_col_span * 3,
-												  token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn, int(grid_row),
+												  int(grid_col_origin + token_label_col_span + token_widget_col_span * 3),
+												  int(token_widget_row_span), int(token_widget_col_span))
 						elif cmd_token.type == "dir" or cmd_token.type == "dir_list" or cmd_token.type == "output_continue":
 							temp_btn = QPushButton("Select directory")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display select directory dialog"+'</FONT>')
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_dir, cmd_token_widget))
 							file_format = "INVISIBLE"
 							temp_btn = QPushButton("%s" % file_format)
@@ -2786,19 +2786,19 @@
 							temp_btn.setEnabled(False)
 							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 							temp_btn.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						elif cmd_token.type == "abs_freq":
 							# Create button for resolution display. Here, I use button to keep the look & feel.
 							cmd_token_subwidget_left = QPushButton("Label for Resolution [A]")
 							cmd_token_subwidget_left.setEnabled(False)
 							cmd_token_subwidget_left.setMinimumWidth(func_btn_min_width)
 							cmd_token_subwidget_left.setToolTip('<FONT>'+"Resolution [A] corresponding to absolute frequency [1/Pixel]"+'</FONT>')
-							grid_layout.addWidget(cmd_token_subwidget_left, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(cmd_token_subwidget_left,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 							# Create button to show the associated calculator dialog.
 							cmd_token_subwidget_right = QPushButton("Use resolution [A]")
 							cmd_token_subwidget_right.setToolTip('<FONT>'+"Display calculator dialog to use the resolution [A] instead of absolute frequency [1/Pixel]. It calculates absolute frequency [1/Pixel] (abs_freq) From resolution [A] (ares) using a give pixel size [A/Pixel] (apix), where abs_freq = apix/ares. </FONT>")
 							cmd_token_subwidget_right.setMinimumWidth(func_btn_min_width)
-							grid_layout.addWidget(cmd_token_subwidget_right, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+							grid_layout.addWidget(cmd_token_subwidget_right,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 							# Associated this subwidget to open the calculator dialog
 							const_register_widget_apix = self.sxcmdwidget.sxconst_set.dict["apix"].register_widget
 							cmd_token_calculator_dialog = SXDialogCalculator(const_register_widget_apix, cmd_token_widget, cmd_token_subwidget_left, self)
@@ -2811,19 +2811,19 @@
 ###							temp_btn = QPushButton("Select Image")
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select standard format image file (e.g. .hdf, .mrc)</FONT>")
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget))
 ###							file_format = "txt"
 ###							temp_btn = QPushButton("Select text file")
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a parameters text file</FONT>" )
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 ###						elif cmd_token.type == "any_image":
 ###							temp_btn = QPushButton("Select Image")
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select standard format image file (e.g. .hdf, .mrc)</FONT>")
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget))
 ###							file_format = "INVISIBLE"
 ###							temp_btn = QPushButton("%s" % file_format)
@@ -2831,12 +2831,12 @@
 ###							temp_btn.setEnabled(False)
 ###							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 ###						elif cmd_token.type == "any_image_list":
 ###							temp_btn = QPushButton("Select Images")
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select standard format image files (e.g. .hdf, .mrc)</FONT>")
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, cmd_token.type))
 ###							file_format = "INVISIBLE"
 ###							temp_btn = QPushButton("%s" % file_format)
@@ -2844,12 +2844,12 @@
 ###							temp_btn.setEnabled(False)
 ###							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 ###						elif cmd_token.type == "any_file":
 ###							temp_btn = QPushButton("Select File")
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select file (e.g. *.*)</FONT>")
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget))
 ###							file_format = "INVISIBLE"
 ###							temp_btn = QPushButton("%s" % file_format)
@@ -2857,38 +2857,38 @@
 ###							temp_btn.setEnabled(False)
 ###							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 ###						elif cmd_token.type == "any_file_list":
 ###							temp_btn = QPushButton("Select Files")
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select files (e.g. *.*)</FONT>")
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, cmd_token.type))
 ###							file_format = "bdb"
 ###							temp_btn = QPushButton("Select .%s" % file_format)
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select .%s format image file</FONT>" % file_format)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 ###						elif cmd_token.type == "image":
 ###							file_format = "hdf"
 ###							temp_btn = QPushButton("Select .%s" % file_format)
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select .%s format image file</FONT>" % file_format)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 ###							file_format = "bdb"
 ###							temp_btn = QPushButton("Select .%s" % file_format)
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select .%s format image file</FONT>" % file_format)
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 ###						elif cmd_token.type == "bdb":
 ###							file_format = "bdb"
 ###							temp_btn = QPushButton("Select .%s" % file_format)
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select .%s format image file</FONT>" % file_format)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 ###							file_format = "INVISIBLE"
 ###							temp_btn = QPushButton("%s" % file_format)
@@ -2896,13 +2896,13 @@
 ###							temp_btn.setEnabled(False)
 ###							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 ###						elif cmd_token.type == "hdf":
 ###							file_format = cmd_token.type
 ###							temp_btn = QPushButton("Select .%s" % file_format)
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select .%s format image file</FONT>" % file_format)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 ###							file_format = "INVISIBLE"
 ###							temp_btn = QPushButton("%s" % file_format)
@@ -2910,13 +2910,13 @@
 ###							temp_btn.setEnabled(False)
 ###							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 ###						elif cmd_token.type == "mrc":
 ###							file_format = cmd_token.type
 ###							temp_btn = QPushButton("Select .%s" % file_format)
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select .%s format image file</FONT>" % file_format)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 ###							file_format = "INVISIBLE"
 ###							temp_btn = QPushButton("%s" % file_format)
@@ -2924,13 +2924,13 @@
 ###							temp_btn.setEnabled(False)
 ###							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 ###						elif cmd_token.type == "txt":
 ###							file_format = cmd_token.type
 ###							temp_btn = QPushButton("Select text file")
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
 ###							temp_btn.setToolTip('<FONT>'+"Display open file dialog to select a parameters text file</FONT>")
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 ###							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 ###							file_format = "INVISIBLE"
 ###							temp_btn = QPushButton("%s" % file_format)
@@ -2938,7 +2938,7 @@
 ###							temp_btn.setEnabled(False)
 ###							temp_btn.setStyleSheet('background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid')
 ###							temp_btn.setMinimumWidth(func_btn_min_width)
-###							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
+###							grid_layout.addWidget(temp_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 3),int( token_widget_row_span),1)
 						else:
 							if cmd_token.type not in ["int", "float", "string", "output", "apix", "ctfwin", "box", "radius", "sym", "mass", "filament_width"]: ERROR("Logical Error: Encountered unsupported type (%s). Consult with the developer."  % cmd_token.type, "%s in %s" % (__name__, os.path.basename(__file__)))
 						
@@ -3017,25 +3017,25 @@
 			# Add gui components for MPI related parameters
 			temp_label = QLabel("MPI processors")
 			temp_label.setMinimumWidth(token_label_min_width)
-			submit_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+			submit_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 
 			# self.mpi_nproc_edit = QLineEdit(self)
 			self.mpi_nproc_edit = QLineEdit()
 			self.mpi_nproc_edit.setToolTip('<FONT>'+"Number of processors to use. default is single processor mode"+'</FONT>')
-			submit_layout.addWidget(self.mpi_nproc_edit, grid_row, grid_col_origin + token_label_col_span, token_widget_row_span, token_widget_col_span)
+			submit_layout.addWidget(self.mpi_nproc_edit,int( grid_row),int( grid_col_origin + token_label_col_span),int( token_widget_row_span),1)
 
 			# Add save parameters button
 			self.save_params_btn = QPushButton("Save parameters")
 			self.save_params_btn.setMinimumWidth(btn_min_width)
 			self.save_params_btn.setToolTip('<FONT>'+"Save gui parameter settings"+'</FONT>')
 			self.save_params_btn.clicked.connect(self.sxcmdwidget.save_params)
-			submit_layout.addWidget(self.save_params_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
+			submit_layout.addWidget(self.save_params_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 
 			grid_row += 1
 
 			temp_label = QLabel("MPI command line template")
 			temp_label.setMinimumWidth(token_label_min_width)
-			submit_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+			submit_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 
 			self.mpi_cmd_line_edit = QLineEdit()
 			if 'SPHIRE_MPI_COMMAND_LINE_TEMPLATE' in os.environ:
@@ -3044,14 +3044,14 @@
 				mpi_command_line_template = ""
 			self.mpi_cmd_line_edit.setText(mpi_command_line_template)
 			self.mpi_cmd_line_edit.setToolTip('<FONT>'+"Template of MPI command line (e.g. \"mpirun -np XXX_SXMPI_NPROC_XXX --host n0,n1,n2 XXX_SXCMD_LINE_XXX\"). if empty, use \"mpirun -np XXX_SXMPI_NPROC_XXX XXX_SXCMD_LINE_XXX\"</FONT>")
-			submit_layout.addWidget(self.mpi_cmd_line_edit, grid_row, grid_col_origin + token_label_col_span, token_widget_row_span, token_widget_col_span)
+			submit_layout.addWidget(self.mpi_cmd_line_edit,int( grid_row),int( grid_col_origin + token_label_col_span),int( token_widget_row_span),1)
 
 			# Add load parameters button
 			self.load_params_btn = QPushButton("Load parameters")
 			self.load_params_btn.setMinimumWidth(btn_min_width)
 			self.load_params_btn.setToolTip('<FONT>'+"Load gui parameter settings to retrieve a previously-saved one"+'</FONT>')
 			self.load_params_btn.clicked.connect(self.sxcmdwidget.load_params)
-			submit_layout.addWidget(self.load_params_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
+			submit_layout.addWidget(self.load_params_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 
 			grid_row += 1
 
@@ -3069,7 +3069,7 @@
 			is_qsub_enabled = False
 			temp_label = QLabel("Submit job to queue")
 			temp_label.setMinimumWidth(token_label_min_width)
-			submit_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+			submit_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 
 			self.qsub_enable_checkbox = QCheckBox("")
 			if is_qsub_enabled == True:
@@ -3086,13 +3086,13 @@
 			self.qsub_enable_checkbox.setToolTip('<FONT>'+"Submit job to queue"+'</FONT>')
 			self.qsub_enable_checkbox.stateChanged.connect(self.set_qsub_enable_state) # To control enable state of the following qsub related widgets
 			self.qsub_enable_checkbox.setEnabled(self.sxcmdwidget.sxcmd.is_submittable)
-			submit_layout.addWidget(self.qsub_enable_checkbox, grid_row, grid_col_origin + token_label_col_span, token_widget_row_span, token_widget_col_span)
+			submit_layout.addWidget(self.qsub_enable_checkbox,int( grid_row),int( grid_col_origin + token_label_col_span),int( token_widget_row_span),1)
 
 			grid_row += 1
 
 			temp_label = QLabel("Job name")
 			temp_label.setMinimumWidth(token_label_min_width)
-			submit_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+			submit_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 
 			self.qsub_job_name_edit = QLineEdit()
 			if self.sxcmdwidget.sxcmd.is_submittable == True:
@@ -3101,13 +3101,13 @@
 				assert(self.sxcmdwidget.sxcmd.mpi_support == False)
 				self.qsub_job_name_edit.setText("N/A")
 			self.qsub_job_name_edit.setToolTip('<FONT>'+"Name of this job"+'</FONT>')
-			submit_layout.addWidget(self.qsub_job_name_edit, grid_row, grid_col_origin + token_label_col_span, token_widget_row_span, token_widget_col_span)
+			submit_layout.addWidget(self.qsub_job_name_edit,int( grid_row),int( grid_col_origin + token_label_col_span),int( token_widget_row_span),1)
 
 			grid_row += 1
 
 			temp_label = QLabel("Submission command")
 			temp_label.setMinimumWidth(token_label_min_width)
-			submit_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+			submit_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 
 			self.qsub_cmd_edit = QLineEdit()
 			if self.sxcmdwidget.sxcmd.is_submittable == True:
@@ -3120,13 +3120,13 @@
 				assert(self.sxcmdwidget.sxcmd.mpi_support == False)
 				self.qsub_cmd_edit.setText("N/A")
 			self.qsub_cmd_edit.setToolTip('<FONT>'+"Name of submission command to queue job"+'</FONT>')
-			submit_layout.addWidget(self.qsub_cmd_edit, grid_row, grid_col_origin + token_label_col_span, token_widget_row_span, token_widget_col_span)
+			submit_layout.addWidget(self.qsub_cmd_edit,int( grid_row),int( grid_col_origin + token_label_col_span),int( token_widget_row_span),1)
 
 			self.cmd_line_btn = QPushButton("Generate command line")
 			self.cmd_line_btn.setMinimumWidth(btn_min_width)
 			self.cmd_line_btn.setToolTip('<FONT>'+"Generate command line from gui parameter settings and automatically save settings"+'</FONT>')
 			self.cmd_line_btn.clicked.connect(self.sxcmdwidget.print_cmd_line)
-			submit_layout.addWidget(self.cmd_line_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
+			submit_layout.addWidget(self.cmd_line_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 
 			grid_row += 1
 
@@ -3134,13 +3134,13 @@
 			self.pipe_line_btn.setMinimumWidth(btn_min_width)
 			self.pipe_line_btn.setToolTip('<FONT>'+"Generate executable files that and add them to the queue folder."+'</FONT>')
 			self.pipe_line_btn.clicked.connect(self.sxcmdwidget.add_to_pipeline)
-			submit_layout.addWidget(self.pipe_line_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
+			submit_layout.addWidget(self.pipe_line_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 
 			grid_row += 1
 
 			temp_label = QLabel("Submission script template")
 			temp_label.setMinimumWidth(token_label_min_width)
-			submit_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+			submit_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 
 			self.qsub_script_edit = QLineEdit()
 			if self.sxcmdwidget.sxcmd.is_submittable == True:
@@ -3153,13 +3153,13 @@
 				assert(self.sxcmdwidget.sxcmd.mpi_support == False)
 				self.qsub_script_edit.setText("N/A")
 			self.qsub_script_edit.setToolTip('<FONT>'+"File name of submission script template (e.g. $PROJECT_DIR/msgui_qsub.sh)"+'</FONT>')
-			submit_layout.addWidget(self.qsub_script_edit, grid_row, grid_col_origin + token_label_col_span, token_widget_row_span, token_widget_col_span)
+			submit_layout.addWidget(self.qsub_script_edit,int( grid_row),int( grid_col_origin + token_label_col_span),int( token_widget_row_span),1)
 
 			self.qsub_script_open_btn = QPushButton("Select template")
 			self.qsub_script_open_btn.setMinimumWidth(func_btn_min_width)
 			self.qsub_script_open_btn.setToolTip('<FONT>'+"Display open file dialog to select job submission script template file"+'</FONT>')
 			self.qsub_script_open_btn.clicked.connect(partial(self.sxcmdwidget.select_file, self.qsub_script_edit, 'submission_template'))
-			submit_layout.addWidget(self.qsub_script_open_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
+			submit_layout.addWidget(self.qsub_script_open_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span),int( token_widget_row_span),1)
 
 			# Add a run button
 			# self.execute_btn = QPushButton("Run %s" % self.sxcmdwidget.sxcmd.get_mode_name_for("human"))
@@ -3170,7 +3170,7 @@
 			self.execute_btn.setMinimumWidth(btn_min_width)
 			self.execute_btn.setToolTip('<FONT>'+"Run %s and automatically save gui parameter settings</FONT>" % self.sxcmdwidget.sxcmd.get_mode_name_for("human"))
 			self.execute_btn.clicked.connect(self.sxcmdwidget.execute_cmd_line)
-			submit_layout.addWidget(self.execute_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
+			submit_layout.addWidget(self.execute_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 
 			grid_row += 1
 
@@ -3181,7 +3181,7 @@
 ###			self.cmd_line_btn.setMinimumWidth(btn_min_width)
 ###			self.cmd_line_btn.setToolTip('<FONT>'+"Button for debug"+'</FONT>')
 ###			self.connect(self.cmd_line_btn, SIGNAL("clicked()"), self.res_calculator.show)
-###			submit_layout.addWidget(self.cmd_line_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
+###			submit_layout.addWidget(self.cmd_line_btn,int( grid_row),int( grid_col_origin + token_label_col_span + token_widget_col_span * 2),int( token_widget_row_span),1)
 ###
 ###			grid_row += 1
 
@@ -3402,7 +3402,7 @@
 
 				# title=QLabel("<span style=\'font-size:18pt; font-weight:600; color:#aa0000;\'><b>%s </b></span><span style=\'font-size:12pt; font-weight:60; color:#aa0000;\'>(shift-click for wiki)</span>" % label_text)
 				title=QLabel("<span style=\'font-size:18pt; font-weight:600; color:#000000;\'><b>%s </b></span><span style=\'font-size:12pt; font-weight:60; color:#000000;\'>(shift-click for wiki)</span>" % label_text)
-				self.grid_layout.addWidget(title, self.grid_row, self.grid_col_origin, self.sxcmd_btn_row_span, self.sxcmd_btn_col_span)
+				self.grid_layout.addWidget(title,int( self.grid_row),int( self.grid_col_origin),int( self.sxcmd_btn_row_span),1)
 
 				self.grid_row += 1
 
@@ -3413,7 +3413,7 @@
 			# sxcmd.btn.setCheckable(True) # NOTE: 2016/02/18 Toshio Moriya: With this setting, we can not move the focus to the unchecked butttons... PyQt bug?
 			sxcmd.btn.setToolTip('<FONT>'+sxcmd.short_info+'</FONT>')
 			self.sxcmd_btn_group.addButton(sxcmd.btn)
-			self.grid_layout.addWidget(sxcmd.btn, self.grid_row, self.grid_col_origin, self.sxcmd_btn_row_span, self.sxcmd_btn_col_span)
+			self.grid_layout.addWidget(sxcmd.btn,int( self.grid_row),int( self.grid_col_origin),int( self.sxcmd_btn_row_span),1)
 
 			# Create SXCmdWidget for this sx*.py processe
 			sxcmd.widget = SXCmdWidget(self.sxconst_set, sxcmd, helical, self)
@@ -3528,7 +3528,7 @@
 		# Set a label and its position in this tab
 		temp_label = QLabel("<b>%s</b>" % (self.sxconst_set.label))
 		temp_label.setMinimumWidth(title_min_width)
-		header_layout.addWidget(temp_label, header_grid_row, header_col_origin, title_row_span, title_col_span)
+		header_layout.addWidget(temp_label,int( header_grid_row),int( header_col_origin),int( title_row_span),1)
 
 		header_grid_row += 1
 
@@ -3539,7 +3539,7 @@
 		temp_label.setWordWrap(True)
 		temp_label.setMinimumWidth(short_info_min_width)
 		temp_label.setMinimumHeight(short_info_min_height)
-		header_layout.addWidget(temp_label, header_grid_row, header_col_origin, short_info_row_span, short_info_col_span)
+		header_layout.addWidget(temp_label,int( header_grid_row),int( header_col_origin),int( short_info_row_span),1)
 
 		# Add const set grid layout to global layout
 		global_layout.addLayout(header_layout, global_grid_row, global_col_origin)
@@ -3553,13 +3553,13 @@
 			# Create widget associated to this project constant parameter
 			temp_label = QLabel(sxconst.label)
 			temp_label.setMinimumWidth(const_label_min_width)
-			const_set_layout.addWidget(temp_label, const_set_grid_row, const_set_col_origin, const_label_row_span, const_label_col_span)
+			const_set_layout.addWidget(temp_label,int( const_set_grid_row),int( const_set_col_origin),int( const_label_row_span),1)
 
 			sxconst_register_widget = QPushButton("%s" % sxconst.register)
 			sxconst_register_widget.setMinimumWidth(const_register_widget_min_width)
 			custom_style = "QPushButton {color:green; }"
 			sxconst_register_widget.setStyleSheet(custom_style)
-			const_set_layout.addWidget(sxconst_register_widget, const_set_grid_row, const_set_row_origin + const_label_col_span, const_register_widget_row_span, const_register_widget_col_span)
+			const_set_layout.addWidget(sxconst_register_widget,int( const_set_grid_row),int( const_set_row_origin + const_label_col_span),int( const_register_widget_row_span),1)
 			sxconst_register_widget.setToolTip('<FONT>'+"Retrieve this registered value to edit box"+'</FONT>')
 			sxconst_register_widget.clicked.connect(partial(self.handle_regster_widget_event, sxconst))
 
@@ -3567,7 +3567,7 @@
 			sxconst_widget.setMinimumWidth(const_widget_min_width)
 			sxconst_widget.setText(sxconst.register)
 			sxconst_widget.setToolTip('<FONT>'+sxconst.help+'</FONT>')
-			const_set_layout.addWidget(sxconst_widget, const_set_grid_row, const_set_row_origin + const_label_col_span + const_register_widget_col_span, const_widget_row_span, const_widget_col_span)
+			const_set_layout.addWidget(sxconst_widget,int( const_set_grid_row),int( const_set_row_origin + const_label_col_span + const_register_widget_col_span),int( const_widget_row_span),1)
 
 			const_set_grid_row += 1
 
@@ -3590,7 +3590,7 @@
 		self.execute_btn.setMinimumWidth(func_btn_min_width * register_btn_col_span)
 		self.execute_btn.setToolTip('<FONT>'+"Register project constant parameter settings to automatically set values to command arguments and options"+'</FONT>')
 		self.execute_btn.clicked.connect(self.register_const_set)
-		btn_layout.addWidget(self.execute_btn, btn_grid_row, btn_col_origin, register_btn_row_span, register_btn_col_span)
+		btn_layout.addWidget(self.execute_btn,int( btn_grid_row),int( btn_col_origin),int( register_btn_row_span),1)
 
 		btn_grid_row += 1
 
@@ -3599,17 +3599,17 @@
 		self.save_consts_btn.setMinimumWidth(func_btn_min_width)
 		self.save_consts_btn.setToolTip('<FONT>'+"Save project constant parameter settings"+'</FONT>')
 		self.save_consts_btn.clicked.connect(self.save_consts)
-		btn_layout.addWidget(self.save_consts_btn, btn_grid_row, btn_col_origin, func_btn_row_span, func_btn_col_span)
+		btn_layout.addWidget(self.save_consts_btn,int( btn_grid_row),int( btn_col_origin),int( func_btn_row_span),1)
 
 		# Add load project constant parameter settings button
 		self.load_consts_btn = QPushButton("Load settings")
 		self.load_consts_btn.setMinimumWidth(func_btn_min_width)
 		self.load_consts_btn.setToolTip('<FONT>'+"Load project constant parameter settings to retrieve the previously-saved one"+'</FONT>')
 		self.load_consts_btn.clicked.connect(self.load_consts)
-		btn_layout.addWidget(self.load_consts_btn, btn_grid_row, btn_col_origin + func_btn_col_span, func_btn_row_span, func_btn_col_span)
+		btn_layout.addWidget(self.load_consts_btn,int( btn_grid_row),int( btn_col_origin + func_btn_col_span),int( func_btn_row_span),1)
 
 		btn_grid_row += 1
-		btn_layout.addWidget(QLabel(), btn_grid_row, btn_col_origin, register_btn_row_span, register_btn_col_span)
+		btn_layout.addWidget(QLabel(),int( btn_grid_row),int( btn_col_origin),int( register_btn_row_span),1)
 
 		btn_grid_row += 1
 
@@ -3626,7 +3626,7 @@
 		# make 3D textured push button look
 		self.helical_spa_btn.setMinimumWidth(func_btn_min_width * register_btn_col_span)
 		self.helical_spa_btn.clicked.connect(self.switch_gui)
-		btn_layout.addWidget(self.helical_spa_btn, btn_grid_row, btn_col_origin, register_btn_row_span, register_btn_col_span)
+		btn_layout.addWidget(self.helical_spa_btn,int( btn_grid_row),int( btn_col_origin),int( register_btn_row_span),1)
 
 		btn_grid_row += 1
 
@@ -3851,7 +3851,7 @@
 		# Create label widget
 		temp_label = QLabel("Resolution [A]", self)
 		# temp_label.setMinimumWidth(token_label_min_width)
-		# grid_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+		# grid_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 		temp_label.move(50,100)
 		self.edit_res = QLineEdit(self)
 		self.edit_res.setText('Enter Resolution Here')
@@ -3859,7 +3859,7 @@
 
 		temp_label = QLabel("Pixel Size [A/Pixel]", self)
 		# temp_label.setMinimumWidth(token_label_min_width)
-		# grid_layout.addWidget(temp_label, grid_row, grid_col_origin, token_label_row_span, token_label_col_span)
+		# grid_layout.addWidget(temp_label,int( grid_row),int( grid_col_origin),int( token_label_row_span),1)
 		temp_label.move(50,200)
 		self.edit_apix = QLineEdit(self)
 		self.edit_apix.setText('Enter Pixel Size Here')
@@ -3956,7 +3956,7 @@
 #		# Set a label and its position in this dialog
 #		temp_label = QLabel("<b>%s</b>" % (self.sxoperand_set.label))
 #		temp_label.setMinimumWidth(title_min_width)
-#		header_layout.addWidget(temp_label, header_grid_row, header_col_origin, title_row_span, title_col_span)
+#		header_layout.addWidget(temp_label,int( header_grid_row),int( header_col_origin),int( title_row_span),1)
 #
 #		header_grid_row += 1
 
@@ -3967,7 +3967,7 @@
 #		temp_label.setWordWrap(True)
 #		temp_label.setMinimumWidth(short_info_min_width)
 #		temp_label.setMinimumHeight(short_info_min_height)
-#		header_layout.addWidget(temp_label, header_grid_row, header_col_origin, short_info_row_span, short_info_col_span)
+#		header_layout.addWidget(temp_label,int( header_grid_row),int( header_col_origin),int( short_info_row_span),1)
 #
 #		# Add const set grid layout to global layout
 #		global_layout.addLayout(header_layout, global_grid_row, global_col_origin)
@@ -3981,7 +3981,7 @@
 			# Create widget associated to this project constant parameter
 			temp_label = QLabel(sxoperand.label)
 			temp_label.setMinimumWidth(operand_label_min_width)
-			operand_layout.addWidget(temp_label, operand_grid_row, operand_set_col_origin, operand_label_row_span, operand_label_col_span)
+			operand_layout.addWidget(temp_label,int( operand_grid_row),int( operand_set_col_origin),int( operand_label_row_span),1)
 
 			sxoperand_register_widget = QPushButton("%s" % sxoperand.register)
 			sxoperand_register_widget.setMinimumWidth(operand_register_widget_min_width)
@@ -3997,13 +3997,13 @@
 				custom_style = "QPushButton {background: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0); border: 0px rgba(0, 0, 0, 0) solid;}"
 				sxoperand_register_widget.setStyleSheet(custom_style)
 				sxoperand_register_widget.setEnabled(False)
-			operand_layout.addWidget(sxoperand_register_widget, operand_grid_row, operand_set_row_origin + operand_label_col_span, operand_register_widget_row_span, operand_register_widget_col_span)
+			operand_layout.addWidget(sxoperand_register_widget,int( operand_grid_row),int( operand_set_row_origin + operand_label_col_span),int( operand_register_widget_row_span),1)
 
 			sxoperand_widget = QLineEdit()
 			sxoperand_widget.setMinimumWidth(operand_widget_min_width)
 			sxoperand_widget.setText(sxoperand.register)
 			sxoperand_widget.setToolTip('<FONT>'+sxoperand.help+'</FONT>')
-			operand_layout.addWidget(sxoperand_widget, operand_grid_row, operand_set_row_origin + operand_label_col_span + operand_register_widget_col_span, operand_widget_row_span, operand_widget_col_span)
+			operand_layout.addWidget(sxoperand_widget,int( operand_grid_row),int( operand_set_row_origin + operand_label_col_span + operand_register_widget_col_span),int( operand_widget_row_span),1)
 			if not sxoperand.is_input:
 				sxoperand_widget.setEnabled(False)
 				
@@ -4026,14 +4026,14 @@
 		self.convert_units_btn.setToolTip('<FONT>'+"Calculate unit conversion"+'</FONT>')
 		self.convert_units_btn.setDefault(True);
 		self.convert_units_btn.clicked.connect(self.handle_convert_units)
-		btn_layout.addWidget(self.convert_units_btn, btn_grid_row, btn_col_origin, func_btn_row_span, func_btn_col_span)
+		btn_layout.addWidget(self.convert_units_btn,int( btn_grid_row),int( btn_col_origin),int( func_btn_row_span),1)
 
 		# Add load project constant parameter settings button
 		self.cancel_btn = QPushButton("Cancel")
 		self.cancel_btn.setMinimumWidth(func_btn_min_width)
 		self.cancel_btn.setToolTip('<FONT>'+"Cancel the unit convertion. Close the calculator dialog without applying the converted value to the associated edit box"+'</FONT>')
 		self.cancel_btn.clicked.connect(self.close)
-		btn_layout.addWidget(self.cancel_btn, btn_grid_row, btn_col_origin + func_btn_col_span, func_btn_row_span, func_btn_col_span)
+		btn_layout.addWidget(self.cancel_btn,int( btn_grid_row),int( btn_col_origin + func_btn_col_span),int( func_btn_row_span),1)
 
 		btn_grid_row += 1
 
@@ -4056,7 +4056,7 @@
 		self.apply_btn.setMinimumWidth(func_btn_min_width * register_btn_col_span)
 		self.apply_btn.setToolTip('<FONT>'+"Apply converted value to the corresponding command arguments and options"+'</FONT>')
 		self.apply_btn.clicked.connect(self.handle_apply_unit_conversion)
-		btn_layout.addWidget(self.apply_btn, btn_grid_row, btn_col_origin, register_btn_row_span, register_btn_col_span)
+		btn_layout.addWidget(self.apply_btn,int( btn_grid_row),int( btn_col_origin),int( register_btn_row_span),1)
 
 		btn_grid_row += 1
 
@@ -7294,9 +7294,9 @@
 	# Define the main window (class SXMainWindow)
 	sxmain_window = SXMainWindow(options.helical)
 	sxmain_window.setWindowTitle("SPHIRE-GUI Main Version {0}".format(version_string))
-	sxmain_window.setMinimumWidth(SXLookFeelConst.sxmain_window_width)
-	sxmain_window.setMinimumHeight(SXLookFeelConst.sxmain_window_height)
-	sxmain_window.resize(SXLookFeelConst.sxmain_window_width, SXLookFeelConst.sxmain_window_height)
+	sxmain_window.setMinimumWidth(int(SXLookFeelConst.sxmain_window_width))
+	sxmain_window.setMinimumHeight(int(SXLookFeelConst.sxmain_window_height))
+	sxmain_window.resize(int(SXLookFeelConst.sxmain_window_width), int(SXLookFeelConst.sxmain_window_height))
 	sxmain_window.move(QPoint(SXLookFeelConst.sxmain_window_left, SXLookFeelConst.sxmain_window_top));
 
 	# Show main window
